
Lab4-Task1Uart.elf:     file format elf32-littlenios2
Lab4-Task1Uart.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0000fbbc memsz 0x0000fbbc flags r-x
    LOAD off    0x00010bdc vaddr 0x0080fbdc paddr 0x008116c4 align 2**12
         filesz 0x00001ae8 memsz 0x00001ae8 flags rw-
    LOAD off    0x000131ac vaddr 0x008131ac paddr 0x008131ac align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f678  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000320  0080f8bc  0080f8bc  000108bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ae8  0080fbdc  008116c4  00010bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  008131ac  008131ac  000131ac  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0081330c  0081330c  000126c4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000126c4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ee8  00000000  00000000  000126e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023e62  00000000  00000000  000135d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000921b  00000000  00000000  00037432  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b61d  00000000  00000000  0004064d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000020e8  00000000  00000000  0004bc6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003978  00000000  00000000  0004dd54  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016cc3  00000000  00000000  000516cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00068390  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001740  00000000  00000000  000683c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006cbdd  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0006cbe0  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006cbe3  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006cbe4  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0006cbe5  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0006cbe9  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006cbed  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0006cbf1  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0006cbfa  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0006cc03  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  0006cc0c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000047  00000000  00000000  0006cc0f  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000350ce  00000000  00000000  0006cc56  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
0080f8bc l    d  .rodata	00000000 .rodata
0080fbdc l    d  .rwdata	00000000 .rwdata
008131ac l    d  .bss	00000000 .bss
0081330c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab4-Task1Uart_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 asprintf.c
00000000 l    df *ABS*	00000000 impure.c
0080fbdc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080f92e l     O .rodata	00000010 zeroes.4389
0080f93e l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 dtoa.c
008031c4 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00810428 l     O .rwdata	00000020 lc_ctype_charset
00810408 l     O .rwdata	00000020 lc_message_charset
00810448 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 mprec.c
0080f96c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080fa90 l     O .rodata	00000010 zeroes.4333
0080faa0 l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
0080b7d0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0081169c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080ba6c l     F .text	00000034 alt_dev_reg
00810480 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080bd60 l     F .text	0000020c altera_avalon_jtag_uart_irq
0080bf6c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080c5a4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0080c7c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0080c920 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080c94c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080cdc0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0080cf20 l     F .text	0000003c alt_get_errno
0080cf5c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0080e5d0 l     F .text	00000008 __fp_unlock
0080e5e4 l     F .text	0000019c __sinit.part.1
0080e780 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 refill.c
0080ecc4 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080f34c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080f440 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0080f528 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
0080f640 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
0080f780 l     F .text	0000003c alt_get_errno
008131e0 g     O .bss	00000004 alt_instruction_exception_handler
008060f0 g     F .text	00000074 _mprec_log10
008061dc g     F .text	0000008c __any_on
0080f204 g     F .text	00000054 _isatty_r
0080f978 g     O .rodata	00000028 __mprec_tinytens
0080b8bc g     F .text	0000007c alt_main
0081320c g     O .bss	00000100 alt_irq
0080f258 g     F .text	00000060 _lseek_r
008116c4 g       *ABS*	00000000 __flash_rwdata_start
0080a174 g     F .text	00000088 .hidden __eqdf2
0081330c g       *ABS*	00000000 __alt_heap_start
0080ef8c g     F .text	0000005c __sseek
0080e930 g     F .text	00000010 __sinit
00804ea8 g     F .text	0000007c _setlocale_r
0080e788 g     F .text	00000078 __sfmoreglue
0080b95c g     F .text	00000024 __malloc_unlock
00807a9c g     F .text	0000015c memmove
0080e918 g     F .text	00000018 _cleanup
008051b0 g     F .text	000000a8 _Balloc
008003c8 g     F .text	0000008c read_chars
0080b980 g     F .text	0000003c alt_putstr
0080a1fc g     F .text	000000dc .hidden __gtdf2
0080d3cc g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080f1a8 g     F .text	0000005c _fstat_r
008131b8 g     O .bss	00000004 errno
0080df28 g     F .text	00000014 __srget
0080ef08 g     F .text	00000008 __seofread
00806620 g     F .text	000013a0 ___svfiprintf_internal_r
008131cc g     O .bss	00000004 alt_argv
00819688 g       *ABS*	00000000 _gp
00800308 g     F .text	000000c0 generate_text
00811508 g     O .rwdata	00000180 alt_fd_list
0080dd40 g     F .text	00000070 _getc_r
0080ddb0 g     F .text	00000088 getc
0080d3f0 g     F .text	00000090 alt_find_dev
00805068 g     F .text	00000148 memcpy
0080e5d8 g     F .text	0000000c _cleanup_r
0080b5b4 g     F .text	000000dc .hidden __floatsidf
0080cea4 g     F .text	0000007c alt_io_redirect
0080a2d8 g     F .text	000000f4 .hidden __ltdf2
0080f8bc g       *ABS*	00000000 __DTOR_END__
0080d6dc g     F .text	0000009c alt_exception_cause_generated_bad_addr
00806268 g     F .text	00000074 __fpclassifyd
0080604c g     F .text	000000a4 __ratio
0080c164 g     F .text	0000021c altera_avalon_jtag_uart_read
00800558 g     F .text	00000014 malloc
00808e14 g     F .text	00000064 .hidden __udivsi3
0080f47c g     F .text	000000ac isatty
0080f9c8 g     O .rodata	000000c8 __mprec_tens
00804f24 g     F .text	0000000c __locale_charset
0080d64c g     F .text	00000090 alt_icache_flush
008131b4 g     O .bss	00000004 __malloc_top_pad
00811698 g     O .rwdata	00000004 __mb_cur_max
00804f54 g     F .text	0000000c _localeconv_r
0080d878 g     F .text	000004c8 __sfvwrite_r
008055e4 g     F .text	0000003c __i2b
00800eb4 g     F .text	00000054 _sbrk_r
0080f2b8 g     F .text	00000060 _read_r
008116b0 g     O .rwdata	00000004 alt_max_fd
0080f0a4 g     F .text	000000f0 _fclose_r
0080e5a0 g     F .text	00000030 fflush
008131b0 g     O .bss	00000004 __malloc_max_sbrked_mem
00808ef8 g     F .text	000008ac .hidden __adddf3
00805df4 g     F .text	0000010c __b2d
00808758 g     F .text	000005c4 .hidden __umoddi3
0080f564 g     F .text	000000dc lseek
00811688 g     O .rwdata	00000004 _global_impure_ptr
00807bf8 g     F .text	00000564 _realloc_r
0081330c g       *ABS*	00000000 __bss_end
0080ccd0 g     F .text	000000f0 alt_iic_isr_register
0080b79c g     F .text	00000034 alt_getchar
0080d2c4 g     F .text	00000108 alt_tick
0080815c g     F .text	000005fc .hidden __udivdi3
0080f9a0 g     O .rodata	00000028 __mprec_bigtens
008053c8 g     F .text	00000104 __s2b
0080b690 g     F .text	000000a8 .hidden __floatunsidf
00805b34 g     F .text	00000060 __mcmp
0080e950 g     F .text	00000018 __fp_lock_all
0080cc84 g     F .text	0000004c alt_ic_irq_enabled
0080d228 g     F .text	0000009c alt_alarm_stop
008131d4 g     O .bss	00000004 alt_irq_active
008000fc g     F .exceptions	000000d4 alt_irq_handler
008114e0 g     O .rwdata	00000028 alt_dev_null
0080c8d8 g     F .text	00000048 alt_dcache_flush_all
008054cc g     F .text	00000068 __hi0bits
0080b534 g     F .text	00000080 .hidden __fixdfsi
00800290 g     F .text	00000078 print_text
008116c4 g       *ABS*	00000000 __ram_rwdata_end
008116a8 g     O .rwdata	00000008 alt_dev_list
0080f7bc g     F .text	00000100 write
0080fbdc g       *ABS*	00000000 __ram_rodata_end
0080f388 g     F .text	000000b8 fstat
0080a2d8 g     F .text	000000f4 .hidden __ledf2
008058ac g     F .text	00000140 __pow5mult
008131c4 g     O .bss	00000004 __nlocale_changed
00808e78 g     F .text	00000058 .hidden __umodsi3
0081330c g       *ABS*	00000000 end
0080bca0 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0080f8bc g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080c61c g     F .text	0000007c alt_avalon_timer_sc_init
0080b738 g     F .text	00000064 .hidden __clzsi2
0080c380 g     F .text	00000224 altera_avalon_jtag_uart_write
0080047c g     F .text	00000064 _asprintf_r
0080e940 g     F .text	00000004 __sfp_lock_acquire
00804f84 g     F .text	000000e4 memchr
00804b98 g     F .text	00000310 _free_r
00804f30 g     F .text	00000010 __locale_mb_cur_max
0080deb4 g     F .text	00000074 __srget_r
0080e1a8 g     F .text	00000180 __call_exitprocs
008131c0 g     O .bss	00000004 __mlocale_changed
00811690 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
008131d8 g     O .bss	00000004 _alt_tick_rate
008059ec g     F .text	00000148 __lshift
008131dc g     O .bss	00000004 _alt_nticks
0080f67c g     F .text	00000104 read
0080bad8 g     F .text	00000064 alt_sys_init
00806450 g     F .text	000001d0 __ssprint_r
0080e090 g     F .text	00000118 __register_exitproc
00805620 g     F .text	0000028c __multiply
0080c00c g     F .text	00000068 altera_avalon_jtag_uart_close
00808ed0 g     F .text	00000028 .hidden __mulsi3
0080fbdc g       *ABS*	00000000 __ram_rwdata_start
0080f8bc g       *ABS*	00000000 __ram_rodata_start
008131e4 g     O .bss	00000028 __malloc_current_mallinfo
00805f00 g     F .text	0000014c __d2b
0080bb3c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0080d588 g     F .text	000000c4 alt_get_fd
0080f050 g     F .text	00000054 _close_r
0080de38 g     F .text	0000007c memcmp
0080bbfc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0081330c g       *ABS*	00000000 __alt_stack_base
0080bc4c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0080df3c g     F .text	00000154 __swsetup_r
008097a4 g     F .text	000009d0 .hidden __divdf3
0080e800 g     F .text	00000118 __sfp
00806164 g     F .text	00000078 __copybits
00810000 g     O .rwdata	00000408 __malloc_av_
0080e94c g     F .text	00000004 __sinit_lock_release
0080a3cc g     F .text	0000086c .hidden __muldf3
0080eeb4 g     F .text	00000054 __sread
0080d480 g     F .text	00000108 alt_find_file
0080c988 g     F .text	000000a4 alt_dev_llist_insert
0080b938 g     F .text	00000024 __malloc_lock
0080b9bc g     F .text	000000b0 sbrk
00800f08 g     F .text	000022bc ___svfprintf_internal_r
0080e544 g     F .text	0000005c _fflush_r
008079c0 g     F .text	000000dc _calloc_r
008131ac g       *ABS*	00000000 __bss_start
00800d8c g     F .text	00000128 memset
00800454 g     F .text	00000028 main
008131d0 g     O .bss	00000004 alt_envp
008131ac g     O .bss	00000004 __malloc_max_total_mem
0080bb9c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080efe8 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080f194 g     F .text	00000014 fclose
008033ec g     F .text	00001688 _dtoa_r
00800580 g     F .text	0000080c _malloc_r
008116b4 g     O .rwdata	00000004 alt_errno
0080e980 g     F .text	000000c4 _fwalk
00808d1c g     F .text	00000084 .hidden __divsi3
00804a74 g     F .text	00000124 _malloc_trim_r
0080f8bc g       *ABS*	00000000 __CTOR_END__
008062dc g     F .text	000000dc strcmp
0080f8bc g       *ABS*	00000000 __flash_rodata_start
0080f8bc g       *ABS*	00000000 __DTOR_LIST__
0080a174 g     F .text	00000088 .hidden __nedf2
0080baa0 g     F .text	00000038 alt_irq_init
0080d1a4 g     F .text	00000084 alt_release_fd
0080fab0 g     O .rodata	00000100 .hidden __clz_tab
008004e0 g     F .text	00000078 asprintf
008131bc g     O .bss	00000004 _PathLocale
0080d778 g     F .text	00000014 atexit
0080eff0 g     F .text	00000060 _write_r
00804f60 g     F .text	00000018 setlocale
0081168c g     O .rwdata	00000004 _impure_ptr
008131c8 g     O .bss	00000004 alt_argc
0080e328 g     F .text	0000021c __sflush_r
0080ca8c g     F .text	00000060 _do_dtors
00804f4c g     F .text	00000008 __locale_cjk_lang
0080ece0 g     F .text	000001d4 __srefill_r
00800020 g       .exceptions	00000000 alt_irq_entry
00805d90 g     F .text	00000064 __ulp
0080e968 g     F .text	00000018 __fp_unlock_all
008116a0 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00804f78 g     F .text	0000000c localeconv
0080cb20 g     F .text	00000050 alt_ic_isr_register
008116c4 g       *ABS*	00000000 _edata
0081330c g       *ABS*	00000000 _end
00800244 g       *ABS*	00000000 __ram_exceptions_end
0080c074 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0080d7c4 g     F .text	0000009c _fputs_r
0080cbf8 g     F .text	0000008c alt_ic_irq_disable
0080ef10 g     F .text	0000007c __swrite
00811694 g     O .rwdata	00000004 __malloc_trim_threshold
00804f40 g     F .text	0000000c __locale_msgcharset
0080d78c g     F .text	00000038 exit
0080ea44 g     F .text	000000c4 _fwalk_reent
00805b94 g     F .text	000001fc __mdiff
00808da0 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0080e944 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
0080f318 g     F .text	00000034 _exit
0080c698 g     F .text	0000012c alt_alarm_start
0080eb08 g     F .text	000001bc __smakebuf_r
008063b8 g     F .text	00000098 strlen
0080d048 g     F .text	0000015c open
0080a1fc g     F .text	000000dc .hidden __gedf2
0080caec g     F .text	00000034 alt_icache_flush_all
0080d860 g     F .text	00000018 fputs
008116b8 g     O .rwdata	00000004 alt_priority_mask
0080cb70 g     F .text	00000088 alt_ic_irq_enable
0080ac38 g     F .text	000008fc .hidden __subdf3
00805534 g     F .text	000000b0 __lo0bits
008116bc g     O .rwdata	00000008 alt_alarm_list
0080ca2c g     F .text	00000060 _do_ctors
0080c800 g     F .text	000000d8 close
0080b838 g     F .text	00000084 alt_load
0080056c g     F .text	00000014 free
0080e948 g     F .text	00000004 __sinit_lock_acquire
00805280 g     F .text	00000148 __multadd
00805258 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_data_end+0xff800004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	108c8304 	addi	r2,r2,12812
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	108c8304 	addi	r2,r2,12812
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_data_end+0xff80012c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_data_end+0xff800120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a6d617 	ldw	r2,-25768(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a6d617 	ldw	r2,-25768(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_data_end+0xff800248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6a5a214 	ori	gp,gp,38536
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	108c6b14 	ori	r2,r2,12716

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18ccc314 	ori	r3,r3,13068

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_data_end+0xff800278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	080b8380 	call	80b838 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	080b8bc0 	call	80b8bc <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_data_end+0xff80028c>

00800290 <print_text>:
#include <string.h>
#define CHARLIM 256    // Maximum character length of what the user places in memory.  Increase to allow longer sequences
#define QUITLETTER '~' // Letter to kill all processing

void print_text(char *text, const int length)
{
  800290:	defffa04 	addi	sp,sp,-24
  800294:	dfc00515 	stw	ra,20(sp)
  800298:	df000415 	stw	fp,16(sp)
  80029c:	df000404 	addi	fp,sp,16
  8002a0:	e13ffe15 	stw	r4,-8(fp)
  8002a4:	e17fff15 	stw	r5,-4(fp)
    char *printMsg;
    asprintf(&printMsg, "<--> Detected %d characters: %s <--> \n %c", length, text, 0x4); // Print out the strings
  8002a8:	00800104 	movi	r2,4
  8002ac:	d8800015 	stw	r2,0(sp)
  8002b0:	e1fffe17 	ldw	r7,-8(fp)
  8002b4:	e1bfff17 	ldw	r6,-4(fp)
  8002b8:	01402074 	movhi	r5,129
  8002bc:	297e2f04 	addi	r5,r5,-1860
  8002c0:	e13ffd04 	addi	r4,fp,-12
  8002c4:	08004e00 	call	8004e0 <asprintf>
    alt_putstr(printMsg);
  8002c8:	e0bffd17 	ldw	r2,-12(fp)
  8002cc:	1009883a 	mov	r4,r2
  8002d0:	080b9800 	call	80b980 <alt_putstr>
    free(printMsg);
  8002d4:	e0bffd17 	ldw	r2,-12(fp)
  8002d8:	1009883a 	mov	r4,r2
  8002dc:	080056c0 	call	80056c <free>
    memset(text, 0, 2 * CHARLIM); // Empty the text buffer for next input
  8002e0:	01808004 	movi	r6,512
  8002e4:	000b883a 	mov	r5,zero
  8002e8:	e13ffe17 	ldw	r4,-8(fp)
  8002ec:	0800d8c0 	call	800d8c <memset>
}
  8002f0:	0001883a 	nop
  8002f4:	e037883a 	mov	sp,fp
  8002f8:	dfc00117 	ldw	ra,4(sp)
  8002fc:	df000017 	ldw	fp,0(sp)
  800300:	dec00204 	addi	sp,sp,8
  800304:	f800283a 	ret

00800308 <generate_text>:

char generate_text(char curr, int *length, char *text, int *running)
{
  800308:	defff804 	addi	sp,sp,-32
  80030c:	dfc00715 	stw	ra,28(sp)
  800310:	df000615 	stw	fp,24(sp)
  800314:	df000604 	addi	fp,sp,24
  800318:	2005883a 	mov	r2,r4
  80031c:	e17ffd15 	stw	r5,-12(fp)
  800320:	e1bffe15 	stw	r6,-8(fp)
  800324:	e1ffff15 	stw	r7,-4(fp)
  800328:	e0bffc05 	stb	r2,-16(fp)
    if (curr == '\n')
  80032c:	e0bffc07 	ldb	r2,-16(fp)
  800330:	10800298 	cmpnei	r2,r2,10
  800334:	1000021e 	bne	r2,zero,800340 <generate_text+0x38>
        return curr; // If the line is empty, return nothing.
  800338:	e0bffc03 	ldbu	r2,-16(fp)
  80033c:	00001d06 	br	8003b4 <generate_text+0xac>
    int idx = 0;     // Keep track of how many characters have been sent down for later printing
  800340:	e03ffa15 	stw	zero,-24(fp)
    char newCurr = curr;
  800344:	e0bffc03 	ldbu	r2,-16(fp)
  800348:	e0bffb05 	stb	r2,-20(fp)

    while (newCurr != EOF && newCurr != '\n')
  80034c:	00000f06 	br	80038c <generate_text+0x84>
    { // Keep reading characters until we get to the end of the line
        if (newCurr == QUITLETTER)
  800350:	e0bffb07 	ldb	r2,-20(fp)
  800354:	10801f98 	cmpnei	r2,r2,126
  800358:	1000021e 	bne	r2,zero,800364 <generate_text+0x5c>
        {
            *running = 0;
  80035c:	e0bfff17 	ldw	r2,-4(fp)
  800360:	10000015 	stw	zero,0(r2)
        }                        // If quitting letter is encountered, setting running to 0
        text[idx] = newCurr;     // Add the next letter to the text buffer
  800364:	e0bffa17 	ldw	r2,-24(fp)
  800368:	e0fffe17 	ldw	r3,-8(fp)
  80036c:	1885883a 	add	r2,r3,r2
  800370:	e0fffb03 	ldbu	r3,-20(fp)
  800374:	10c00005 	stb	r3,0(r2)
        idx++;                   // Keep track of the number of characters read
  800378:	e0bffa17 	ldw	r2,-24(fp)
  80037c:	10800044 	addi	r2,r2,1
  800380:	e0bffa15 	stw	r2,-24(fp)
        newCurr = alt_getchar(); // Get the next character
  800384:	080b79c0 	call	80b79c <alt_getchar>
  800388:	e0bffb05 	stb	r2,-20(fp)
    if (curr == '\n')
        return curr; // If the line is empty, return nothing.
    int idx = 0;     // Keep track of how many characters have been sent down for later printing
    char newCurr = curr;

    while (newCurr != EOF && newCurr != '\n')
  80038c:	e0bffb07 	ldb	r2,-20(fp)
  800390:	10bfffe0 	cmpeqi	r2,r2,-1
  800394:	1000031e 	bne	r2,zero,8003a4 <generate_text+0x9c>
  800398:	e0bffb07 	ldb	r2,-20(fp)
  80039c:	10800298 	cmpnei	r2,r2,10
  8003a0:	103feb1e 	bne	r2,zero,800350 <__alt_data_end+0xff800350>
        }                        // If quitting letter is encountered, setting running to 0
        text[idx] = newCurr;     // Add the next letter to the text buffer
        idx++;                   // Keep track of the number of characters read
        newCurr = alt_getchar(); // Get the next character
    }
    *length = idx;
  8003a4:	e0bffd17 	ldw	r2,-12(fp)
  8003a8:	e0fffa17 	ldw	r3,-24(fp)
  8003ac:	10c00015 	stw	r3,0(r2)

    return newCurr;
  8003b0:	e0bffb03 	ldbu	r2,-20(fp)
}
  8003b4:	e037883a 	mov	sp,fp
  8003b8:	dfc00117 	ldw	ra,4(sp)
  8003bc:	df000017 	ldw	fp,0(sp)
  8003c0:	dec00204 	addi	sp,sp,8
  8003c4:	f800283a 	ret

008003c8 <read_chars>:

int read_chars()
{
  8003c8:	deff7b04 	addi	sp,sp,-532
  8003cc:	dfc08415 	stw	ra,528(sp)
  8003d0:	df008315 	stw	fp,524(sp)
  8003d4:	df008304 	addi	fp,sp,524
    char text[2 * CHARLIM]; // The buffer for the printing text
    char prevLetter = '!';
  8003d8:	00800844 	movi	r2,33
  8003dc:	e0bf7d05 	stb	r2,-524(fp)
    int length = 0;
  8003e0:	e03ffe15 	stw	zero,-8(fp)
    int running = 1;
  8003e4:	00800044 	movi	r2,1
  8003e8:	e0bfff15 	stw	r2,-4(fp)

    while (running)
  8003ec:	00001106 	br	800434 <read_chars+0x6c>
    {                                                                    // Keep running until QUITLETTER is encountered
        prevLetter = alt_getchar();                                      // Extract the first character (and create a hold until one arrives)
  8003f0:	080b79c0 	call	80b79c <alt_getchar>
  8003f4:	e0bf7d05 	stb	r2,-524(fp)
        prevLetter = generate_text(prevLetter, &length, text, &running); // Process input text
  8003f8:	e0bf7d07 	ldb	r2,-524(fp)
  8003fc:	e17fff04 	addi	r5,fp,-4
  800400:	e13f7d44 	addi	r4,fp,-523
  800404:	e0fffe04 	addi	r3,fp,-8
  800408:	280f883a 	mov	r7,r5
  80040c:	200d883a 	mov	r6,r4
  800410:	180b883a 	mov	r5,r3
  800414:	1009883a 	mov	r4,r2
  800418:	08003080 	call	800308 <generate_text>
  80041c:	e0bf7d05 	stb	r2,-524(fp)
        print_text(text, length);                                        // Print input text
  800420:	e0fffe17 	ldw	r3,-8(fp)
  800424:	e0bf7d44 	addi	r2,fp,-523
  800428:	180b883a 	mov	r5,r3
  80042c:	1009883a 	mov	r4,r2
  800430:	08002900 	call	800290 <print_text>
    char text[2 * CHARLIM]; // The buffer for the printing text
    char prevLetter = '!';
    int length = 0;
    int running = 1;

    while (running)
  800434:	e0bfff17 	ldw	r2,-4(fp)
  800438:	103fed1e 	bne	r2,zero,8003f0 <__alt_data_end+0xff8003f0>
        prevLetter = alt_getchar();                                      // Extract the first character (and create a hold until one arrives)
        prevLetter = generate_text(prevLetter, &length, text, &running); // Process input text
        print_text(text, length);                                        // Print input text
    }

    return 0;
  80043c:	0005883a 	mov	r2,zero
}
  800440:	e037883a 	mov	sp,fp
  800444:	dfc00117 	ldw	ra,4(sp)
  800448:	df000017 	ldw	fp,0(sp)
  80044c:	dec00204 	addi	sp,sp,8
  800450:	f800283a 	ret

00800454 <main>:

int main()
{
  800454:	defffe04 	addi	sp,sp,-8
  800458:	dfc00115 	stw	ra,4(sp)
  80045c:	df000015 	stw	fp,0(sp)
  800460:	d839883a 	mov	fp,sp
    return read_chars();
  800464:	08003c80 	call	8003c8 <read_chars>
}
  800468:	e037883a 	mov	sp,fp
  80046c:	dfc00117 	ldw	ra,4(sp)
  800470:	df000017 	ldw	fp,0(sp)
  800474:	dec00204 	addi	sp,sp,8
  800478:	f800283a 	ret

0080047c <_asprintf_r>:
  80047c:	deffe304 	addi	sp,sp,-116
  800480:	dc001a15 	stw	r16,104(sp)
  800484:	2821883a 	mov	r16,r5
  800488:	dfc01b15 	stw	ra,108(sp)
  80048c:	d9c01c15 	stw	r7,112(sp)
  800490:	0080a204 	movi	r2,648
  800494:	d880030d 	sth	r2,12(sp)
  800498:	d9c01c04 	addi	r7,sp,112
  80049c:	00bfffc4 	movi	r2,-1
  8004a0:	d80b883a 	mov	r5,sp
  8004a4:	d8000015 	stw	zero,0(sp)
  8004a8:	d8000415 	stw	zero,16(sp)
  8004ac:	d8000215 	stw	zero,8(sp)
  8004b0:	d8000515 	stw	zero,20(sp)
  8004b4:	d880038d 	sth	r2,14(sp)
  8004b8:	0800f080 	call	800f08 <___svfprintf_internal_r>
  8004bc:	10000416 	blt	r2,zero,8004d0 <_asprintf_r+0x54>
  8004c0:	d8c00017 	ldw	r3,0(sp)
  8004c4:	18000005 	stb	zero,0(r3)
  8004c8:	d8c00417 	ldw	r3,16(sp)
  8004cc:	80c00015 	stw	r3,0(r16)
  8004d0:	dfc01b17 	ldw	ra,108(sp)
  8004d4:	dc001a17 	ldw	r16,104(sp)
  8004d8:	dec01d04 	addi	sp,sp,116
  8004dc:	f800283a 	ret

008004e0 <asprintf>:
  8004e0:	deffe204 	addi	sp,sp,-120
  8004e4:	dc001a15 	stw	r16,104(sp)
  8004e8:	2021883a 	mov	r16,r4
  8004ec:	dfc01b15 	stw	ra,108(sp)
  8004f0:	d9801c15 	stw	r6,112(sp)
  8004f4:	d9c01d15 	stw	r7,116(sp)
  8004f8:	00802074 	movhi	r2,129
  8004fc:	1085a304 	addi	r2,r2,5772
  800500:	11000017 	ldw	r4,0(r2)
  800504:	0080a204 	movi	r2,648
  800508:	280d883a 	mov	r6,r5
  80050c:	d880030d 	sth	r2,12(sp)
  800510:	d9c01c04 	addi	r7,sp,112
  800514:	00bfffc4 	movi	r2,-1
  800518:	d80b883a 	mov	r5,sp
  80051c:	d8000015 	stw	zero,0(sp)
  800520:	d8000415 	stw	zero,16(sp)
  800524:	d8000215 	stw	zero,8(sp)
  800528:	d8000515 	stw	zero,20(sp)
  80052c:	d880038d 	sth	r2,14(sp)
  800530:	0800f080 	call	800f08 <___svfprintf_internal_r>
  800534:	10000416 	blt	r2,zero,800548 <asprintf+0x68>
  800538:	d8c00017 	ldw	r3,0(sp)
  80053c:	18000005 	stb	zero,0(r3)
  800540:	d8c00417 	ldw	r3,16(sp)
  800544:	80c00015 	stw	r3,0(r16)
  800548:	dfc01b17 	ldw	ra,108(sp)
  80054c:	dc001a17 	ldw	r16,104(sp)
  800550:	dec01e04 	addi	sp,sp,120
  800554:	f800283a 	ret

00800558 <malloc>:
  800558:	00802074 	movhi	r2,129
  80055c:	1085a304 	addi	r2,r2,5772
  800560:	200b883a 	mov	r5,r4
  800564:	11000017 	ldw	r4,0(r2)
  800568:	08005801 	jmpi	800580 <_malloc_r>

0080056c <free>:
  80056c:	00802074 	movhi	r2,129
  800570:	1085a304 	addi	r2,r2,5772
  800574:	200b883a 	mov	r5,r4
  800578:	11000017 	ldw	r4,0(r2)
  80057c:	0804b981 	jmpi	804b98 <_free_r>

00800580 <_malloc_r>:
  800580:	defff504 	addi	sp,sp,-44
  800584:	dc800315 	stw	r18,12(sp)
  800588:	dfc00a15 	stw	ra,40(sp)
  80058c:	df000915 	stw	fp,36(sp)
  800590:	ddc00815 	stw	r23,32(sp)
  800594:	dd800715 	stw	r22,28(sp)
  800598:	dd400615 	stw	r21,24(sp)
  80059c:	dd000515 	stw	r20,20(sp)
  8005a0:	dcc00415 	stw	r19,16(sp)
  8005a4:	dc400215 	stw	r17,8(sp)
  8005a8:	dc000115 	stw	r16,4(sp)
  8005ac:	288002c4 	addi	r2,r5,11
  8005b0:	00c00584 	movi	r3,22
  8005b4:	2025883a 	mov	r18,r4
  8005b8:	18807f2e 	bgeu	r3,r2,8007b8 <_malloc_r+0x238>
  8005bc:	047ffe04 	movi	r17,-8
  8005c0:	1462703a 	and	r17,r2,r17
  8005c4:	8800a316 	blt	r17,zero,800854 <_malloc_r+0x2d4>
  8005c8:	8940a236 	bltu	r17,r5,800854 <_malloc_r+0x2d4>
  8005cc:	080b9380 	call	80b938 <__malloc_lock>
  8005d0:	00807dc4 	movi	r2,503
  8005d4:	1441e92e 	bgeu	r2,r17,800d7c <_malloc_r+0x7fc>
  8005d8:	8804d27a 	srli	r2,r17,9
  8005dc:	1000a126 	beq	r2,zero,800864 <_malloc_r+0x2e4>
  8005e0:	00c00104 	movi	r3,4
  8005e4:	18811e36 	bltu	r3,r2,800a60 <_malloc_r+0x4e0>
  8005e8:	8804d1ba 	srli	r2,r17,6
  8005ec:	12000e44 	addi	r8,r2,57
  8005f0:	11c00e04 	addi	r7,r2,56
  8005f4:	4209883a 	add	r4,r8,r8
  8005f8:	04c02074 	movhi	r19,129
  8005fc:	2109883a 	add	r4,r4,r4
  800600:	9cc00004 	addi	r19,r19,0
  800604:	2109883a 	add	r4,r4,r4
  800608:	9909883a 	add	r4,r19,r4
  80060c:	24000117 	ldw	r16,4(r4)
  800610:	213ffe04 	addi	r4,r4,-8
  800614:	24009726 	beq	r4,r16,800874 <_malloc_r+0x2f4>
  800618:	80800117 	ldw	r2,4(r16)
  80061c:	01bfff04 	movi	r6,-4
  800620:	014003c4 	movi	r5,15
  800624:	1184703a 	and	r2,r2,r6
  800628:	1447c83a 	sub	r3,r2,r17
  80062c:	28c00716 	blt	r5,r3,80064c <_malloc_r+0xcc>
  800630:	1800920e 	bge	r3,zero,80087c <_malloc_r+0x2fc>
  800634:	84000317 	ldw	r16,12(r16)
  800638:	24008e26 	beq	r4,r16,800874 <_malloc_r+0x2f4>
  80063c:	80800117 	ldw	r2,4(r16)
  800640:	1184703a 	and	r2,r2,r6
  800644:	1447c83a 	sub	r3,r2,r17
  800648:	28fff90e 	bge	r5,r3,800630 <__alt_data_end+0xff800630>
  80064c:	3809883a 	mov	r4,r7
  800650:	01802074 	movhi	r6,129
  800654:	9c000417 	ldw	r16,16(r19)
  800658:	31800004 	addi	r6,r6,0
  80065c:	32000204 	addi	r8,r6,8
  800660:	82013426 	beq	r16,r8,800b34 <_malloc_r+0x5b4>
  800664:	80c00117 	ldw	r3,4(r16)
  800668:	00bfff04 	movi	r2,-4
  80066c:	188e703a 	and	r7,r3,r2
  800670:	3c45c83a 	sub	r2,r7,r17
  800674:	00c003c4 	movi	r3,15
  800678:	18811f16 	blt	r3,r2,800af8 <_malloc_r+0x578>
  80067c:	32000515 	stw	r8,20(r6)
  800680:	32000415 	stw	r8,16(r6)
  800684:	10007f0e 	bge	r2,zero,800884 <_malloc_r+0x304>
  800688:	00807fc4 	movi	r2,511
  80068c:	11c0fd36 	bltu	r2,r7,800a84 <_malloc_r+0x504>
  800690:	3806d0fa 	srli	r3,r7,3
  800694:	01c00044 	movi	r7,1
  800698:	30800117 	ldw	r2,4(r6)
  80069c:	19400044 	addi	r5,r3,1
  8006a0:	294b883a 	add	r5,r5,r5
  8006a4:	1807d0ba 	srai	r3,r3,2
  8006a8:	294b883a 	add	r5,r5,r5
  8006ac:	294b883a 	add	r5,r5,r5
  8006b0:	298b883a 	add	r5,r5,r6
  8006b4:	38c6983a 	sll	r3,r7,r3
  8006b8:	29c00017 	ldw	r7,0(r5)
  8006bc:	2a7ffe04 	addi	r9,r5,-8
  8006c0:	1886b03a 	or	r3,r3,r2
  8006c4:	82400315 	stw	r9,12(r16)
  8006c8:	81c00215 	stw	r7,8(r16)
  8006cc:	30c00115 	stw	r3,4(r6)
  8006d0:	2c000015 	stw	r16,0(r5)
  8006d4:	3c000315 	stw	r16,12(r7)
  8006d8:	2005d0ba 	srai	r2,r4,2
  8006dc:	01400044 	movi	r5,1
  8006e0:	288a983a 	sll	r5,r5,r2
  8006e4:	19406f36 	bltu	r3,r5,8008a4 <_malloc_r+0x324>
  8006e8:	28c4703a 	and	r2,r5,r3
  8006ec:	10000a1e 	bne	r2,zero,800718 <_malloc_r+0x198>
  8006f0:	00bfff04 	movi	r2,-4
  8006f4:	294b883a 	add	r5,r5,r5
  8006f8:	2088703a 	and	r4,r4,r2
  8006fc:	28c4703a 	and	r2,r5,r3
  800700:	21000104 	addi	r4,r4,4
  800704:	1000041e 	bne	r2,zero,800718 <_malloc_r+0x198>
  800708:	294b883a 	add	r5,r5,r5
  80070c:	28c4703a 	and	r2,r5,r3
  800710:	21000104 	addi	r4,r4,4
  800714:	103ffc26 	beq	r2,zero,800708 <__alt_data_end+0xff800708>
  800718:	02bfff04 	movi	r10,-4
  80071c:	024003c4 	movi	r9,15
  800720:	21800044 	addi	r6,r4,1
  800724:	318d883a 	add	r6,r6,r6
  800728:	318d883a 	add	r6,r6,r6
  80072c:	318d883a 	add	r6,r6,r6
  800730:	998d883a 	add	r6,r19,r6
  800734:	333ffe04 	addi	r12,r6,-8
  800738:	2017883a 	mov	r11,r4
  80073c:	31800104 	addi	r6,r6,4
  800740:	34000017 	ldw	r16,0(r6)
  800744:	31fffd04 	addi	r7,r6,-12
  800748:	81c0041e 	bne	r16,r7,80075c <_malloc_r+0x1dc>
  80074c:	0000fb06 	br	800b3c <_malloc_r+0x5bc>
  800750:	1801030e 	bge	r3,zero,800b60 <_malloc_r+0x5e0>
  800754:	84000317 	ldw	r16,12(r16)
  800758:	81c0f826 	beq	r16,r7,800b3c <_malloc_r+0x5bc>
  80075c:	80800117 	ldw	r2,4(r16)
  800760:	1284703a 	and	r2,r2,r10
  800764:	1447c83a 	sub	r3,r2,r17
  800768:	48fff90e 	bge	r9,r3,800750 <__alt_data_end+0xff800750>
  80076c:	80800317 	ldw	r2,12(r16)
  800770:	81000217 	ldw	r4,8(r16)
  800774:	89400054 	ori	r5,r17,1
  800778:	81400115 	stw	r5,4(r16)
  80077c:	20800315 	stw	r2,12(r4)
  800780:	11000215 	stw	r4,8(r2)
  800784:	8463883a 	add	r17,r16,r17
  800788:	9c400515 	stw	r17,20(r19)
  80078c:	9c400415 	stw	r17,16(r19)
  800790:	18800054 	ori	r2,r3,1
  800794:	88800115 	stw	r2,4(r17)
  800798:	8a000315 	stw	r8,12(r17)
  80079c:	8a000215 	stw	r8,8(r17)
  8007a0:	88e3883a 	add	r17,r17,r3
  8007a4:	88c00015 	stw	r3,0(r17)
  8007a8:	9009883a 	mov	r4,r18
  8007ac:	080b95c0 	call	80b95c <__malloc_unlock>
  8007b0:	80800204 	addi	r2,r16,8
  8007b4:	00001b06 	br	800824 <_malloc_r+0x2a4>
  8007b8:	04400404 	movi	r17,16
  8007bc:	89402536 	bltu	r17,r5,800854 <_malloc_r+0x2d4>
  8007c0:	080b9380 	call	80b938 <__malloc_lock>
  8007c4:	00800184 	movi	r2,6
  8007c8:	01000084 	movi	r4,2
  8007cc:	04c02074 	movhi	r19,129
  8007d0:	1085883a 	add	r2,r2,r2
  8007d4:	9cc00004 	addi	r19,r19,0
  8007d8:	1085883a 	add	r2,r2,r2
  8007dc:	9885883a 	add	r2,r19,r2
  8007e0:	14000117 	ldw	r16,4(r2)
  8007e4:	10fffe04 	addi	r3,r2,-8
  8007e8:	80c0d926 	beq	r16,r3,800b50 <_malloc_r+0x5d0>
  8007ec:	80c00117 	ldw	r3,4(r16)
  8007f0:	81000317 	ldw	r4,12(r16)
  8007f4:	00bfff04 	movi	r2,-4
  8007f8:	1884703a 	and	r2,r3,r2
  8007fc:	81400217 	ldw	r5,8(r16)
  800800:	8085883a 	add	r2,r16,r2
  800804:	10c00117 	ldw	r3,4(r2)
  800808:	29000315 	stw	r4,12(r5)
  80080c:	21400215 	stw	r5,8(r4)
  800810:	18c00054 	ori	r3,r3,1
  800814:	10c00115 	stw	r3,4(r2)
  800818:	9009883a 	mov	r4,r18
  80081c:	080b95c0 	call	80b95c <__malloc_unlock>
  800820:	80800204 	addi	r2,r16,8
  800824:	dfc00a17 	ldw	ra,40(sp)
  800828:	df000917 	ldw	fp,36(sp)
  80082c:	ddc00817 	ldw	r23,32(sp)
  800830:	dd800717 	ldw	r22,28(sp)
  800834:	dd400617 	ldw	r21,24(sp)
  800838:	dd000517 	ldw	r20,20(sp)
  80083c:	dcc00417 	ldw	r19,16(sp)
  800840:	dc800317 	ldw	r18,12(sp)
  800844:	dc400217 	ldw	r17,8(sp)
  800848:	dc000117 	ldw	r16,4(sp)
  80084c:	dec00b04 	addi	sp,sp,44
  800850:	f800283a 	ret
  800854:	00800304 	movi	r2,12
  800858:	90800015 	stw	r2,0(r18)
  80085c:	0005883a 	mov	r2,zero
  800860:	003ff006 	br	800824 <__alt_data_end+0xff800824>
  800864:	01002004 	movi	r4,128
  800868:	02001004 	movi	r8,64
  80086c:	01c00fc4 	movi	r7,63
  800870:	003f6106 	br	8005f8 <__alt_data_end+0xff8005f8>
  800874:	4009883a 	mov	r4,r8
  800878:	003f7506 	br	800650 <__alt_data_end+0xff800650>
  80087c:	81000317 	ldw	r4,12(r16)
  800880:	003fde06 	br	8007fc <__alt_data_end+0xff8007fc>
  800884:	81c5883a 	add	r2,r16,r7
  800888:	11400117 	ldw	r5,4(r2)
  80088c:	9009883a 	mov	r4,r18
  800890:	29400054 	ori	r5,r5,1
  800894:	11400115 	stw	r5,4(r2)
  800898:	080b95c0 	call	80b95c <__malloc_unlock>
  80089c:	80800204 	addi	r2,r16,8
  8008a0:	003fe006 	br	800824 <__alt_data_end+0xff800824>
  8008a4:	9c000217 	ldw	r16,8(r19)
  8008a8:	00bfff04 	movi	r2,-4
  8008ac:	85800117 	ldw	r22,4(r16)
  8008b0:	b0ac703a 	and	r22,r22,r2
  8008b4:	b4400336 	bltu	r22,r17,8008c4 <_malloc_r+0x344>
  8008b8:	b445c83a 	sub	r2,r22,r17
  8008bc:	00c003c4 	movi	r3,15
  8008c0:	18805d16 	blt	r3,r2,800a38 <_malloc_r+0x4b8>
  8008c4:	05c02074 	movhi	r23,129
  8008c8:	00802074 	movhi	r2,129
  8008cc:	108c6d04 	addi	r2,r2,12724
  8008d0:	bdc5a404 	addi	r23,r23,5776
  8008d4:	15400017 	ldw	r21,0(r2)
  8008d8:	b8c00017 	ldw	r3,0(r23)
  8008dc:	00bfffc4 	movi	r2,-1
  8008e0:	858d883a 	add	r6,r16,r22
  8008e4:	8d6b883a 	add	r21,r17,r21
  8008e8:	1880ea26 	beq	r3,r2,800c94 <_malloc_r+0x714>
  8008ec:	ad4403c4 	addi	r21,r21,4111
  8008f0:	00bc0004 	movi	r2,-4096
  8008f4:	a8aa703a 	and	r21,r21,r2
  8008f8:	a80b883a 	mov	r5,r21
  8008fc:	9009883a 	mov	r4,r18
  800900:	d9800015 	stw	r6,0(sp)
  800904:	0800eb40 	call	800eb4 <_sbrk_r>
  800908:	1029883a 	mov	r20,r2
  80090c:	00bfffc4 	movi	r2,-1
  800910:	d9800017 	ldw	r6,0(sp)
  800914:	a080e826 	beq	r20,r2,800cb8 <_malloc_r+0x738>
  800918:	a180a636 	bltu	r20,r6,800bb4 <_malloc_r+0x634>
  80091c:	07002074 	movhi	fp,129
  800920:	e70c7904 	addi	fp,fp,12772
  800924:	e0800017 	ldw	r2,0(fp)
  800928:	a887883a 	add	r3,r21,r2
  80092c:	e0c00015 	stw	r3,0(fp)
  800930:	3500e626 	beq	r6,r20,800ccc <_malloc_r+0x74c>
  800934:	b9000017 	ldw	r4,0(r23)
  800938:	00bfffc4 	movi	r2,-1
  80093c:	2080ee26 	beq	r4,r2,800cf8 <_malloc_r+0x778>
  800940:	a185c83a 	sub	r2,r20,r6
  800944:	10c5883a 	add	r2,r2,r3
  800948:	e0800015 	stw	r2,0(fp)
  80094c:	a0c001cc 	andi	r3,r20,7
  800950:	1800bc26 	beq	r3,zero,800c44 <_malloc_r+0x6c4>
  800954:	a0e9c83a 	sub	r20,r20,r3
  800958:	00840204 	movi	r2,4104
  80095c:	a5000204 	addi	r20,r20,8
  800960:	10c7c83a 	sub	r3,r2,r3
  800964:	a545883a 	add	r2,r20,r21
  800968:	1083ffcc 	andi	r2,r2,4095
  80096c:	18abc83a 	sub	r21,r3,r2
  800970:	a80b883a 	mov	r5,r21
  800974:	9009883a 	mov	r4,r18
  800978:	0800eb40 	call	800eb4 <_sbrk_r>
  80097c:	00ffffc4 	movi	r3,-1
  800980:	10c0e126 	beq	r2,r3,800d08 <_malloc_r+0x788>
  800984:	1505c83a 	sub	r2,r2,r20
  800988:	1545883a 	add	r2,r2,r21
  80098c:	10800054 	ori	r2,r2,1
  800990:	e0c00017 	ldw	r3,0(fp)
  800994:	9d000215 	stw	r20,8(r19)
  800998:	a0800115 	stw	r2,4(r20)
  80099c:	a8c7883a 	add	r3,r21,r3
  8009a0:	e0c00015 	stw	r3,0(fp)
  8009a4:	84c00e26 	beq	r16,r19,8009e0 <_malloc_r+0x460>
  8009a8:	018003c4 	movi	r6,15
  8009ac:	3580a72e 	bgeu	r6,r22,800c4c <_malloc_r+0x6cc>
  8009b0:	81400117 	ldw	r5,4(r16)
  8009b4:	013ffe04 	movi	r4,-8
  8009b8:	b0bffd04 	addi	r2,r22,-12
  8009bc:	1104703a 	and	r2,r2,r4
  8009c0:	2900004c 	andi	r4,r5,1
  8009c4:	2088b03a 	or	r4,r4,r2
  8009c8:	81000115 	stw	r4,4(r16)
  8009cc:	01400144 	movi	r5,5
  8009d0:	8089883a 	add	r4,r16,r2
  8009d4:	21400115 	stw	r5,4(r4)
  8009d8:	21400215 	stw	r5,8(r4)
  8009dc:	3080cd36 	bltu	r6,r2,800d14 <_malloc_r+0x794>
  8009e0:	00802074 	movhi	r2,129
  8009e4:	108c6c04 	addi	r2,r2,12720
  8009e8:	11000017 	ldw	r4,0(r2)
  8009ec:	20c0012e 	bgeu	r4,r3,8009f4 <_malloc_r+0x474>
  8009f0:	10c00015 	stw	r3,0(r2)
  8009f4:	00802074 	movhi	r2,129
  8009f8:	108c6b04 	addi	r2,r2,12716
  8009fc:	11000017 	ldw	r4,0(r2)
  800a00:	9c000217 	ldw	r16,8(r19)
  800a04:	20c0012e 	bgeu	r4,r3,800a0c <_malloc_r+0x48c>
  800a08:	10c00015 	stw	r3,0(r2)
  800a0c:	80c00117 	ldw	r3,4(r16)
  800a10:	00bfff04 	movi	r2,-4
  800a14:	1886703a 	and	r3,r3,r2
  800a18:	1c45c83a 	sub	r2,r3,r17
  800a1c:	1c400236 	bltu	r3,r17,800a28 <_malloc_r+0x4a8>
  800a20:	00c003c4 	movi	r3,15
  800a24:	18800416 	blt	r3,r2,800a38 <_malloc_r+0x4b8>
  800a28:	9009883a 	mov	r4,r18
  800a2c:	080b95c0 	call	80b95c <__malloc_unlock>
  800a30:	0005883a 	mov	r2,zero
  800a34:	003f7b06 	br	800824 <__alt_data_end+0xff800824>
  800a38:	88c00054 	ori	r3,r17,1
  800a3c:	80c00115 	stw	r3,4(r16)
  800a40:	8463883a 	add	r17,r16,r17
  800a44:	10800054 	ori	r2,r2,1
  800a48:	9c400215 	stw	r17,8(r19)
  800a4c:	88800115 	stw	r2,4(r17)
  800a50:	9009883a 	mov	r4,r18
  800a54:	080b95c0 	call	80b95c <__malloc_unlock>
  800a58:	80800204 	addi	r2,r16,8
  800a5c:	003f7106 	br	800824 <__alt_data_end+0xff800824>
  800a60:	00c00504 	movi	r3,20
  800a64:	18804a2e 	bgeu	r3,r2,800b90 <_malloc_r+0x610>
  800a68:	00c01504 	movi	r3,84
  800a6c:	18806e36 	bltu	r3,r2,800c28 <_malloc_r+0x6a8>
  800a70:	8804d33a 	srli	r2,r17,12
  800a74:	12001bc4 	addi	r8,r2,111
  800a78:	11c01b84 	addi	r7,r2,110
  800a7c:	4209883a 	add	r4,r8,r8
  800a80:	003edd06 	br	8005f8 <__alt_data_end+0xff8005f8>
  800a84:	3804d27a 	srli	r2,r7,9
  800a88:	00c00104 	movi	r3,4
  800a8c:	1880442e 	bgeu	r3,r2,800ba0 <_malloc_r+0x620>
  800a90:	00c00504 	movi	r3,20
  800a94:	18808136 	bltu	r3,r2,800c9c <_malloc_r+0x71c>
  800a98:	11401704 	addi	r5,r2,92
  800a9c:	10c016c4 	addi	r3,r2,91
  800aa0:	294b883a 	add	r5,r5,r5
  800aa4:	294b883a 	add	r5,r5,r5
  800aa8:	294b883a 	add	r5,r5,r5
  800aac:	994b883a 	add	r5,r19,r5
  800ab0:	28800017 	ldw	r2,0(r5)
  800ab4:	01802074 	movhi	r6,129
  800ab8:	297ffe04 	addi	r5,r5,-8
  800abc:	31800004 	addi	r6,r6,0
  800ac0:	28806526 	beq	r5,r2,800c58 <_malloc_r+0x6d8>
  800ac4:	01bfff04 	movi	r6,-4
  800ac8:	10c00117 	ldw	r3,4(r2)
  800acc:	1986703a 	and	r3,r3,r6
  800ad0:	38c0022e 	bgeu	r7,r3,800adc <_malloc_r+0x55c>
  800ad4:	10800217 	ldw	r2,8(r2)
  800ad8:	28bffb1e 	bne	r5,r2,800ac8 <__alt_data_end+0xff800ac8>
  800adc:	11400317 	ldw	r5,12(r2)
  800ae0:	98c00117 	ldw	r3,4(r19)
  800ae4:	81400315 	stw	r5,12(r16)
  800ae8:	80800215 	stw	r2,8(r16)
  800aec:	2c000215 	stw	r16,8(r5)
  800af0:	14000315 	stw	r16,12(r2)
  800af4:	003ef806 	br	8006d8 <__alt_data_end+0xff8006d8>
  800af8:	88c00054 	ori	r3,r17,1
  800afc:	80c00115 	stw	r3,4(r16)
  800b00:	8463883a 	add	r17,r16,r17
  800b04:	34400515 	stw	r17,20(r6)
  800b08:	34400415 	stw	r17,16(r6)
  800b0c:	10c00054 	ori	r3,r2,1
  800b10:	8a000315 	stw	r8,12(r17)
  800b14:	8a000215 	stw	r8,8(r17)
  800b18:	88c00115 	stw	r3,4(r17)
  800b1c:	88a3883a 	add	r17,r17,r2
  800b20:	88800015 	stw	r2,0(r17)
  800b24:	9009883a 	mov	r4,r18
  800b28:	080b95c0 	call	80b95c <__malloc_unlock>
  800b2c:	80800204 	addi	r2,r16,8
  800b30:	003f3c06 	br	800824 <__alt_data_end+0xff800824>
  800b34:	30c00117 	ldw	r3,4(r6)
  800b38:	003ee706 	br	8006d8 <__alt_data_end+0xff8006d8>
  800b3c:	5ac00044 	addi	r11,r11,1
  800b40:	588000cc 	andi	r2,r11,3
  800b44:	31800204 	addi	r6,r6,8
  800b48:	103efd1e 	bne	r2,zero,800740 <__alt_data_end+0xff800740>
  800b4c:	00002406 	br	800be0 <_malloc_r+0x660>
  800b50:	14000317 	ldw	r16,12(r2)
  800b54:	143f251e 	bne	r2,r16,8007ec <__alt_data_end+0xff8007ec>
  800b58:	21000084 	addi	r4,r4,2
  800b5c:	003ebc06 	br	800650 <__alt_data_end+0xff800650>
  800b60:	8085883a 	add	r2,r16,r2
  800b64:	10c00117 	ldw	r3,4(r2)
  800b68:	81000317 	ldw	r4,12(r16)
  800b6c:	81400217 	ldw	r5,8(r16)
  800b70:	18c00054 	ori	r3,r3,1
  800b74:	10c00115 	stw	r3,4(r2)
  800b78:	29000315 	stw	r4,12(r5)
  800b7c:	21400215 	stw	r5,8(r4)
  800b80:	9009883a 	mov	r4,r18
  800b84:	080b95c0 	call	80b95c <__malloc_unlock>
  800b88:	80800204 	addi	r2,r16,8
  800b8c:	003f2506 	br	800824 <__alt_data_end+0xff800824>
  800b90:	12001704 	addi	r8,r2,92
  800b94:	11c016c4 	addi	r7,r2,91
  800b98:	4209883a 	add	r4,r8,r8
  800b9c:	003e9606 	br	8005f8 <__alt_data_end+0xff8005f8>
  800ba0:	3804d1ba 	srli	r2,r7,6
  800ba4:	11400e44 	addi	r5,r2,57
  800ba8:	10c00e04 	addi	r3,r2,56
  800bac:	294b883a 	add	r5,r5,r5
  800bb0:	003fbc06 	br	800aa4 <__alt_data_end+0xff800aa4>
  800bb4:	84ff5926 	beq	r16,r19,80091c <__alt_data_end+0xff80091c>
  800bb8:	00802074 	movhi	r2,129
  800bbc:	10800004 	addi	r2,r2,0
  800bc0:	14000217 	ldw	r16,8(r2)
  800bc4:	00bfff04 	movi	r2,-4
  800bc8:	80c00117 	ldw	r3,4(r16)
  800bcc:	1886703a 	and	r3,r3,r2
  800bd0:	003f9106 	br	800a18 <__alt_data_end+0xff800a18>
  800bd4:	60800217 	ldw	r2,8(r12)
  800bd8:	213fffc4 	addi	r4,r4,-1
  800bdc:	1300651e 	bne	r2,r12,800d74 <_malloc_r+0x7f4>
  800be0:	208000cc 	andi	r2,r4,3
  800be4:	633ffe04 	addi	r12,r12,-8
  800be8:	103ffa1e 	bne	r2,zero,800bd4 <__alt_data_end+0xff800bd4>
  800bec:	98800117 	ldw	r2,4(r19)
  800bf0:	0146303a 	nor	r3,zero,r5
  800bf4:	1884703a 	and	r2,r3,r2
  800bf8:	98800115 	stw	r2,4(r19)
  800bfc:	294b883a 	add	r5,r5,r5
  800c00:	117f2836 	bltu	r2,r5,8008a4 <__alt_data_end+0xff8008a4>
  800c04:	283f2726 	beq	r5,zero,8008a4 <__alt_data_end+0xff8008a4>
  800c08:	2886703a 	and	r3,r5,r2
  800c0c:	5809883a 	mov	r4,r11
  800c10:	183ec31e 	bne	r3,zero,800720 <__alt_data_end+0xff800720>
  800c14:	294b883a 	add	r5,r5,r5
  800c18:	2886703a 	and	r3,r5,r2
  800c1c:	21000104 	addi	r4,r4,4
  800c20:	183ffc26 	beq	r3,zero,800c14 <__alt_data_end+0xff800c14>
  800c24:	003ebe06 	br	800720 <__alt_data_end+0xff800720>
  800c28:	00c05504 	movi	r3,340
  800c2c:	18801236 	bltu	r3,r2,800c78 <_malloc_r+0x6f8>
  800c30:	8804d3fa 	srli	r2,r17,15
  800c34:	12001e04 	addi	r8,r2,120
  800c38:	11c01dc4 	addi	r7,r2,119
  800c3c:	4209883a 	add	r4,r8,r8
  800c40:	003e6d06 	br	8005f8 <__alt_data_end+0xff8005f8>
  800c44:	00c40004 	movi	r3,4096
  800c48:	003f4606 	br	800964 <__alt_data_end+0xff800964>
  800c4c:	00800044 	movi	r2,1
  800c50:	a0800115 	stw	r2,4(r20)
  800c54:	003f7406 	br	800a28 <__alt_data_end+0xff800a28>
  800c58:	1805d0ba 	srai	r2,r3,2
  800c5c:	01c00044 	movi	r7,1
  800c60:	30c00117 	ldw	r3,4(r6)
  800c64:	388e983a 	sll	r7,r7,r2
  800c68:	2805883a 	mov	r2,r5
  800c6c:	38c6b03a 	or	r3,r7,r3
  800c70:	30c00115 	stw	r3,4(r6)
  800c74:	003f9b06 	br	800ae4 <__alt_data_end+0xff800ae4>
  800c78:	00c15504 	movi	r3,1364
  800c7c:	18801a36 	bltu	r3,r2,800ce8 <_malloc_r+0x768>
  800c80:	8804d4ba 	srli	r2,r17,18
  800c84:	12001f44 	addi	r8,r2,125
  800c88:	11c01f04 	addi	r7,r2,124
  800c8c:	4209883a 	add	r4,r8,r8
  800c90:	003e5906 	br	8005f8 <__alt_data_end+0xff8005f8>
  800c94:	ad400404 	addi	r21,r21,16
  800c98:	003f1706 	br	8008f8 <__alt_data_end+0xff8008f8>
  800c9c:	00c01504 	movi	r3,84
  800ca0:	18802336 	bltu	r3,r2,800d30 <_malloc_r+0x7b0>
  800ca4:	3804d33a 	srli	r2,r7,12
  800ca8:	11401bc4 	addi	r5,r2,111
  800cac:	10c01b84 	addi	r3,r2,110
  800cb0:	294b883a 	add	r5,r5,r5
  800cb4:	003f7b06 	br	800aa4 <__alt_data_end+0xff800aa4>
  800cb8:	9c000217 	ldw	r16,8(r19)
  800cbc:	00bfff04 	movi	r2,-4
  800cc0:	80c00117 	ldw	r3,4(r16)
  800cc4:	1886703a 	and	r3,r3,r2
  800cc8:	003f5306 	br	800a18 <__alt_data_end+0xff800a18>
  800ccc:	3083ffcc 	andi	r2,r6,4095
  800cd0:	103f181e 	bne	r2,zero,800934 <__alt_data_end+0xff800934>
  800cd4:	99000217 	ldw	r4,8(r19)
  800cd8:	b545883a 	add	r2,r22,r21
  800cdc:	10800054 	ori	r2,r2,1
  800ce0:	20800115 	stw	r2,4(r4)
  800ce4:	003f3e06 	br	8009e0 <__alt_data_end+0xff8009e0>
  800ce8:	01003f84 	movi	r4,254
  800cec:	02001fc4 	movi	r8,127
  800cf0:	01c01f84 	movi	r7,126
  800cf4:	003e4006 	br	8005f8 <__alt_data_end+0xff8005f8>
  800cf8:	00802074 	movhi	r2,129
  800cfc:	1085a404 	addi	r2,r2,5776
  800d00:	15000015 	stw	r20,0(r2)
  800d04:	003f1106 	br	80094c <__alt_data_end+0xff80094c>
  800d08:	00800044 	movi	r2,1
  800d0c:	002b883a 	mov	r21,zero
  800d10:	003f1f06 	br	800990 <__alt_data_end+0xff800990>
  800d14:	81400204 	addi	r5,r16,8
  800d18:	9009883a 	mov	r4,r18
  800d1c:	0804b980 	call	804b98 <_free_r>
  800d20:	00802074 	movhi	r2,129
  800d24:	108c7904 	addi	r2,r2,12772
  800d28:	10c00017 	ldw	r3,0(r2)
  800d2c:	003f2c06 	br	8009e0 <__alt_data_end+0xff8009e0>
  800d30:	00c05504 	movi	r3,340
  800d34:	18800536 	bltu	r3,r2,800d4c <_malloc_r+0x7cc>
  800d38:	3804d3fa 	srli	r2,r7,15
  800d3c:	11401e04 	addi	r5,r2,120
  800d40:	10c01dc4 	addi	r3,r2,119
  800d44:	294b883a 	add	r5,r5,r5
  800d48:	003f5606 	br	800aa4 <__alt_data_end+0xff800aa4>
  800d4c:	00c15504 	movi	r3,1364
  800d50:	18800536 	bltu	r3,r2,800d68 <_malloc_r+0x7e8>
  800d54:	3804d4ba 	srli	r2,r7,18
  800d58:	11401f44 	addi	r5,r2,125
  800d5c:	10c01f04 	addi	r3,r2,124
  800d60:	294b883a 	add	r5,r5,r5
  800d64:	003f4f06 	br	800aa4 <__alt_data_end+0xff800aa4>
  800d68:	01403f84 	movi	r5,254
  800d6c:	00c01f84 	movi	r3,126
  800d70:	003f4c06 	br	800aa4 <__alt_data_end+0xff800aa4>
  800d74:	98800117 	ldw	r2,4(r19)
  800d78:	003fa006 	br	800bfc <__alt_data_end+0xff800bfc>
  800d7c:	8808d0fa 	srli	r4,r17,3
  800d80:	20800044 	addi	r2,r4,1
  800d84:	1085883a 	add	r2,r2,r2
  800d88:	003e9006 	br	8007cc <__alt_data_end+0xff8007cc>

00800d8c <memset>:
  800d8c:	20c000cc 	andi	r3,r4,3
  800d90:	2005883a 	mov	r2,r4
  800d94:	18004426 	beq	r3,zero,800ea8 <memset+0x11c>
  800d98:	31ffffc4 	addi	r7,r6,-1
  800d9c:	30004026 	beq	r6,zero,800ea0 <memset+0x114>
  800da0:	2813883a 	mov	r9,r5
  800da4:	200d883a 	mov	r6,r4
  800da8:	2007883a 	mov	r3,r4
  800dac:	00000406 	br	800dc0 <memset+0x34>
  800db0:	3a3fffc4 	addi	r8,r7,-1
  800db4:	31800044 	addi	r6,r6,1
  800db8:	38003926 	beq	r7,zero,800ea0 <memset+0x114>
  800dbc:	400f883a 	mov	r7,r8
  800dc0:	18c00044 	addi	r3,r3,1
  800dc4:	32400005 	stb	r9,0(r6)
  800dc8:	1a0000cc 	andi	r8,r3,3
  800dcc:	403ff81e 	bne	r8,zero,800db0 <__alt_data_end+0xff800db0>
  800dd0:	010000c4 	movi	r4,3
  800dd4:	21c02d2e 	bgeu	r4,r7,800e8c <memset+0x100>
  800dd8:	29003fcc 	andi	r4,r5,255
  800ddc:	200c923a 	slli	r6,r4,8
  800de0:	3108b03a 	or	r4,r6,r4
  800de4:	200c943a 	slli	r6,r4,16
  800de8:	218cb03a 	or	r6,r4,r6
  800dec:	010003c4 	movi	r4,15
  800df0:	21c0182e 	bgeu	r4,r7,800e54 <memset+0xc8>
  800df4:	3b3ffc04 	addi	r12,r7,-16
  800df8:	6018d13a 	srli	r12,r12,4
  800dfc:	1a000104 	addi	r8,r3,4
  800e00:	1ac00204 	addi	r11,r3,8
  800e04:	6008913a 	slli	r4,r12,4
  800e08:	1a800304 	addi	r10,r3,12
  800e0c:	1813883a 	mov	r9,r3
  800e10:	21000504 	addi	r4,r4,20
  800e14:	1909883a 	add	r4,r3,r4
  800e18:	49800015 	stw	r6,0(r9)
  800e1c:	41800015 	stw	r6,0(r8)
  800e20:	59800015 	stw	r6,0(r11)
  800e24:	51800015 	stw	r6,0(r10)
  800e28:	42000404 	addi	r8,r8,16
  800e2c:	4a400404 	addi	r9,r9,16
  800e30:	5ac00404 	addi	r11,r11,16
  800e34:	52800404 	addi	r10,r10,16
  800e38:	413ff71e 	bne	r8,r4,800e18 <__alt_data_end+0xff800e18>
  800e3c:	63000044 	addi	r12,r12,1
  800e40:	6018913a 	slli	r12,r12,4
  800e44:	39c003cc 	andi	r7,r7,15
  800e48:	010000c4 	movi	r4,3
  800e4c:	1b07883a 	add	r3,r3,r12
  800e50:	21c00e2e 	bgeu	r4,r7,800e8c <memset+0x100>
  800e54:	1813883a 	mov	r9,r3
  800e58:	3811883a 	mov	r8,r7
  800e5c:	010000c4 	movi	r4,3
  800e60:	49800015 	stw	r6,0(r9)
  800e64:	423fff04 	addi	r8,r8,-4
  800e68:	4a400104 	addi	r9,r9,4
  800e6c:	223ffc36 	bltu	r4,r8,800e60 <__alt_data_end+0xff800e60>
  800e70:	393fff04 	addi	r4,r7,-4
  800e74:	2008d0ba 	srli	r4,r4,2
  800e78:	39c000cc 	andi	r7,r7,3
  800e7c:	21000044 	addi	r4,r4,1
  800e80:	2109883a 	add	r4,r4,r4
  800e84:	2109883a 	add	r4,r4,r4
  800e88:	1907883a 	add	r3,r3,r4
  800e8c:	38000526 	beq	r7,zero,800ea4 <memset+0x118>
  800e90:	19cf883a 	add	r7,r3,r7
  800e94:	19400005 	stb	r5,0(r3)
  800e98:	18c00044 	addi	r3,r3,1
  800e9c:	38fffd1e 	bne	r7,r3,800e94 <__alt_data_end+0xff800e94>
  800ea0:	f800283a 	ret
  800ea4:	f800283a 	ret
  800ea8:	2007883a 	mov	r3,r4
  800eac:	300f883a 	mov	r7,r6
  800eb0:	003fc706 	br	800dd0 <__alt_data_end+0xff800dd0>

00800eb4 <_sbrk_r>:
  800eb4:	defffd04 	addi	sp,sp,-12
  800eb8:	dc000015 	stw	r16,0(sp)
  800ebc:	04002074 	movhi	r16,129
  800ec0:	dc400115 	stw	r17,4(sp)
  800ec4:	840c6e04 	addi	r16,r16,12728
  800ec8:	2023883a 	mov	r17,r4
  800ecc:	2809883a 	mov	r4,r5
  800ed0:	dfc00215 	stw	ra,8(sp)
  800ed4:	80000015 	stw	zero,0(r16)
  800ed8:	080b9bc0 	call	80b9bc <sbrk>
  800edc:	00ffffc4 	movi	r3,-1
  800ee0:	10c00526 	beq	r2,r3,800ef8 <_sbrk_r+0x44>
  800ee4:	dfc00217 	ldw	ra,8(sp)
  800ee8:	dc400117 	ldw	r17,4(sp)
  800eec:	dc000017 	ldw	r16,0(sp)
  800ef0:	dec00304 	addi	sp,sp,12
  800ef4:	f800283a 	ret
  800ef8:	80c00017 	ldw	r3,0(r16)
  800efc:	183ff926 	beq	r3,zero,800ee4 <__alt_data_end+0xff800ee4>
  800f00:	88c00015 	stw	r3,0(r17)
  800f04:	003ff706 	br	800ee4 <__alt_data_end+0xff800ee4>

00800f08 <___svfprintf_internal_r>:
  800f08:	deffb704 	addi	sp,sp,-292
  800f0c:	dfc04815 	stw	ra,288(sp)
  800f10:	ddc04615 	stw	r23,280(sp)
  800f14:	d9402d15 	stw	r5,180(sp)
  800f18:	d9003915 	stw	r4,228(sp)
  800f1c:	302f883a 	mov	r23,r6
  800f20:	d9c02e15 	stw	r7,184(sp)
  800f24:	df004715 	stw	fp,284(sp)
  800f28:	dd804515 	stw	r22,276(sp)
  800f2c:	dd404415 	stw	r21,272(sp)
  800f30:	dd004315 	stw	r20,268(sp)
  800f34:	dcc04215 	stw	r19,264(sp)
  800f38:	dc804115 	stw	r18,260(sp)
  800f3c:	dc404015 	stw	r17,256(sp)
  800f40:	dc003f15 	stw	r16,252(sp)
  800f44:	0804f540 	call	804f54 <_localeconv_r>
  800f48:	10800017 	ldw	r2,0(r2)
  800f4c:	1009883a 	mov	r4,r2
  800f50:	d8803415 	stw	r2,208(sp)
  800f54:	08063b80 	call	8063b8 <strlen>
  800f58:	d8c02d17 	ldw	r3,180(sp)
  800f5c:	d8803815 	stw	r2,224(sp)
  800f60:	1880030b 	ldhu	r2,12(r3)
  800f64:	1080200c 	andi	r2,r2,128
  800f68:	10000226 	beq	r2,zero,800f74 <___svfprintf_internal_r+0x6c>
  800f6c:	18800417 	ldw	r2,16(r3)
  800f70:	1006b126 	beq	r2,zero,802a38 <___svfprintf_internal_r+0x1b30>
  800f74:	dcc03917 	ldw	r19,228(sp)
  800f78:	d8c00404 	addi	r3,sp,16
  800f7c:	05402074 	movhi	r21,129
  800f80:	d9001e04 	addi	r4,sp,120
  800f84:	ad7e4b84 	addi	r21,r21,-1746
  800f88:	d8c01e15 	stw	r3,120(sp)
  800f8c:	d8002015 	stw	zero,128(sp)
  800f90:	d8001f15 	stw	zero,124(sp)
  800f94:	d8003315 	stw	zero,204(sp)
  800f98:	d8003615 	stw	zero,216(sp)
  800f9c:	d8003715 	stw	zero,220(sp)
  800fa0:	1811883a 	mov	r8,r3
  800fa4:	d8003a15 	stw	zero,232(sp)
  800fa8:	d8003b15 	stw	zero,236(sp)
  800fac:	d8002f15 	stw	zero,188(sp)
  800fb0:	d9002815 	stw	r4,160(sp)
  800fb4:	b8800007 	ldb	r2,0(r23)
  800fb8:	10027726 	beq	r2,zero,801998 <___svfprintf_internal_r+0xa90>
  800fbc:	00c00944 	movi	r3,37
  800fc0:	b823883a 	mov	r17,r23
  800fc4:	10c0021e 	bne	r2,r3,800fd0 <___svfprintf_internal_r+0xc8>
  800fc8:	00001406 	br	80101c <___svfprintf_internal_r+0x114>
  800fcc:	10c00326 	beq	r2,r3,800fdc <___svfprintf_internal_r+0xd4>
  800fd0:	8c400044 	addi	r17,r17,1
  800fd4:	88800007 	ldb	r2,0(r17)
  800fd8:	103ffc1e 	bne	r2,zero,800fcc <__alt_data_end+0xff800fcc>
  800fdc:	8de1c83a 	sub	r16,r17,r23
  800fe0:	80000e26 	beq	r16,zero,80101c <___svfprintf_internal_r+0x114>
  800fe4:	d8c02017 	ldw	r3,128(sp)
  800fe8:	d8801f17 	ldw	r2,124(sp)
  800fec:	45c00015 	stw	r23,0(r8)
  800ff0:	1c07883a 	add	r3,r3,r16
  800ff4:	10800044 	addi	r2,r2,1
  800ff8:	d8c02015 	stw	r3,128(sp)
  800ffc:	44000115 	stw	r16,4(r8)
  801000:	d8801f15 	stw	r2,124(sp)
  801004:	00c001c4 	movi	r3,7
  801008:	18809916 	blt	r3,r2,801270 <___svfprintf_internal_r+0x368>
  80100c:	42000204 	addi	r8,r8,8
  801010:	d9402f17 	ldw	r5,188(sp)
  801014:	2c0b883a 	add	r5,r5,r16
  801018:	d9402f15 	stw	r5,188(sp)
  80101c:	88800007 	ldb	r2,0(r17)
  801020:	10009a26 	beq	r2,zero,80128c <___svfprintf_internal_r+0x384>
  801024:	8dc00044 	addi	r23,r17,1
  801028:	8c400047 	ldb	r17,1(r17)
  80102c:	0021883a 	mov	r16,zero
  801030:	00bfffc4 	movi	r2,-1
  801034:	0025883a 	mov	r18,zero
  801038:	dc002905 	stb	r16,164(sp)
  80103c:	d8002785 	stb	zero,158(sp)
  801040:	d8002b05 	stb	zero,172(sp)
  801044:	d8802a15 	stw	r2,168(sp)
  801048:	d8003115 	stw	zero,196(sp)
  80104c:	05001604 	movi	r20,88
  801050:	05800244 	movi	r22,9
  801054:	4039883a 	mov	fp,r8
  801058:	9021883a 	mov	r16,r18
  80105c:	bdc00044 	addi	r23,r23,1
  801060:	88bff804 	addi	r2,r17,-32
  801064:	a0831e36 	bltu	r20,r2,801ce0 <___svfprintf_internal_r+0xdd8>
  801068:	100490ba 	slli	r2,r2,2
  80106c:	00c02034 	movhi	r3,128
  801070:	18c42004 	addi	r3,r3,4224
  801074:	10c5883a 	add	r2,r2,r3
  801078:	10800017 	ldw	r2,0(r2)
  80107c:	1000683a 	jmp	r2
  801080:	00801c28 	cmpgeui	r2,zero,112
  801084:	00801ce0 	cmpeqi	r2,zero,115
  801088:	00801ce0 	cmpeqi	r2,zero,115
  80108c:	00801c1c 	xori	r2,zero,112
  801090:	00801ce0 	cmpeqi	r2,zero,115
  801094:	00801ce0 	cmpeqi	r2,zero,115
  801098:	00801ce0 	cmpeqi	r2,zero,115
  80109c:	00801ce0 	cmpeqi	r2,zero,115
  8010a0:	00801ce0 	cmpeqi	r2,zero,115
  8010a4:	00801ce0 	cmpeqi	r2,zero,115
  8010a8:	008012e8 	cmpgeui	r2,zero,75
  8010ac:	00801b2c 	andhi	r2,zero,108
  8010b0:	00801ce0 	cmpeqi	r2,zero,115
  8010b4:	008011f4 	movhi	r2,71
  8010b8:	0080130c 	andi	r2,zero,76
  8010bc:	00801ce0 	cmpeqi	r2,zero,115
  8010c0:	00801398 	cmpnei	r2,zero,78
  8010c4:	0080135c 	xori	r2,zero,77
  8010c8:	0080135c 	xori	r2,zero,77
  8010cc:	0080135c 	xori	r2,zero,77
  8010d0:	0080135c 	xori	r2,zero,77
  8010d4:	0080135c 	xori	r2,zero,77
  8010d8:	0080135c 	xori	r2,zero,77
  8010dc:	0080135c 	xori	r2,zero,77
  8010e0:	0080135c 	xori	r2,zero,77
  8010e4:	0080135c 	xori	r2,zero,77
  8010e8:	00801ce0 	cmpeqi	r2,zero,115
  8010ec:	00801ce0 	cmpeqi	r2,zero,115
  8010f0:	00801ce0 	cmpeqi	r2,zero,115
  8010f4:	00801ce0 	cmpeqi	r2,zero,115
  8010f8:	00801ce0 	cmpeqi	r2,zero,115
  8010fc:	00801ce0 	cmpeqi	r2,zero,115
  801100:	00801ce0 	cmpeqi	r2,zero,115
  801104:	00801ce0 	cmpeqi	r2,zero,115
  801108:	00801ce0 	cmpeqi	r2,zero,115
  80110c:	00801ce0 	cmpeqi	r2,zero,115
  801110:	0080145c 	xori	r2,zero,81
  801114:	008013a4 	muli	r2,zero,78
  801118:	00801ce0 	cmpeqi	r2,zero,115
  80111c:	008013a4 	muli	r2,zero,78
  801120:	00801ce0 	cmpeqi	r2,zero,115
  801124:	00801ce0 	cmpeqi	r2,zero,115
  801128:	00801ce0 	cmpeqi	r2,zero,115
  80112c:	00801ce0 	cmpeqi	r2,zero,115
  801130:	00801450 	cmplti	r2,zero,81
  801134:	00801ce0 	cmpeqi	r2,zero,115
  801138:	00801ce0 	cmpeqi	r2,zero,115
  80113c:	00801524 	muli	r2,zero,84
  801140:	00801ce0 	cmpeqi	r2,zero,115
  801144:	00801ce0 	cmpeqi	r2,zero,115
  801148:	00801ce0 	cmpeqi	r2,zero,115
  80114c:	00801ce0 	cmpeqi	r2,zero,115
  801150:	00801ce0 	cmpeqi	r2,zero,115
  801154:	008019a0 	cmpeqi	r2,zero,102
  801158:	00801ce0 	cmpeqi	r2,zero,115
  80115c:	00801ce0 	cmpeqi	r2,zero,115
  801160:	00801a0c 	andi	r2,zero,104
  801164:	00801ce0 	cmpeqi	r2,zero,115
  801168:	00801ce0 	cmpeqi	r2,zero,115
  80116c:	00801ce0 	cmpeqi	r2,zero,115
  801170:	00801ce0 	cmpeqi	r2,zero,115
  801174:	00801ce0 	cmpeqi	r2,zero,115
  801178:	00801ce0 	cmpeqi	r2,zero,115
  80117c:	00801ce0 	cmpeqi	r2,zero,115
  801180:	00801ce0 	cmpeqi	r2,zero,115
  801184:	00801ce0 	cmpeqi	r2,zero,115
  801188:	00801ce0 	cmpeqi	r2,zero,115
  80118c:	00801ac8 	cmpgei	r2,zero,107
  801190:	00801c48 	cmpgei	r2,zero,113
  801194:	008013a4 	muli	r2,zero,78
  801198:	008013a4 	muli	r2,zero,78
  80119c:	008013a4 	muli	r2,zero,78
  8011a0:	00801cbc 	xorhi	r2,zero,114
  8011a4:	00801c48 	cmpgei	r2,zero,113
  8011a8:	00801ce0 	cmpeqi	r2,zero,115
  8011ac:	00801ce0 	cmpeqi	r2,zero,115
  8011b0:	00801c68 	cmpgeui	r2,zero,113
  8011b4:	00801ce0 	cmpeqi	r2,zero,115
  8011b8:	00801c7c 	xorhi	r2,zero,113
  8011bc:	00801b0c 	andi	r2,zero,108
  8011c0:	00801200 	call	80120 <__alt_mem_sdram-0x77fee0>
  8011c4:	00801b44 	movi	r2,109
  8011c8:	00801ce0 	cmpeqi	r2,zero,115
  8011cc:	00801b50 	cmplti	r2,zero,109
  8011d0:	00801ce0 	cmpeqi	r2,zero,115
  8011d4:	00801bb4 	movhi	r2,110
  8011d8:	00801ce0 	cmpeqi	r2,zero,115
  8011dc:	00801ce0 	cmpeqi	r2,zero,115
  8011e0:	00801bd4 	movui	r2,111
  8011e4:	d8c03117 	ldw	r3,196(sp)
  8011e8:	d8802e15 	stw	r2,184(sp)
  8011ec:	00c7c83a 	sub	r3,zero,r3
  8011f0:	d8c03115 	stw	r3,196(sp)
  8011f4:	84000114 	ori	r16,r16,4
  8011f8:	bc400007 	ldb	r17,0(r23)
  8011fc:	003f9706 	br	80105c <__alt_data_end+0xff80105c>
  801200:	00800c04 	movi	r2,48
  801204:	d8802705 	stb	r2,156(sp)
  801208:	00801e04 	movi	r2,120
  80120c:	d8802745 	stb	r2,157(sp)
  801210:	d9002a17 	ldw	r4,168(sp)
  801214:	d8802e17 	ldw	r2,184(sp)
  801218:	d8002785 	stb	zero,158(sp)
  80121c:	e011883a 	mov	r8,fp
  801220:	10c00104 	addi	r3,r2,4
  801224:	15000017 	ldw	r20,0(r2)
  801228:	002d883a 	mov	r22,zero
  80122c:	80800094 	ori	r2,r16,2
  801230:	2002b616 	blt	r4,zero,801d0c <___svfprintf_internal_r+0xe04>
  801234:	00bfdfc4 	movi	r2,-129
  801238:	80a4703a 	and	r18,r16,r2
  80123c:	d8c02e15 	stw	r3,184(sp)
  801240:	94800094 	ori	r18,r18,2
  801244:	a002a01e 	bne	r20,zero,801cc8 <___svfprintf_internal_r+0xdc0>
  801248:	01402074 	movhi	r5,129
  80124c:	297e4404 	addi	r5,r5,-1776
  801250:	d9403a15 	stw	r5,232(sp)
  801254:	04401e04 	movi	r17,120
  801258:	d8c02a17 	ldw	r3,168(sp)
  80125c:	0039883a 	mov	fp,zero
  801260:	1801e626 	beq	r3,zero,8019fc <___svfprintf_internal_r+0xaf4>
  801264:	0029883a 	mov	r20,zero
  801268:	002d883a 	mov	r22,zero
  80126c:	00020506 	br	801a84 <___svfprintf_internal_r+0xb7c>
  801270:	d9402d17 	ldw	r5,180(sp)
  801274:	d9801e04 	addi	r6,sp,120
  801278:	9809883a 	mov	r4,r19
  80127c:	08064500 	call	806450 <__ssprint_r>
  801280:	1000081e 	bne	r2,zero,8012a4 <___svfprintf_internal_r+0x39c>
  801284:	da000404 	addi	r8,sp,16
  801288:	003f6106 	br	801010 <__alt_data_end+0xff801010>
  80128c:	d8802017 	ldw	r2,128(sp)
  801290:	10000426 	beq	r2,zero,8012a4 <___svfprintf_internal_r+0x39c>
  801294:	d9402d17 	ldw	r5,180(sp)
  801298:	d9003917 	ldw	r4,228(sp)
  80129c:	d9801e04 	addi	r6,sp,120
  8012a0:	08064500 	call	806450 <__ssprint_r>
  8012a4:	d8802d17 	ldw	r2,180(sp)
  8012a8:	10c0030b 	ldhu	r3,12(r2)
  8012ac:	d8802f17 	ldw	r2,188(sp)
  8012b0:	18c0100c 	andi	r3,r3,64
  8012b4:	1806251e 	bne	r3,zero,802b4c <___svfprintf_internal_r+0x1c44>
  8012b8:	dfc04817 	ldw	ra,288(sp)
  8012bc:	df004717 	ldw	fp,284(sp)
  8012c0:	ddc04617 	ldw	r23,280(sp)
  8012c4:	dd804517 	ldw	r22,276(sp)
  8012c8:	dd404417 	ldw	r21,272(sp)
  8012cc:	dd004317 	ldw	r20,268(sp)
  8012d0:	dcc04217 	ldw	r19,264(sp)
  8012d4:	dc804117 	ldw	r18,260(sp)
  8012d8:	dc404017 	ldw	r17,256(sp)
  8012dc:	dc003f17 	ldw	r16,252(sp)
  8012e0:	dec04904 	addi	sp,sp,292
  8012e4:	f800283a 	ret
  8012e8:	d9002e17 	ldw	r4,184(sp)
  8012ec:	d9402e17 	ldw	r5,184(sp)
  8012f0:	21000017 	ldw	r4,0(r4)
  8012f4:	28800104 	addi	r2,r5,4
  8012f8:	d9003115 	stw	r4,196(sp)
  8012fc:	203fb916 	blt	r4,zero,8011e4 <__alt_data_end+0xff8011e4>
  801300:	d8802e15 	stw	r2,184(sp)
  801304:	bc400007 	ldb	r17,0(r23)
  801308:	003f5406 	br	80105c <__alt_data_end+0xff80105c>
  80130c:	bc400007 	ldb	r17,0(r23)
  801310:	01000a84 	movi	r4,42
  801314:	b8c00044 	addi	r3,r23,1
  801318:	89076926 	beq	r17,r4,8030c0 <___svfprintf_internal_r+0x21b8>
  80131c:	8cbff404 	addi	r18,r17,-48
  801320:	b486b936 	bltu	r22,r18,802e08 <___svfprintf_internal_r+0x1f00>
  801324:	0009883a 	mov	r4,zero
  801328:	1823883a 	mov	r17,r3
  80132c:	01400284 	movi	r5,10
  801330:	0808ed00 	call	808ed0 <__mulsi3>
  801334:	88c00007 	ldb	r3,0(r17)
  801338:	1489883a 	add	r4,r2,r18
  80133c:	8dc00044 	addi	r23,r17,1
  801340:	1cbff404 	addi	r18,r3,-48
  801344:	b823883a 	mov	r17,r23
  801348:	b4bff82e 	bgeu	r22,r18,80132c <__alt_data_end+0xff80132c>
  80134c:	1823883a 	mov	r17,r3
  801350:	20060416 	blt	r4,zero,802b64 <___svfprintf_internal_r+0x1c5c>
  801354:	d9002a15 	stw	r4,168(sp)
  801358:	003f4106 	br	801060 <__alt_data_end+0xff801060>
  80135c:	8cbff404 	addi	r18,r17,-48
  801360:	d8003115 	stw	zero,196(sp)
  801364:	0009883a 	mov	r4,zero
  801368:	b823883a 	mov	r17,r23
  80136c:	01400284 	movi	r5,10
  801370:	0808ed00 	call	808ed0 <__mulsi3>
  801374:	88c00007 	ldb	r3,0(r17)
  801378:	9089883a 	add	r4,r18,r2
  80137c:	bdc00044 	addi	r23,r23,1
  801380:	1cbff404 	addi	r18,r3,-48
  801384:	b823883a 	mov	r17,r23
  801388:	b4bff82e 	bgeu	r22,r18,80136c <__alt_data_end+0xff80136c>
  80138c:	1823883a 	mov	r17,r3
  801390:	d9003115 	stw	r4,196(sp)
  801394:	003f3206 	br	801060 <__alt_data_end+0xff801060>
  801398:	84002014 	ori	r16,r16,128
  80139c:	bc400007 	ldb	r17,0(r23)
  8013a0:	003f2e06 	br	80105c <__alt_data_end+0xff80105c>
  8013a4:	8025883a 	mov	r18,r16
  8013a8:	dc002903 	ldbu	r16,164(sp)
  8013ac:	e011883a 	mov	r8,fp
  8013b0:	84003fcc 	andi	r16,r16,255
  8013b4:	8007721e 	bne	r16,zero,803180 <___svfprintf_internal_r+0x2278>
  8013b8:	9080020c 	andi	r2,r18,8
  8013bc:	1004a526 	beq	r2,zero,802654 <___svfprintf_internal_r+0x174c>
  8013c0:	d9002e17 	ldw	r4,184(sp)
  8013c4:	d9402e17 	ldw	r5,184(sp)
  8013c8:	d8802e17 	ldw	r2,184(sp)
  8013cc:	21000017 	ldw	r4,0(r4)
  8013d0:	29400117 	ldw	r5,4(r5)
  8013d4:	10800204 	addi	r2,r2,8
  8013d8:	d9003615 	stw	r4,216(sp)
  8013dc:	d9403715 	stw	r5,220(sp)
  8013e0:	d8802e15 	stw	r2,184(sp)
  8013e4:	d9003617 	ldw	r4,216(sp)
  8013e8:	d9403717 	ldw	r5,220(sp)
  8013ec:	da003e15 	stw	r8,248(sp)
  8013f0:	04000044 	movi	r16,1
  8013f4:	08062680 	call	806268 <__fpclassifyd>
  8013f8:	da003e17 	ldw	r8,248(sp)
  8013fc:	1404731e 	bne	r2,r16,8025cc <___svfprintf_internal_r+0x16c4>
  801400:	d9003617 	ldw	r4,216(sp)
  801404:	d9403717 	ldw	r5,220(sp)
  801408:	000d883a 	mov	r6,zero
  80140c:	000f883a 	mov	r7,zero
  801410:	080a2d80 	call	80a2d8 <__ledf2>
  801414:	da003e17 	ldw	r8,248(sp)
  801418:	10061b16 	blt	r2,zero,802c88 <___svfprintf_internal_r+0x1d80>
  80141c:	df002783 	ldbu	fp,158(sp)
  801420:	008011c4 	movi	r2,71
  801424:	1445810e 	bge	r2,r17,802a2c <___svfprintf_internal_r+0x1b24>
  801428:	04002074 	movhi	r16,129
  80142c:	843e3c04 	addi	r16,r16,-1808
  801430:	00c000c4 	movi	r3,3
  801434:	00bfdfc4 	movi	r2,-129
  801438:	d8c02915 	stw	r3,164(sp)
  80143c:	90a4703a 	and	r18,r18,r2
  801440:	d8c02b15 	stw	r3,172(sp)
  801444:	d8002a15 	stw	zero,168(sp)
  801448:	d8003215 	stw	zero,200(sp)
  80144c:	00006c06 	br	801600 <___svfprintf_internal_r+0x6f8>
  801450:	84000214 	ori	r16,r16,8
  801454:	bc400007 	ldb	r17,0(r23)
  801458:	003f0006 	br	80105c <__alt_data_end+0xff80105c>
  80145c:	8025883a 	mov	r18,r16
  801460:	dc002903 	ldbu	r16,164(sp)
  801464:	e011883a 	mov	r8,fp
  801468:	84003fcc 	andi	r16,r16,255
  80146c:	80073f1e 	bne	r16,zero,80316c <___svfprintf_internal_r+0x2264>
  801470:	94800414 	ori	r18,r18,16
  801474:	9080080c 	andi	r2,r18,32
  801478:	1003bb26 	beq	r2,zero,802368 <___svfprintf_internal_r+0x1460>
  80147c:	d9002e17 	ldw	r4,184(sp)
  801480:	20800117 	ldw	r2,4(r4)
  801484:	25000017 	ldw	r20,0(r4)
  801488:	21000204 	addi	r4,r4,8
  80148c:	d9002e15 	stw	r4,184(sp)
  801490:	102d883a 	mov	r22,r2
  801494:	1003bd16 	blt	r2,zero,80238c <___svfprintf_internal_r+0x1484>
  801498:	d9002a17 	ldw	r4,168(sp)
  80149c:	df002783 	ldbu	fp,158(sp)
  8014a0:	2003d016 	blt	r4,zero,8023e4 <___svfprintf_internal_r+0x14dc>
  8014a4:	00ffdfc4 	movi	r3,-129
  8014a8:	a584b03a 	or	r2,r20,r22
  8014ac:	90e4703a 	and	r18,r18,r3
  8014b0:	10015026 	beq	r2,zero,8019f4 <___svfprintf_internal_r+0xaec>
  8014b4:	b0037026 	beq	r22,zero,802278 <___svfprintf_internal_r+0x1370>
  8014b8:	dc402915 	stw	r17,164(sp)
  8014bc:	dc001e04 	addi	r16,sp,120
  8014c0:	b023883a 	mov	r17,r22
  8014c4:	402d883a 	mov	r22,r8
  8014c8:	a009883a 	mov	r4,r20
  8014cc:	880b883a 	mov	r5,r17
  8014d0:	01800284 	movi	r6,10
  8014d4:	000f883a 	mov	r7,zero
  8014d8:	08087580 	call	808758 <__umoddi3>
  8014dc:	10800c04 	addi	r2,r2,48
  8014e0:	843fffc4 	addi	r16,r16,-1
  8014e4:	a009883a 	mov	r4,r20
  8014e8:	880b883a 	mov	r5,r17
  8014ec:	80800005 	stb	r2,0(r16)
  8014f0:	01800284 	movi	r6,10
  8014f4:	000f883a 	mov	r7,zero
  8014f8:	080815c0 	call	80815c <__udivdi3>
  8014fc:	1029883a 	mov	r20,r2
  801500:	10c4b03a 	or	r2,r2,r3
  801504:	1823883a 	mov	r17,r3
  801508:	103fef1e 	bne	r2,zero,8014c8 <__alt_data_end+0xff8014c8>
  80150c:	d8c02817 	ldw	r3,160(sp)
  801510:	dc402917 	ldw	r17,164(sp)
  801514:	b011883a 	mov	r8,r22
  801518:	1c07c83a 	sub	r3,r3,r16
  80151c:	d8c02b15 	stw	r3,172(sp)
  801520:	00003106 	br	8015e8 <___svfprintf_internal_r+0x6e0>
  801524:	8025883a 	mov	r18,r16
  801528:	dc002903 	ldbu	r16,164(sp)
  80152c:	e011883a 	mov	r8,fp
  801530:	84003fcc 	andi	r16,r16,255
  801534:	80070a1e 	bne	r16,zero,803160 <___svfprintf_internal_r+0x2258>
  801538:	94800414 	ori	r18,r18,16
  80153c:	9080080c 	andi	r2,r18,32
  801540:	1002f626 	beq	r2,zero,80211c <___svfprintf_internal_r+0x1214>
  801544:	d9002e17 	ldw	r4,184(sp)
  801548:	d9402a17 	ldw	r5,168(sp)
  80154c:	d8002785 	stb	zero,158(sp)
  801550:	20800204 	addi	r2,r4,8
  801554:	25000017 	ldw	r20,0(r4)
  801558:	25800117 	ldw	r22,4(r4)
  80155c:	28043716 	blt	r5,zero,80263c <___svfprintf_internal_r+0x1734>
  801560:	013fdfc4 	movi	r4,-129
  801564:	a586b03a 	or	r3,r20,r22
  801568:	d8802e15 	stw	r2,184(sp)
  80156c:	9124703a 	and	r18,r18,r4
  801570:	1802f71e 	bne	r3,zero,802150 <___svfprintf_internal_r+0x1248>
  801574:	d9402a17 	ldw	r5,168(sp)
  801578:	0039883a 	mov	fp,zero
  80157c:	2806df26 	beq	r5,zero,8030fc <___svfprintf_internal_r+0x21f4>
  801580:	0029883a 	mov	r20,zero
  801584:	002d883a 	mov	r22,zero
  801588:	dc001e04 	addi	r16,sp,120
  80158c:	a006d0fa 	srli	r3,r20,3
  801590:	b008977a 	slli	r4,r22,29
  801594:	b02cd0fa 	srli	r22,r22,3
  801598:	a50001cc 	andi	r20,r20,7
  80159c:	a0800c04 	addi	r2,r20,48
  8015a0:	843fffc4 	addi	r16,r16,-1
  8015a4:	20e8b03a 	or	r20,r4,r3
  8015a8:	80800005 	stb	r2,0(r16)
  8015ac:	a586b03a 	or	r3,r20,r22
  8015b0:	183ff61e 	bne	r3,zero,80158c <__alt_data_end+0xff80158c>
  8015b4:	90c0004c 	andi	r3,r18,1
  8015b8:	18013f26 	beq	r3,zero,801ab8 <___svfprintf_internal_r+0xbb0>
  8015bc:	10803fcc 	andi	r2,r2,255
  8015c0:	1080201c 	xori	r2,r2,128
  8015c4:	10bfe004 	addi	r2,r2,-128
  8015c8:	00c00c04 	movi	r3,48
  8015cc:	10c13a26 	beq	r2,r3,801ab8 <___svfprintf_internal_r+0xbb0>
  8015d0:	80ffffc5 	stb	r3,-1(r16)
  8015d4:	d8c02817 	ldw	r3,160(sp)
  8015d8:	80bfffc4 	addi	r2,r16,-1
  8015dc:	1021883a 	mov	r16,r2
  8015e0:	1887c83a 	sub	r3,r3,r2
  8015e4:	d8c02b15 	stw	r3,172(sp)
  8015e8:	d8802b17 	ldw	r2,172(sp)
  8015ec:	d9002a17 	ldw	r4,168(sp)
  8015f0:	1100010e 	bge	r2,r4,8015f8 <___svfprintf_internal_r+0x6f0>
  8015f4:	2005883a 	mov	r2,r4
  8015f8:	d8802915 	stw	r2,164(sp)
  8015fc:	d8003215 	stw	zero,200(sp)
  801600:	e7003fcc 	andi	fp,fp,255
  801604:	e700201c 	xori	fp,fp,128
  801608:	e73fe004 	addi	fp,fp,-128
  80160c:	e0000326 	beq	fp,zero,80161c <___svfprintf_internal_r+0x714>
  801610:	d8c02917 	ldw	r3,164(sp)
  801614:	18c00044 	addi	r3,r3,1
  801618:	d8c02915 	stw	r3,164(sp)
  80161c:	90c0008c 	andi	r3,r18,2
  801620:	d8c02c15 	stw	r3,176(sp)
  801624:	18000326 	beq	r3,zero,801634 <___svfprintf_internal_r+0x72c>
  801628:	d8c02917 	ldw	r3,164(sp)
  80162c:	18c00084 	addi	r3,r3,2
  801630:	d8c02915 	stw	r3,164(sp)
  801634:	90c0210c 	andi	r3,r18,132
  801638:	d8c03015 	stw	r3,192(sp)
  80163c:	1801c31e 	bne	r3,zero,801d4c <___svfprintf_internal_r+0xe44>
  801640:	d9003117 	ldw	r4,196(sp)
  801644:	d8c02917 	ldw	r3,164(sp)
  801648:	20e9c83a 	sub	r20,r4,r3
  80164c:	0501bf0e 	bge	zero,r20,801d4c <___svfprintf_internal_r+0xe44>
  801650:	02400404 	movi	r9,16
  801654:	d8c02017 	ldw	r3,128(sp)
  801658:	d8801f17 	ldw	r2,124(sp)
  80165c:	4d053d0e 	bge	r9,r20,802b54 <___svfprintf_internal_r+0x1c4c>
  801660:	01402074 	movhi	r5,129
  801664:	297e4f84 	addi	r5,r5,-1730
  801668:	dc403c15 	stw	r17,240(sp)
  80166c:	d9403515 	stw	r5,212(sp)
  801670:	a023883a 	mov	r17,r20
  801674:	482d883a 	mov	r22,r9
  801678:	9029883a 	mov	r20,r18
  80167c:	070001c4 	movi	fp,7
  801680:	8025883a 	mov	r18,r16
  801684:	dc002d17 	ldw	r16,180(sp)
  801688:	00000306 	br	801698 <___svfprintf_internal_r+0x790>
  80168c:	8c7ffc04 	addi	r17,r17,-16
  801690:	42000204 	addi	r8,r8,8
  801694:	b440130e 	bge	r22,r17,8016e4 <___svfprintf_internal_r+0x7dc>
  801698:	01002074 	movhi	r4,129
  80169c:	18c00404 	addi	r3,r3,16
  8016a0:	10800044 	addi	r2,r2,1
  8016a4:	213e4f84 	addi	r4,r4,-1730
  8016a8:	41000015 	stw	r4,0(r8)
  8016ac:	45800115 	stw	r22,4(r8)
  8016b0:	d8c02015 	stw	r3,128(sp)
  8016b4:	d8801f15 	stw	r2,124(sp)
  8016b8:	e0bff40e 	bge	fp,r2,80168c <__alt_data_end+0xff80168c>
  8016bc:	d9801e04 	addi	r6,sp,120
  8016c0:	800b883a 	mov	r5,r16
  8016c4:	9809883a 	mov	r4,r19
  8016c8:	08064500 	call	806450 <__ssprint_r>
  8016cc:	103ef51e 	bne	r2,zero,8012a4 <__alt_data_end+0xff8012a4>
  8016d0:	8c7ffc04 	addi	r17,r17,-16
  8016d4:	d8c02017 	ldw	r3,128(sp)
  8016d8:	d8801f17 	ldw	r2,124(sp)
  8016dc:	da000404 	addi	r8,sp,16
  8016e0:	b47fed16 	blt	r22,r17,801698 <__alt_data_end+0xff801698>
  8016e4:	9021883a 	mov	r16,r18
  8016e8:	a025883a 	mov	r18,r20
  8016ec:	8829883a 	mov	r20,r17
  8016f0:	dc403c17 	ldw	r17,240(sp)
  8016f4:	d9403517 	ldw	r5,212(sp)
  8016f8:	a0c7883a 	add	r3,r20,r3
  8016fc:	10800044 	addi	r2,r2,1
  801700:	41400015 	stw	r5,0(r8)
  801704:	45000115 	stw	r20,4(r8)
  801708:	d8c02015 	stw	r3,128(sp)
  80170c:	d8801f15 	stw	r2,124(sp)
  801710:	010001c4 	movi	r4,7
  801714:	2082c116 	blt	r4,r2,80221c <___svfprintf_internal_r+0x1314>
  801718:	df002787 	ldb	fp,158(sp)
  80171c:	42000204 	addi	r8,r8,8
  801720:	e0000c26 	beq	fp,zero,801754 <___svfprintf_internal_r+0x84c>
  801724:	d8801f17 	ldw	r2,124(sp)
  801728:	d9002784 	addi	r4,sp,158
  80172c:	18c00044 	addi	r3,r3,1
  801730:	10800044 	addi	r2,r2,1
  801734:	41000015 	stw	r4,0(r8)
  801738:	01000044 	movi	r4,1
  80173c:	41000115 	stw	r4,4(r8)
  801740:	d8c02015 	stw	r3,128(sp)
  801744:	d8801f15 	stw	r2,124(sp)
  801748:	010001c4 	movi	r4,7
  80174c:	20825a16 	blt	r4,r2,8020b8 <___svfprintf_internal_r+0x11b0>
  801750:	42000204 	addi	r8,r8,8
  801754:	d8802c17 	ldw	r2,176(sp)
  801758:	10000c26 	beq	r2,zero,80178c <___svfprintf_internal_r+0x884>
  80175c:	d8801f17 	ldw	r2,124(sp)
  801760:	d9002704 	addi	r4,sp,156
  801764:	18c00084 	addi	r3,r3,2
  801768:	10800044 	addi	r2,r2,1
  80176c:	41000015 	stw	r4,0(r8)
  801770:	01000084 	movi	r4,2
  801774:	41000115 	stw	r4,4(r8)
  801778:	d8c02015 	stw	r3,128(sp)
  80177c:	d8801f15 	stw	r2,124(sp)
  801780:	010001c4 	movi	r4,7
  801784:	20825416 	blt	r4,r2,8020d8 <___svfprintf_internal_r+0x11d0>
  801788:	42000204 	addi	r8,r8,8
  80178c:	d9003017 	ldw	r4,192(sp)
  801790:	00802004 	movi	r2,128
  801794:	2081b926 	beq	r4,r2,801e7c <___svfprintf_internal_r+0xf74>
  801798:	d9402a17 	ldw	r5,168(sp)
  80179c:	d8802b17 	ldw	r2,172(sp)
  8017a0:	28adc83a 	sub	r22,r5,r2
  8017a4:	05802f0e 	bge	zero,r22,801864 <___svfprintf_internal_r+0x95c>
  8017a8:	07000404 	movi	fp,16
  8017ac:	d8801f17 	ldw	r2,124(sp)
  8017b0:	e583e20e 	bge	fp,r22,80273c <___svfprintf_internal_r+0x1834>
  8017b4:	01402074 	movhi	r5,129
  8017b8:	297e4b84 	addi	r5,r5,-1746
  8017bc:	dc402a15 	stw	r17,168(sp)
  8017c0:	d9402c15 	stw	r5,176(sp)
  8017c4:	b023883a 	mov	r17,r22
  8017c8:	050001c4 	movi	r20,7
  8017cc:	902d883a 	mov	r22,r18
  8017d0:	8025883a 	mov	r18,r16
  8017d4:	dc002d17 	ldw	r16,180(sp)
  8017d8:	00000306 	br	8017e8 <___svfprintf_internal_r+0x8e0>
  8017dc:	8c7ffc04 	addi	r17,r17,-16
  8017e0:	42000204 	addi	r8,r8,8
  8017e4:	e440110e 	bge	fp,r17,80182c <___svfprintf_internal_r+0x924>
  8017e8:	18c00404 	addi	r3,r3,16
  8017ec:	10800044 	addi	r2,r2,1
  8017f0:	45400015 	stw	r21,0(r8)
  8017f4:	47000115 	stw	fp,4(r8)
  8017f8:	d8c02015 	stw	r3,128(sp)
  8017fc:	d8801f15 	stw	r2,124(sp)
  801800:	a0bff60e 	bge	r20,r2,8017dc <__alt_data_end+0xff8017dc>
  801804:	d9801e04 	addi	r6,sp,120
  801808:	800b883a 	mov	r5,r16
  80180c:	9809883a 	mov	r4,r19
  801810:	08064500 	call	806450 <__ssprint_r>
  801814:	103ea31e 	bne	r2,zero,8012a4 <__alt_data_end+0xff8012a4>
  801818:	8c7ffc04 	addi	r17,r17,-16
  80181c:	d8c02017 	ldw	r3,128(sp)
  801820:	d8801f17 	ldw	r2,124(sp)
  801824:	da000404 	addi	r8,sp,16
  801828:	e47fef16 	blt	fp,r17,8017e8 <__alt_data_end+0xff8017e8>
  80182c:	9021883a 	mov	r16,r18
  801830:	b025883a 	mov	r18,r22
  801834:	882d883a 	mov	r22,r17
  801838:	dc402a17 	ldw	r17,168(sp)
  80183c:	d9002c17 	ldw	r4,176(sp)
  801840:	1d87883a 	add	r3,r3,r22
  801844:	10800044 	addi	r2,r2,1
  801848:	41000015 	stw	r4,0(r8)
  80184c:	45800115 	stw	r22,4(r8)
  801850:	d8c02015 	stw	r3,128(sp)
  801854:	d8801f15 	stw	r2,124(sp)
  801858:	010001c4 	movi	r4,7
  80185c:	20820e16 	blt	r4,r2,802098 <___svfprintf_internal_r+0x1190>
  801860:	42000204 	addi	r8,r8,8
  801864:	9080400c 	andi	r2,r18,256
  801868:	10013a1e 	bne	r2,zero,801d54 <___svfprintf_internal_r+0xe4c>
  80186c:	d9402b17 	ldw	r5,172(sp)
  801870:	d8801f17 	ldw	r2,124(sp)
  801874:	44000015 	stw	r16,0(r8)
  801878:	1947883a 	add	r3,r3,r5
  80187c:	10800044 	addi	r2,r2,1
  801880:	41400115 	stw	r5,4(r8)
  801884:	d8c02015 	stw	r3,128(sp)
  801888:	d8801f15 	stw	r2,124(sp)
  80188c:	010001c4 	movi	r4,7
  801890:	2081f316 	blt	r4,r2,802060 <___svfprintf_internal_r+0x1158>
  801894:	42000204 	addi	r8,r8,8
  801898:	9480010c 	andi	r18,r18,4
  80189c:	90003226 	beq	r18,zero,801968 <___svfprintf_internal_r+0xa60>
  8018a0:	d9403117 	ldw	r5,196(sp)
  8018a4:	d8802917 	ldw	r2,164(sp)
  8018a8:	28a1c83a 	sub	r16,r5,r2
  8018ac:	04002e0e 	bge	zero,r16,801968 <___svfprintf_internal_r+0xa60>
  8018b0:	04400404 	movi	r17,16
  8018b4:	d8801f17 	ldw	r2,124(sp)
  8018b8:	8c04db0e 	bge	r17,r16,802c28 <___svfprintf_internal_r+0x1d20>
  8018bc:	01402074 	movhi	r5,129
  8018c0:	297e4f84 	addi	r5,r5,-1730
  8018c4:	d9403515 	stw	r5,212(sp)
  8018c8:	048001c4 	movi	r18,7
  8018cc:	dd002d17 	ldw	r20,180(sp)
  8018d0:	00000306 	br	8018e0 <___svfprintf_internal_r+0x9d8>
  8018d4:	843ffc04 	addi	r16,r16,-16
  8018d8:	42000204 	addi	r8,r8,8
  8018dc:	8c00130e 	bge	r17,r16,80192c <___svfprintf_internal_r+0xa24>
  8018e0:	01002074 	movhi	r4,129
  8018e4:	18c00404 	addi	r3,r3,16
  8018e8:	10800044 	addi	r2,r2,1
  8018ec:	213e4f84 	addi	r4,r4,-1730
  8018f0:	41000015 	stw	r4,0(r8)
  8018f4:	44400115 	stw	r17,4(r8)
  8018f8:	d8c02015 	stw	r3,128(sp)
  8018fc:	d8801f15 	stw	r2,124(sp)
  801900:	90bff40e 	bge	r18,r2,8018d4 <__alt_data_end+0xff8018d4>
  801904:	d9801e04 	addi	r6,sp,120
  801908:	a00b883a 	mov	r5,r20
  80190c:	9809883a 	mov	r4,r19
  801910:	08064500 	call	806450 <__ssprint_r>
  801914:	103e631e 	bne	r2,zero,8012a4 <__alt_data_end+0xff8012a4>
  801918:	843ffc04 	addi	r16,r16,-16
  80191c:	d8c02017 	ldw	r3,128(sp)
  801920:	d8801f17 	ldw	r2,124(sp)
  801924:	da000404 	addi	r8,sp,16
  801928:	8c3fed16 	blt	r17,r16,8018e0 <__alt_data_end+0xff8018e0>
  80192c:	d9403517 	ldw	r5,212(sp)
  801930:	1c07883a 	add	r3,r3,r16
  801934:	10800044 	addi	r2,r2,1
  801938:	41400015 	stw	r5,0(r8)
  80193c:	44000115 	stw	r16,4(r8)
  801940:	d8c02015 	stw	r3,128(sp)
  801944:	d8801f15 	stw	r2,124(sp)
  801948:	010001c4 	movi	r4,7
  80194c:	2080060e 	bge	r4,r2,801968 <___svfprintf_internal_r+0xa60>
  801950:	d9402d17 	ldw	r5,180(sp)
  801954:	d9801e04 	addi	r6,sp,120
  801958:	9809883a 	mov	r4,r19
  80195c:	08064500 	call	806450 <__ssprint_r>
  801960:	103e501e 	bne	r2,zero,8012a4 <__alt_data_end+0xff8012a4>
  801964:	d8c02017 	ldw	r3,128(sp)
  801968:	d8803117 	ldw	r2,196(sp)
  80196c:	d9002917 	ldw	r4,164(sp)
  801970:	1100010e 	bge	r2,r4,801978 <___svfprintf_internal_r+0xa70>
  801974:	2005883a 	mov	r2,r4
  801978:	d9402f17 	ldw	r5,188(sp)
  80197c:	288b883a 	add	r5,r5,r2
  801980:	d9402f15 	stw	r5,188(sp)
  801984:	1801be1e 	bne	r3,zero,802080 <___svfprintf_internal_r+0x1178>
  801988:	b8800007 	ldb	r2,0(r23)
  80198c:	d8001f15 	stw	zero,124(sp)
  801990:	da000404 	addi	r8,sp,16
  801994:	103d891e 	bne	r2,zero,800fbc <__alt_data_end+0xff800fbc>
  801998:	b823883a 	mov	r17,r23
  80199c:	003d9f06 	br	80101c <__alt_data_end+0xff80101c>
  8019a0:	8025883a 	mov	r18,r16
  8019a4:	dc002903 	ldbu	r16,164(sp)
  8019a8:	e011883a 	mov	r8,fp
  8019ac:	84003fcc 	andi	r16,r16,255
  8019b0:	8005e61e 	bne	r16,zero,80314c <___svfprintf_internal_r+0x2244>
  8019b4:	94800414 	ori	r18,r18,16
  8019b8:	9080080c 	andi	r2,r18,32
  8019bc:	10022026 	beq	r2,zero,802240 <___svfprintf_internal_r+0x1338>
  8019c0:	d9002e17 	ldw	r4,184(sp)
  8019c4:	d9402a17 	ldw	r5,168(sp)
  8019c8:	d8002785 	stb	zero,158(sp)
  8019cc:	20c00204 	addi	r3,r4,8
  8019d0:	25000017 	ldw	r20,0(r4)
  8019d4:	25800117 	ldw	r22,4(r4)
  8019d8:	2803ad16 	blt	r5,zero,802890 <___svfprintf_internal_r+0x1988>
  8019dc:	013fdfc4 	movi	r4,-129
  8019e0:	a584b03a 	or	r2,r20,r22
  8019e4:	d8c02e15 	stw	r3,184(sp)
  8019e8:	9124703a 	and	r18,r18,r4
  8019ec:	0039883a 	mov	fp,zero
  8019f0:	103eb01e 	bne	r2,zero,8014b4 <__alt_data_end+0xff8014b4>
  8019f4:	d8802a17 	ldw	r2,168(sp)
  8019f8:	1002e71e 	bne	r2,zero,802598 <___svfprintf_internal_r+0x1690>
  8019fc:	d8002a15 	stw	zero,168(sp)
  801a00:	d8002b15 	stw	zero,172(sp)
  801a04:	dc001e04 	addi	r16,sp,120
  801a08:	003ef706 	br	8015e8 <__alt_data_end+0xff8015e8>
  801a0c:	8025883a 	mov	r18,r16
  801a10:	dc002903 	ldbu	r16,164(sp)
  801a14:	e011883a 	mov	r8,fp
  801a18:	84003fcc 	andi	r16,r16,255
  801a1c:	8005c81e 	bne	r16,zero,803140 <___svfprintf_internal_r+0x2238>
  801a20:	01002074 	movhi	r4,129
  801a24:	213e3f04 	addi	r4,r4,-1796
  801a28:	d9003a15 	stw	r4,232(sp)
  801a2c:	9080080c 	andi	r2,r18,32
  801a30:	10007226 	beq	r2,zero,801bfc <___svfprintf_internal_r+0xcf4>
  801a34:	d9402e17 	ldw	r5,184(sp)
  801a38:	2d000017 	ldw	r20,0(r5)
  801a3c:	2d800117 	ldw	r22,4(r5)
  801a40:	29400204 	addi	r5,r5,8
  801a44:	d9402e15 	stw	r5,184(sp)
  801a48:	9080004c 	andi	r2,r18,1
  801a4c:	1001aa26 	beq	r2,zero,8020f8 <___svfprintf_internal_r+0x11f0>
  801a50:	a584b03a 	or	r2,r20,r22
  801a54:	10032526 	beq	r2,zero,8026ec <___svfprintf_internal_r+0x17e4>
  801a58:	d8c02a17 	ldw	r3,168(sp)
  801a5c:	00800c04 	movi	r2,48
  801a60:	d8802705 	stb	r2,156(sp)
  801a64:	dc402745 	stb	r17,157(sp)
  801a68:	d8002785 	stb	zero,158(sp)
  801a6c:	90800094 	ori	r2,r18,2
  801a70:	1804a316 	blt	r3,zero,802d00 <___svfprintf_internal_r+0x1df8>
  801a74:	00bfdfc4 	movi	r2,-129
  801a78:	90a4703a 	and	r18,r18,r2
  801a7c:	94800094 	ori	r18,r18,2
  801a80:	0039883a 	mov	fp,zero
  801a84:	d9003a17 	ldw	r4,232(sp)
  801a88:	dc001e04 	addi	r16,sp,120
  801a8c:	a08003cc 	andi	r2,r20,15
  801a90:	b006973a 	slli	r3,r22,28
  801a94:	2085883a 	add	r2,r4,r2
  801a98:	a028d13a 	srli	r20,r20,4
  801a9c:	10800003 	ldbu	r2,0(r2)
  801aa0:	b02cd13a 	srli	r22,r22,4
  801aa4:	843fffc4 	addi	r16,r16,-1
  801aa8:	1d28b03a 	or	r20,r3,r20
  801aac:	80800005 	stb	r2,0(r16)
  801ab0:	a584b03a 	or	r2,r20,r22
  801ab4:	103ff51e 	bne	r2,zero,801a8c <__alt_data_end+0xff801a8c>
  801ab8:	d8c02817 	ldw	r3,160(sp)
  801abc:	1c07c83a 	sub	r3,r3,r16
  801ac0:	d8c02b15 	stw	r3,172(sp)
  801ac4:	003ec806 	br	8015e8 <__alt_data_end+0xff8015e8>
  801ac8:	d8c02e17 	ldw	r3,184(sp)
  801acc:	d9002e17 	ldw	r4,184(sp)
  801ad0:	8025883a 	mov	r18,r16
  801ad4:	18800017 	ldw	r2,0(r3)
  801ad8:	21000104 	addi	r4,r4,4
  801adc:	00c00044 	movi	r3,1
  801ae0:	e011883a 	mov	r8,fp
  801ae4:	d8c02915 	stw	r3,164(sp)
  801ae8:	d8002785 	stb	zero,158(sp)
  801aec:	d8801405 	stb	r2,80(sp)
  801af0:	d9002e15 	stw	r4,184(sp)
  801af4:	d8c02b15 	stw	r3,172(sp)
  801af8:	d8002a15 	stw	zero,168(sp)
  801afc:	d8003215 	stw	zero,200(sp)
  801b00:	dc001404 	addi	r16,sp,80
  801b04:	0039883a 	mov	fp,zero
  801b08:	003ec406 	br	80161c <__alt_data_end+0xff80161c>
  801b0c:	8025883a 	mov	r18,r16
  801b10:	dc002903 	ldbu	r16,164(sp)
  801b14:	e011883a 	mov	r8,fp
  801b18:	84003fcc 	andi	r16,r16,255
  801b1c:	803e8726 	beq	r16,zero,80153c <__alt_data_end+0xff80153c>
  801b20:	d8c02b03 	ldbu	r3,172(sp)
  801b24:	d8c02785 	stb	r3,158(sp)
  801b28:	003e8406 	br	80153c <__alt_data_end+0xff80153c>
  801b2c:	00c00044 	movi	r3,1
  801b30:	d8c02905 	stb	r3,164(sp)
  801b34:	00c00ac4 	movi	r3,43
  801b38:	d8c02b05 	stb	r3,172(sp)
  801b3c:	bc400007 	ldb	r17,0(r23)
  801b40:	003d4606 	br	80105c <__alt_data_end+0xff80105c>
  801b44:	84000814 	ori	r16,r16,32
  801b48:	bc400007 	ldb	r17,0(r23)
  801b4c:	003d4306 	br	80105c <__alt_data_end+0xff80105c>
  801b50:	d8802e17 	ldw	r2,184(sp)
  801b54:	8025883a 	mov	r18,r16
  801b58:	d8002785 	stb	zero,158(sp)
  801b5c:	14000017 	ldw	r16,0(r2)
  801b60:	e011883a 	mov	r8,fp
  801b64:	15000104 	addi	r20,r2,4
  801b68:	80042126 	beq	r16,zero,802bf0 <___svfprintf_internal_r+0x1ce8>
  801b6c:	d8c02a17 	ldw	r3,168(sp)
  801b70:	1803ee16 	blt	r3,zero,802b2c <___svfprintf_internal_r+0x1c24>
  801b74:	180d883a 	mov	r6,r3
  801b78:	000b883a 	mov	r5,zero
  801b7c:	8009883a 	mov	r4,r16
  801b80:	df003e15 	stw	fp,248(sp)
  801b84:	0804f840 	call	804f84 <memchr>
  801b88:	da003e17 	ldw	r8,248(sp)
  801b8c:	10046a26 	beq	r2,zero,802d38 <___svfprintf_internal_r+0x1e30>
  801b90:	1405c83a 	sub	r2,r2,r16
  801b94:	d8802b15 	stw	r2,172(sp)
  801b98:	1003ea16 	blt	r2,zero,802b44 <___svfprintf_internal_r+0x1c3c>
  801b9c:	df002783 	ldbu	fp,158(sp)
  801ba0:	d8802915 	stw	r2,164(sp)
  801ba4:	dd002e15 	stw	r20,184(sp)
  801ba8:	d8002a15 	stw	zero,168(sp)
  801bac:	d8003215 	stw	zero,200(sp)
  801bb0:	003e9306 	br	801600 <__alt_data_end+0xff801600>
  801bb4:	8025883a 	mov	r18,r16
  801bb8:	dc002903 	ldbu	r16,164(sp)
  801bbc:	e011883a 	mov	r8,fp
  801bc0:	84003fcc 	andi	r16,r16,255
  801bc4:	803f7c26 	beq	r16,zero,8019b8 <__alt_data_end+0xff8019b8>
  801bc8:	d8c02b03 	ldbu	r3,172(sp)
  801bcc:	d8c02785 	stb	r3,158(sp)
  801bd0:	003f7906 	br	8019b8 <__alt_data_end+0xff8019b8>
  801bd4:	8025883a 	mov	r18,r16
  801bd8:	dc002903 	ldbu	r16,164(sp)
  801bdc:	e011883a 	mov	r8,fp
  801be0:	84003fcc 	andi	r16,r16,255
  801be4:	8005741e 	bne	r16,zero,8031b8 <___svfprintf_internal_r+0x22b0>
  801be8:	01002074 	movhi	r4,129
  801bec:	213e4404 	addi	r4,r4,-1776
  801bf0:	d9003a15 	stw	r4,232(sp)
  801bf4:	9080080c 	andi	r2,r18,32
  801bf8:	103f8e1e 	bne	r2,zero,801a34 <__alt_data_end+0xff801a34>
  801bfc:	9080040c 	andi	r2,r18,16
  801c00:	1002a726 	beq	r2,zero,8026a0 <___svfprintf_internal_r+0x1798>
  801c04:	d8802e17 	ldw	r2,184(sp)
  801c08:	002d883a 	mov	r22,zero
  801c0c:	15000017 	ldw	r20,0(r2)
  801c10:	10800104 	addi	r2,r2,4
  801c14:	d8802e15 	stw	r2,184(sp)
  801c18:	003f8b06 	br	801a48 <__alt_data_end+0xff801a48>
  801c1c:	84000054 	ori	r16,r16,1
  801c20:	bc400007 	ldb	r17,0(r23)
  801c24:	003d0d06 	br	80105c <__alt_data_end+0xff80105c>
  801c28:	d8802b07 	ldb	r2,172(sp)
  801c2c:	1002a41e 	bne	r2,zero,8026c0 <___svfprintf_internal_r+0x17b8>
  801c30:	00c00044 	movi	r3,1
  801c34:	d8c02905 	stb	r3,164(sp)
  801c38:	00c00804 	movi	r3,32
  801c3c:	d8c02b05 	stb	r3,172(sp)
  801c40:	bc400007 	ldb	r17,0(r23)
  801c44:	003d0506 	br	80105c <__alt_data_end+0xff80105c>
  801c48:	8025883a 	mov	r18,r16
  801c4c:	dc002903 	ldbu	r16,164(sp)
  801c50:	e011883a 	mov	r8,fp
  801c54:	84003fcc 	andi	r16,r16,255
  801c58:	803e0626 	beq	r16,zero,801474 <__alt_data_end+0xff801474>
  801c5c:	d8c02b03 	ldbu	r3,172(sp)
  801c60:	d8c02785 	stb	r3,158(sp)
  801c64:	003e0306 	br	801474 <__alt_data_end+0xff801474>
  801c68:	bc400007 	ldb	r17,0(r23)
  801c6c:	00801b04 	movi	r2,108
  801c70:	88830a26 	beq	r17,r2,80289c <___svfprintf_internal_r+0x1994>
  801c74:	84000414 	ori	r16,r16,16
  801c78:	003cf806 	br	80105c <__alt_data_end+0xff80105c>
  801c7c:	8025883a 	mov	r18,r16
  801c80:	dc002903 	ldbu	r16,164(sp)
  801c84:	e011883a 	mov	r8,fp
  801c88:	84003fcc 	andi	r16,r16,255
  801c8c:	8005471e 	bne	r16,zero,8031ac <___svfprintf_internal_r+0x22a4>
  801c90:	9080080c 	andi	r2,r18,32
  801c94:	10028c26 	beq	r2,zero,8026c8 <___svfprintf_internal_r+0x17c0>
  801c98:	d9002e17 	ldw	r4,184(sp)
  801c9c:	d9402f17 	ldw	r5,188(sp)
  801ca0:	20800017 	ldw	r2,0(r4)
  801ca4:	2807d7fa 	srai	r3,r5,31
  801ca8:	21000104 	addi	r4,r4,4
  801cac:	d9002e15 	stw	r4,184(sp)
  801cb0:	11400015 	stw	r5,0(r2)
  801cb4:	10c00115 	stw	r3,4(r2)
  801cb8:	003cbe06 	br	800fb4 <__alt_data_end+0xff800fb4>
  801cbc:	84001014 	ori	r16,r16,64
  801cc0:	bc400007 	ldb	r17,0(r23)
  801cc4:	003ce506 	br	80105c <__alt_data_end+0xff80105c>
  801cc8:	01002074 	movhi	r4,129
  801ccc:	213e4404 	addi	r4,r4,-1776
  801cd0:	0039883a 	mov	fp,zero
  801cd4:	d9003a15 	stw	r4,232(sp)
  801cd8:	04401e04 	movi	r17,120
  801cdc:	003f6906 	br	801a84 <__alt_data_end+0xff801a84>
  801ce0:	8025883a 	mov	r18,r16
  801ce4:	dc002903 	ldbu	r16,164(sp)
  801ce8:	e011883a 	mov	r8,fp
  801cec:	84003fcc 	andi	r16,r16,255
  801cf0:	8005261e 	bne	r16,zero,80318c <___svfprintf_internal_r+0x2284>
  801cf4:	883d6526 	beq	r17,zero,80128c <__alt_data_end+0xff80128c>
  801cf8:	00c00044 	movi	r3,1
  801cfc:	d8c02915 	stw	r3,164(sp)
  801d00:	dc401405 	stb	r17,80(sp)
  801d04:	d8002785 	stb	zero,158(sp)
  801d08:	003f7a06 	br	801af4 <__alt_data_end+0xff801af4>
  801d0c:	01002074 	movhi	r4,129
  801d10:	213e4404 	addi	r4,r4,-1776
  801d14:	d9003a15 	stw	r4,232(sp)
  801d18:	d8c02e15 	stw	r3,184(sp)
  801d1c:	1025883a 	mov	r18,r2
  801d20:	04401e04 	movi	r17,120
  801d24:	a584b03a 	or	r2,r20,r22
  801d28:	1000fa1e 	bne	r2,zero,802114 <___svfprintf_internal_r+0x120c>
  801d2c:	0039883a 	mov	fp,zero
  801d30:	00800084 	movi	r2,2
  801d34:	10803fcc 	andi	r2,r2,255
  801d38:	00c00044 	movi	r3,1
  801d3c:	10c21626 	beq	r2,r3,802598 <___svfprintf_internal_r+0x1690>
  801d40:	00c00084 	movi	r3,2
  801d44:	10fe0e1e 	bne	r2,r3,801580 <__alt_data_end+0xff801580>
  801d48:	003d4606 	br	801264 <__alt_data_end+0xff801264>
  801d4c:	d8c02017 	ldw	r3,128(sp)
  801d50:	003e7306 	br	801720 <__alt_data_end+0xff801720>
  801d54:	00801944 	movi	r2,101
  801d58:	14407c0e 	bge	r2,r17,801f4c <___svfprintf_internal_r+0x1044>
  801d5c:	d9003617 	ldw	r4,216(sp)
  801d60:	d9403717 	ldw	r5,220(sp)
  801d64:	000d883a 	mov	r6,zero
  801d68:	000f883a 	mov	r7,zero
  801d6c:	d8c03d15 	stw	r3,244(sp)
  801d70:	da003e15 	stw	r8,248(sp)
  801d74:	080a1740 	call	80a174 <__eqdf2>
  801d78:	d8c03d17 	ldw	r3,244(sp)
  801d7c:	da003e17 	ldw	r8,248(sp)
  801d80:	1000f51e 	bne	r2,zero,802158 <___svfprintf_internal_r+0x1250>
  801d84:	d8801f17 	ldw	r2,124(sp)
  801d88:	01002074 	movhi	r4,129
  801d8c:	213e4b04 	addi	r4,r4,-1748
  801d90:	18c00044 	addi	r3,r3,1
  801d94:	10800044 	addi	r2,r2,1
  801d98:	41000015 	stw	r4,0(r8)
  801d9c:	01000044 	movi	r4,1
  801da0:	41000115 	stw	r4,4(r8)
  801da4:	d8c02015 	stw	r3,128(sp)
  801da8:	d8801f15 	stw	r2,124(sp)
  801dac:	010001c4 	movi	r4,7
  801db0:	20826616 	blt	r4,r2,80274c <___svfprintf_internal_r+0x1844>
  801db4:	42000204 	addi	r8,r8,8
  801db8:	d8802617 	ldw	r2,152(sp)
  801dbc:	d9403317 	ldw	r5,204(sp)
  801dc0:	11400216 	blt	r2,r5,801dcc <___svfprintf_internal_r+0xec4>
  801dc4:	9080004c 	andi	r2,r18,1
  801dc8:	103eb326 	beq	r2,zero,801898 <__alt_data_end+0xff801898>
  801dcc:	d8803817 	ldw	r2,224(sp)
  801dd0:	d9003417 	ldw	r4,208(sp)
  801dd4:	d9403817 	ldw	r5,224(sp)
  801dd8:	1887883a 	add	r3,r3,r2
  801ddc:	d8801f17 	ldw	r2,124(sp)
  801de0:	41000015 	stw	r4,0(r8)
  801de4:	41400115 	stw	r5,4(r8)
  801de8:	10800044 	addi	r2,r2,1
  801dec:	d8c02015 	stw	r3,128(sp)
  801df0:	d8801f15 	stw	r2,124(sp)
  801df4:	010001c4 	movi	r4,7
  801df8:	2082af16 	blt	r4,r2,8028b8 <___svfprintf_internal_r+0x19b0>
  801dfc:	42000204 	addi	r8,r8,8
  801e00:	d8803317 	ldw	r2,204(sp)
  801e04:	143fffc4 	addi	r16,r2,-1
  801e08:	043ea30e 	bge	zero,r16,801898 <__alt_data_end+0xff801898>
  801e0c:	04400404 	movi	r17,16
  801e10:	d8801f17 	ldw	r2,124(sp)
  801e14:	8c00860e 	bge	r17,r16,802030 <___svfprintf_internal_r+0x1128>
  801e18:	01402074 	movhi	r5,129
  801e1c:	297e4b84 	addi	r5,r5,-1746
  801e20:	d9402c15 	stw	r5,176(sp)
  801e24:	058001c4 	movi	r22,7
  801e28:	dd002d17 	ldw	r20,180(sp)
  801e2c:	00000306 	br	801e3c <___svfprintf_internal_r+0xf34>
  801e30:	42000204 	addi	r8,r8,8
  801e34:	843ffc04 	addi	r16,r16,-16
  801e38:	8c00800e 	bge	r17,r16,80203c <___svfprintf_internal_r+0x1134>
  801e3c:	18c00404 	addi	r3,r3,16
  801e40:	10800044 	addi	r2,r2,1
  801e44:	45400015 	stw	r21,0(r8)
  801e48:	44400115 	stw	r17,4(r8)
  801e4c:	d8c02015 	stw	r3,128(sp)
  801e50:	d8801f15 	stw	r2,124(sp)
  801e54:	b0bff60e 	bge	r22,r2,801e30 <__alt_data_end+0xff801e30>
  801e58:	d9801e04 	addi	r6,sp,120
  801e5c:	a00b883a 	mov	r5,r20
  801e60:	9809883a 	mov	r4,r19
  801e64:	08064500 	call	806450 <__ssprint_r>
  801e68:	103d0e1e 	bne	r2,zero,8012a4 <__alt_data_end+0xff8012a4>
  801e6c:	d8c02017 	ldw	r3,128(sp)
  801e70:	d8801f17 	ldw	r2,124(sp)
  801e74:	da000404 	addi	r8,sp,16
  801e78:	003fee06 	br	801e34 <__alt_data_end+0xff801e34>
  801e7c:	d9403117 	ldw	r5,196(sp)
  801e80:	d8802917 	ldw	r2,164(sp)
  801e84:	28adc83a 	sub	r22,r5,r2
  801e88:	05be430e 	bge	zero,r22,801798 <__alt_data_end+0xff801798>
  801e8c:	07000404 	movi	fp,16
  801e90:	d8801f17 	ldw	r2,124(sp)
  801e94:	e583a20e 	bge	fp,r22,802d20 <___svfprintf_internal_r+0x1e18>
  801e98:	01402074 	movhi	r5,129
  801e9c:	297e4b84 	addi	r5,r5,-1746
  801ea0:	dc403015 	stw	r17,192(sp)
  801ea4:	d9402c15 	stw	r5,176(sp)
  801ea8:	b023883a 	mov	r17,r22
  801eac:	050001c4 	movi	r20,7
  801eb0:	902d883a 	mov	r22,r18
  801eb4:	8025883a 	mov	r18,r16
  801eb8:	dc002d17 	ldw	r16,180(sp)
  801ebc:	00000306 	br	801ecc <___svfprintf_internal_r+0xfc4>
  801ec0:	8c7ffc04 	addi	r17,r17,-16
  801ec4:	42000204 	addi	r8,r8,8
  801ec8:	e440110e 	bge	fp,r17,801f10 <___svfprintf_internal_r+0x1008>
  801ecc:	18c00404 	addi	r3,r3,16
  801ed0:	10800044 	addi	r2,r2,1
  801ed4:	45400015 	stw	r21,0(r8)
  801ed8:	47000115 	stw	fp,4(r8)
  801edc:	d8c02015 	stw	r3,128(sp)
  801ee0:	d8801f15 	stw	r2,124(sp)
  801ee4:	a0bff60e 	bge	r20,r2,801ec0 <__alt_data_end+0xff801ec0>
  801ee8:	d9801e04 	addi	r6,sp,120
  801eec:	800b883a 	mov	r5,r16
  801ef0:	9809883a 	mov	r4,r19
  801ef4:	08064500 	call	806450 <__ssprint_r>
  801ef8:	103cea1e 	bne	r2,zero,8012a4 <__alt_data_end+0xff8012a4>
  801efc:	8c7ffc04 	addi	r17,r17,-16
  801f00:	d8c02017 	ldw	r3,128(sp)
  801f04:	d8801f17 	ldw	r2,124(sp)
  801f08:	da000404 	addi	r8,sp,16
  801f0c:	e47fef16 	blt	fp,r17,801ecc <__alt_data_end+0xff801ecc>
  801f10:	9021883a 	mov	r16,r18
  801f14:	b025883a 	mov	r18,r22
  801f18:	882d883a 	mov	r22,r17
  801f1c:	dc403017 	ldw	r17,192(sp)
  801f20:	d9002c17 	ldw	r4,176(sp)
  801f24:	1d87883a 	add	r3,r3,r22
  801f28:	10800044 	addi	r2,r2,1
  801f2c:	41000015 	stw	r4,0(r8)
  801f30:	45800115 	stw	r22,4(r8)
  801f34:	d8c02015 	stw	r3,128(sp)
  801f38:	d8801f15 	stw	r2,124(sp)
  801f3c:	010001c4 	movi	r4,7
  801f40:	20819a16 	blt	r4,r2,8025ac <___svfprintf_internal_r+0x16a4>
  801f44:	42000204 	addi	r8,r8,8
  801f48:	003e1306 	br	801798 <__alt_data_end+0xff801798>
  801f4c:	d9403317 	ldw	r5,204(sp)
  801f50:	00800044 	movi	r2,1
  801f54:	18c00044 	addi	r3,r3,1
  801f58:	1141710e 	bge	r2,r5,802520 <___svfprintf_internal_r+0x1618>
  801f5c:	dc401f17 	ldw	r17,124(sp)
  801f60:	00800044 	movi	r2,1
  801f64:	40800115 	stw	r2,4(r8)
  801f68:	8c400044 	addi	r17,r17,1
  801f6c:	44000015 	stw	r16,0(r8)
  801f70:	d8c02015 	stw	r3,128(sp)
  801f74:	dc401f15 	stw	r17,124(sp)
  801f78:	008001c4 	movi	r2,7
  801f7c:	14417416 	blt	r2,r17,802550 <___svfprintf_internal_r+0x1648>
  801f80:	42000204 	addi	r8,r8,8
  801f84:	d8803817 	ldw	r2,224(sp)
  801f88:	d9003417 	ldw	r4,208(sp)
  801f8c:	8c400044 	addi	r17,r17,1
  801f90:	10c7883a 	add	r3,r2,r3
  801f94:	40800115 	stw	r2,4(r8)
  801f98:	41000015 	stw	r4,0(r8)
  801f9c:	d8c02015 	stw	r3,128(sp)
  801fa0:	dc401f15 	stw	r17,124(sp)
  801fa4:	008001c4 	movi	r2,7
  801fa8:	14417216 	blt	r2,r17,802574 <___svfprintf_internal_r+0x166c>
  801fac:	45800204 	addi	r22,r8,8
  801fb0:	d9003617 	ldw	r4,216(sp)
  801fb4:	d9403717 	ldw	r5,220(sp)
  801fb8:	000d883a 	mov	r6,zero
  801fbc:	000f883a 	mov	r7,zero
  801fc0:	d8c03d15 	stw	r3,244(sp)
  801fc4:	080a1740 	call	80a174 <__eqdf2>
  801fc8:	d8c03d17 	ldw	r3,244(sp)
  801fcc:	1000b326 	beq	r2,zero,80229c <___svfprintf_internal_r+0x1394>
  801fd0:	d9403317 	ldw	r5,204(sp)
  801fd4:	84000044 	addi	r16,r16,1
  801fd8:	8c400044 	addi	r17,r17,1
  801fdc:	28bfffc4 	addi	r2,r5,-1
  801fe0:	1887883a 	add	r3,r3,r2
  801fe4:	b0800115 	stw	r2,4(r22)
  801fe8:	b4000015 	stw	r16,0(r22)
  801fec:	d8c02015 	stw	r3,128(sp)
  801ff0:	dc401f15 	stw	r17,124(sp)
  801ff4:	008001c4 	movi	r2,7
  801ff8:	1440d216 	blt	r2,r17,802344 <___svfprintf_internal_r+0x143c>
  801ffc:	b5800204 	addi	r22,r22,8
  802000:	d9003b17 	ldw	r4,236(sp)
  802004:	df0022c4 	addi	fp,sp,139
  802008:	8c400044 	addi	r17,r17,1
  80200c:	20c7883a 	add	r3,r4,r3
  802010:	b7000015 	stw	fp,0(r22)
  802014:	b1000115 	stw	r4,4(r22)
  802018:	d8c02015 	stw	r3,128(sp)
  80201c:	dc401f15 	stw	r17,124(sp)
  802020:	008001c4 	movi	r2,7
  802024:	14400e16 	blt	r2,r17,802060 <___svfprintf_internal_r+0x1158>
  802028:	b2000204 	addi	r8,r22,8
  80202c:	003e1a06 	br	801898 <__alt_data_end+0xff801898>
  802030:	01002074 	movhi	r4,129
  802034:	213e4b84 	addi	r4,r4,-1746
  802038:	d9002c15 	stw	r4,176(sp)
  80203c:	d9002c17 	ldw	r4,176(sp)
  802040:	1c07883a 	add	r3,r3,r16
  802044:	44000115 	stw	r16,4(r8)
  802048:	41000015 	stw	r4,0(r8)
  80204c:	10800044 	addi	r2,r2,1
  802050:	d8c02015 	stw	r3,128(sp)
  802054:	d8801f15 	stw	r2,124(sp)
  802058:	010001c4 	movi	r4,7
  80205c:	20be0d0e 	bge	r4,r2,801894 <__alt_data_end+0xff801894>
  802060:	d9402d17 	ldw	r5,180(sp)
  802064:	d9801e04 	addi	r6,sp,120
  802068:	9809883a 	mov	r4,r19
  80206c:	08064500 	call	806450 <__ssprint_r>
  802070:	103c8c1e 	bne	r2,zero,8012a4 <__alt_data_end+0xff8012a4>
  802074:	d8c02017 	ldw	r3,128(sp)
  802078:	da000404 	addi	r8,sp,16
  80207c:	003e0606 	br	801898 <__alt_data_end+0xff801898>
  802080:	d9402d17 	ldw	r5,180(sp)
  802084:	d9801e04 	addi	r6,sp,120
  802088:	9809883a 	mov	r4,r19
  80208c:	08064500 	call	806450 <__ssprint_r>
  802090:	103e3d26 	beq	r2,zero,801988 <__alt_data_end+0xff801988>
  802094:	003c8306 	br	8012a4 <__alt_data_end+0xff8012a4>
  802098:	d9402d17 	ldw	r5,180(sp)
  80209c:	d9801e04 	addi	r6,sp,120
  8020a0:	9809883a 	mov	r4,r19
  8020a4:	08064500 	call	806450 <__ssprint_r>
  8020a8:	103c7e1e 	bne	r2,zero,8012a4 <__alt_data_end+0xff8012a4>
  8020ac:	d8c02017 	ldw	r3,128(sp)
  8020b0:	da000404 	addi	r8,sp,16
  8020b4:	003deb06 	br	801864 <__alt_data_end+0xff801864>
  8020b8:	d9402d17 	ldw	r5,180(sp)
  8020bc:	d9801e04 	addi	r6,sp,120
  8020c0:	9809883a 	mov	r4,r19
  8020c4:	08064500 	call	806450 <__ssprint_r>
  8020c8:	103c761e 	bne	r2,zero,8012a4 <__alt_data_end+0xff8012a4>
  8020cc:	d8c02017 	ldw	r3,128(sp)
  8020d0:	da000404 	addi	r8,sp,16
  8020d4:	003d9f06 	br	801754 <__alt_data_end+0xff801754>
  8020d8:	d9402d17 	ldw	r5,180(sp)
  8020dc:	d9801e04 	addi	r6,sp,120
  8020e0:	9809883a 	mov	r4,r19
  8020e4:	08064500 	call	806450 <__ssprint_r>
  8020e8:	103c6e1e 	bne	r2,zero,8012a4 <__alt_data_end+0xff8012a4>
  8020ec:	d8c02017 	ldw	r3,128(sp)
  8020f0:	da000404 	addi	r8,sp,16
  8020f4:	003da506 	br	80178c <__alt_data_end+0xff80178c>
  8020f8:	d9402a17 	ldw	r5,168(sp)
  8020fc:	d8002785 	stb	zero,158(sp)
  802100:	283f0816 	blt	r5,zero,801d24 <__alt_data_end+0xff801d24>
  802104:	00ffdfc4 	movi	r3,-129
  802108:	a584b03a 	or	r2,r20,r22
  80210c:	90e4703a 	and	r18,r18,r3
  802110:	103c5126 	beq	r2,zero,801258 <__alt_data_end+0xff801258>
  802114:	0039883a 	mov	fp,zero
  802118:	003e5a06 	br	801a84 <__alt_data_end+0xff801a84>
  80211c:	9080040c 	andi	r2,r18,16
  802120:	10013d26 	beq	r2,zero,802618 <___svfprintf_internal_r+0x1710>
  802124:	d8c02e17 	ldw	r3,184(sp)
  802128:	d9002a17 	ldw	r4,168(sp)
  80212c:	d8002785 	stb	zero,158(sp)
  802130:	18800104 	addi	r2,r3,4
  802134:	1d000017 	ldw	r20,0(r3)
  802138:	002d883a 	mov	r22,zero
  80213c:	20013f16 	blt	r4,zero,80263c <___svfprintf_internal_r+0x1734>
  802140:	00ffdfc4 	movi	r3,-129
  802144:	d8802e15 	stw	r2,184(sp)
  802148:	90e4703a 	and	r18,r18,r3
  80214c:	a03d0926 	beq	r20,zero,801574 <__alt_data_end+0xff801574>
  802150:	0039883a 	mov	fp,zero
  802154:	003d0c06 	br	801588 <__alt_data_end+0xff801588>
  802158:	dc402617 	ldw	r17,152(sp)
  80215c:	0441830e 	bge	zero,r17,80276c <___svfprintf_internal_r+0x1864>
  802160:	dc403217 	ldw	r17,200(sp)
  802164:	d8803317 	ldw	r2,204(sp)
  802168:	1440010e 	bge	r2,r17,802170 <___svfprintf_internal_r+0x1268>
  80216c:	1023883a 	mov	r17,r2
  802170:	04400a0e 	bge	zero,r17,80219c <___svfprintf_internal_r+0x1294>
  802174:	d8801f17 	ldw	r2,124(sp)
  802178:	1c47883a 	add	r3,r3,r17
  80217c:	44000015 	stw	r16,0(r8)
  802180:	10800044 	addi	r2,r2,1
  802184:	44400115 	stw	r17,4(r8)
  802188:	d8c02015 	stw	r3,128(sp)
  80218c:	d8801f15 	stw	r2,124(sp)
  802190:	010001c4 	movi	r4,7
  802194:	20827516 	blt	r4,r2,802b6c <___svfprintf_internal_r+0x1c64>
  802198:	42000204 	addi	r8,r8,8
  80219c:	88027b16 	blt	r17,zero,802b8c <___svfprintf_internal_r+0x1c84>
  8021a0:	d9003217 	ldw	r4,200(sp)
  8021a4:	2463c83a 	sub	r17,r4,r17
  8021a8:	0440990e 	bge	zero,r17,802410 <___svfprintf_internal_r+0x1508>
  8021ac:	05800404 	movi	r22,16
  8021b0:	d8801f17 	ldw	r2,124(sp)
  8021b4:	b441530e 	bge	r22,r17,802704 <___svfprintf_internal_r+0x17fc>
  8021b8:	01002074 	movhi	r4,129
  8021bc:	213e4b84 	addi	r4,r4,-1746
  8021c0:	d9002c15 	stw	r4,176(sp)
  8021c4:	070001c4 	movi	fp,7
  8021c8:	dd002d17 	ldw	r20,180(sp)
  8021cc:	00000306 	br	8021dc <___svfprintf_internal_r+0x12d4>
  8021d0:	42000204 	addi	r8,r8,8
  8021d4:	8c7ffc04 	addi	r17,r17,-16
  8021d8:	b4414d0e 	bge	r22,r17,802710 <___svfprintf_internal_r+0x1808>
  8021dc:	18c00404 	addi	r3,r3,16
  8021e0:	10800044 	addi	r2,r2,1
  8021e4:	45400015 	stw	r21,0(r8)
  8021e8:	45800115 	stw	r22,4(r8)
  8021ec:	d8c02015 	stw	r3,128(sp)
  8021f0:	d8801f15 	stw	r2,124(sp)
  8021f4:	e0bff60e 	bge	fp,r2,8021d0 <__alt_data_end+0xff8021d0>
  8021f8:	d9801e04 	addi	r6,sp,120
  8021fc:	a00b883a 	mov	r5,r20
  802200:	9809883a 	mov	r4,r19
  802204:	08064500 	call	806450 <__ssprint_r>
  802208:	103c261e 	bne	r2,zero,8012a4 <__alt_data_end+0xff8012a4>
  80220c:	d8c02017 	ldw	r3,128(sp)
  802210:	d8801f17 	ldw	r2,124(sp)
  802214:	da000404 	addi	r8,sp,16
  802218:	003fee06 	br	8021d4 <__alt_data_end+0xff8021d4>
  80221c:	d9402d17 	ldw	r5,180(sp)
  802220:	d9801e04 	addi	r6,sp,120
  802224:	9809883a 	mov	r4,r19
  802228:	08064500 	call	806450 <__ssprint_r>
  80222c:	103c1d1e 	bne	r2,zero,8012a4 <__alt_data_end+0xff8012a4>
  802230:	d8c02017 	ldw	r3,128(sp)
  802234:	df002787 	ldb	fp,158(sp)
  802238:	da000404 	addi	r8,sp,16
  80223c:	003d3806 	br	801720 <__alt_data_end+0xff801720>
  802240:	9080040c 	andi	r2,r18,16
  802244:	10005c26 	beq	r2,zero,8023b8 <___svfprintf_internal_r+0x14b0>
  802248:	d8c02e17 	ldw	r3,184(sp)
  80224c:	d9002a17 	ldw	r4,168(sp)
  802250:	d8002785 	stb	zero,158(sp)
  802254:	18800104 	addi	r2,r3,4
  802258:	1d000017 	ldw	r20,0(r3)
  80225c:	002d883a 	mov	r22,zero
  802260:	20005e16 	blt	r4,zero,8023dc <___svfprintf_internal_r+0x14d4>
  802264:	00ffdfc4 	movi	r3,-129
  802268:	d8802e15 	stw	r2,184(sp)
  80226c:	90e4703a 	and	r18,r18,r3
  802270:	0039883a 	mov	fp,zero
  802274:	a03ddf26 	beq	r20,zero,8019f4 <__alt_data_end+0xff8019f4>
  802278:	00800244 	movi	r2,9
  80227c:	153c8e36 	bltu	r2,r20,8014b8 <__alt_data_end+0xff8014b8>
  802280:	a5000c04 	addi	r20,r20,48
  802284:	dc001dc4 	addi	r16,sp,119
  802288:	dd001dc5 	stb	r20,119(sp)
  80228c:	d8c02817 	ldw	r3,160(sp)
  802290:	1c07c83a 	sub	r3,r3,r16
  802294:	d8c02b15 	stw	r3,172(sp)
  802298:	003cd306 	br	8015e8 <__alt_data_end+0xff8015e8>
  80229c:	d8803317 	ldw	r2,204(sp)
  8022a0:	143fffc4 	addi	r16,r2,-1
  8022a4:	043f560e 	bge	zero,r16,802000 <__alt_data_end+0xff802000>
  8022a8:	07000404 	movi	fp,16
  8022ac:	e403530e 	bge	fp,r16,802ffc <___svfprintf_internal_r+0x20f4>
  8022b0:	01402074 	movhi	r5,129
  8022b4:	297e4b84 	addi	r5,r5,-1746
  8022b8:	d9402c15 	stw	r5,176(sp)
  8022bc:	01c001c4 	movi	r7,7
  8022c0:	dd002d17 	ldw	r20,180(sp)
  8022c4:	00000306 	br	8022d4 <___svfprintf_internal_r+0x13cc>
  8022c8:	843ffc04 	addi	r16,r16,-16
  8022cc:	b5800204 	addi	r22,r22,8
  8022d0:	e400130e 	bge	fp,r16,802320 <___svfprintf_internal_r+0x1418>
  8022d4:	18c00404 	addi	r3,r3,16
  8022d8:	8c400044 	addi	r17,r17,1
  8022dc:	b5400015 	stw	r21,0(r22)
  8022e0:	b7000115 	stw	fp,4(r22)
  8022e4:	d8c02015 	stw	r3,128(sp)
  8022e8:	dc401f15 	stw	r17,124(sp)
  8022ec:	3c7ff60e 	bge	r7,r17,8022c8 <__alt_data_end+0xff8022c8>
  8022f0:	d9801e04 	addi	r6,sp,120
  8022f4:	a00b883a 	mov	r5,r20
  8022f8:	9809883a 	mov	r4,r19
  8022fc:	d9c03d15 	stw	r7,244(sp)
  802300:	08064500 	call	806450 <__ssprint_r>
  802304:	d9c03d17 	ldw	r7,244(sp)
  802308:	103be61e 	bne	r2,zero,8012a4 <__alt_data_end+0xff8012a4>
  80230c:	843ffc04 	addi	r16,r16,-16
  802310:	d8c02017 	ldw	r3,128(sp)
  802314:	dc401f17 	ldw	r17,124(sp)
  802318:	dd800404 	addi	r22,sp,16
  80231c:	e43fed16 	blt	fp,r16,8022d4 <__alt_data_end+0xff8022d4>
  802320:	d8802c17 	ldw	r2,176(sp)
  802324:	1c07883a 	add	r3,r3,r16
  802328:	8c400044 	addi	r17,r17,1
  80232c:	b0800015 	stw	r2,0(r22)
  802330:	b4000115 	stw	r16,4(r22)
  802334:	d8c02015 	stw	r3,128(sp)
  802338:	dc401f15 	stw	r17,124(sp)
  80233c:	008001c4 	movi	r2,7
  802340:	147f2e0e 	bge	r2,r17,801ffc <__alt_data_end+0xff801ffc>
  802344:	d9402d17 	ldw	r5,180(sp)
  802348:	d9801e04 	addi	r6,sp,120
  80234c:	9809883a 	mov	r4,r19
  802350:	08064500 	call	806450 <__ssprint_r>
  802354:	103bd31e 	bne	r2,zero,8012a4 <__alt_data_end+0xff8012a4>
  802358:	d8c02017 	ldw	r3,128(sp)
  80235c:	dc401f17 	ldw	r17,124(sp)
  802360:	dd800404 	addi	r22,sp,16
  802364:	003f2606 	br	802000 <__alt_data_end+0xff802000>
  802368:	9080040c 	andi	r2,r18,16
  80236c:	1000c326 	beq	r2,zero,80267c <___svfprintf_internal_r+0x1774>
  802370:	d9402e17 	ldw	r5,184(sp)
  802374:	2d000017 	ldw	r20,0(r5)
  802378:	29400104 	addi	r5,r5,4
  80237c:	d9402e15 	stw	r5,184(sp)
  802380:	a02dd7fa 	srai	r22,r20,31
  802384:	b005883a 	mov	r2,r22
  802388:	103c430e 	bge	r2,zero,801498 <__alt_data_end+0xff801498>
  80238c:	d9402a17 	ldw	r5,168(sp)
  802390:	0529c83a 	sub	r20,zero,r20
  802394:	07000b44 	movi	fp,45
  802398:	a004c03a 	cmpne	r2,r20,zero
  80239c:	05adc83a 	sub	r22,zero,r22
  8023a0:	df002785 	stb	fp,158(sp)
  8023a4:	b0adc83a 	sub	r22,r22,r2
  8023a8:	28022e16 	blt	r5,zero,802c64 <___svfprintf_internal_r+0x1d5c>
  8023ac:	00bfdfc4 	movi	r2,-129
  8023b0:	90a4703a 	and	r18,r18,r2
  8023b4:	003c3f06 	br	8014b4 <__alt_data_end+0xff8014b4>
  8023b8:	9080100c 	andi	r2,r18,64
  8023bc:	d8002785 	stb	zero,158(sp)
  8023c0:	10012526 	beq	r2,zero,802858 <___svfprintf_internal_r+0x1950>
  8023c4:	d9402e17 	ldw	r5,184(sp)
  8023c8:	d8c02a17 	ldw	r3,168(sp)
  8023cc:	002d883a 	mov	r22,zero
  8023d0:	28800104 	addi	r2,r5,4
  8023d4:	2d00000b 	ldhu	r20,0(r5)
  8023d8:	183fa20e 	bge	r3,zero,802264 <__alt_data_end+0xff802264>
  8023dc:	d8802e15 	stw	r2,184(sp)
  8023e0:	0039883a 	mov	fp,zero
  8023e4:	a584b03a 	or	r2,r20,r22
  8023e8:	103c321e 	bne	r2,zero,8014b4 <__alt_data_end+0xff8014b4>
  8023ec:	00800044 	movi	r2,1
  8023f0:	003e5006 	br	801d34 <__alt_data_end+0xff801d34>
  8023f4:	d9402d17 	ldw	r5,180(sp)
  8023f8:	d9801e04 	addi	r6,sp,120
  8023fc:	9809883a 	mov	r4,r19
  802400:	08064500 	call	806450 <__ssprint_r>
  802404:	103ba71e 	bne	r2,zero,8012a4 <__alt_data_end+0xff8012a4>
  802408:	d8c02017 	ldw	r3,128(sp)
  80240c:	da000404 	addi	r8,sp,16
  802410:	d9003217 	ldw	r4,200(sp)
  802414:	d8802617 	ldw	r2,152(sp)
  802418:	d9403317 	ldw	r5,204(sp)
  80241c:	8123883a 	add	r17,r16,r4
  802420:	11400216 	blt	r2,r5,80242c <___svfprintf_internal_r+0x1524>
  802424:	9100004c 	andi	r4,r18,1
  802428:	20000d26 	beq	r4,zero,802460 <___svfprintf_internal_r+0x1558>
  80242c:	d9003817 	ldw	r4,224(sp)
  802430:	d9403417 	ldw	r5,208(sp)
  802434:	1907883a 	add	r3,r3,r4
  802438:	d9001f17 	ldw	r4,124(sp)
  80243c:	41400015 	stw	r5,0(r8)
  802440:	d9403817 	ldw	r5,224(sp)
  802444:	21000044 	addi	r4,r4,1
  802448:	d8c02015 	stw	r3,128(sp)
  80244c:	41400115 	stw	r5,4(r8)
  802450:	d9001f15 	stw	r4,124(sp)
  802454:	014001c4 	movi	r5,7
  802458:	2901dc16 	blt	r5,r4,802bcc <___svfprintf_internal_r+0x1cc4>
  80245c:	42000204 	addi	r8,r8,8
  802460:	d9003317 	ldw	r4,204(sp)
  802464:	8121883a 	add	r16,r16,r4
  802468:	2085c83a 	sub	r2,r4,r2
  80246c:	8461c83a 	sub	r16,r16,r17
  802470:	1400010e 	bge	r2,r16,802478 <___svfprintf_internal_r+0x1570>
  802474:	1021883a 	mov	r16,r2
  802478:	04000a0e 	bge	zero,r16,8024a4 <___svfprintf_internal_r+0x159c>
  80247c:	d9001f17 	ldw	r4,124(sp)
  802480:	1c07883a 	add	r3,r3,r16
  802484:	44400015 	stw	r17,0(r8)
  802488:	21000044 	addi	r4,r4,1
  80248c:	44000115 	stw	r16,4(r8)
  802490:	d8c02015 	stw	r3,128(sp)
  802494:	d9001f15 	stw	r4,124(sp)
  802498:	014001c4 	movi	r5,7
  80249c:	2901e616 	blt	r5,r4,802c38 <___svfprintf_internal_r+0x1d30>
  8024a0:	42000204 	addi	r8,r8,8
  8024a4:	8001f616 	blt	r16,zero,802c80 <___svfprintf_internal_r+0x1d78>
  8024a8:	1421c83a 	sub	r16,r2,r16
  8024ac:	043cfa0e 	bge	zero,r16,801898 <__alt_data_end+0xff801898>
  8024b0:	04400404 	movi	r17,16
  8024b4:	d8801f17 	ldw	r2,124(sp)
  8024b8:	8c3edd0e 	bge	r17,r16,802030 <__alt_data_end+0xff802030>
  8024bc:	01402074 	movhi	r5,129
  8024c0:	297e4b84 	addi	r5,r5,-1746
  8024c4:	d9402c15 	stw	r5,176(sp)
  8024c8:	058001c4 	movi	r22,7
  8024cc:	dd002d17 	ldw	r20,180(sp)
  8024d0:	00000306 	br	8024e0 <___svfprintf_internal_r+0x15d8>
  8024d4:	42000204 	addi	r8,r8,8
  8024d8:	843ffc04 	addi	r16,r16,-16
  8024dc:	8c3ed70e 	bge	r17,r16,80203c <__alt_data_end+0xff80203c>
  8024e0:	18c00404 	addi	r3,r3,16
  8024e4:	10800044 	addi	r2,r2,1
  8024e8:	45400015 	stw	r21,0(r8)
  8024ec:	44400115 	stw	r17,4(r8)
  8024f0:	d8c02015 	stw	r3,128(sp)
  8024f4:	d8801f15 	stw	r2,124(sp)
  8024f8:	b0bff60e 	bge	r22,r2,8024d4 <__alt_data_end+0xff8024d4>
  8024fc:	d9801e04 	addi	r6,sp,120
  802500:	a00b883a 	mov	r5,r20
  802504:	9809883a 	mov	r4,r19
  802508:	08064500 	call	806450 <__ssprint_r>
  80250c:	103b651e 	bne	r2,zero,8012a4 <__alt_data_end+0xff8012a4>
  802510:	d8c02017 	ldw	r3,128(sp)
  802514:	d8801f17 	ldw	r2,124(sp)
  802518:	da000404 	addi	r8,sp,16
  80251c:	003fee06 	br	8024d8 <__alt_data_end+0xff8024d8>
  802520:	9088703a 	and	r4,r18,r2
  802524:	203e8d1e 	bne	r4,zero,801f5c <__alt_data_end+0xff801f5c>
  802528:	dc401f17 	ldw	r17,124(sp)
  80252c:	40800115 	stw	r2,4(r8)
  802530:	44000015 	stw	r16,0(r8)
  802534:	8c400044 	addi	r17,r17,1
  802538:	d8c02015 	stw	r3,128(sp)
  80253c:	dc401f15 	stw	r17,124(sp)
  802540:	008001c4 	movi	r2,7
  802544:	147f7f16 	blt	r2,r17,802344 <__alt_data_end+0xff802344>
  802548:	45800204 	addi	r22,r8,8
  80254c:	003eac06 	br	802000 <__alt_data_end+0xff802000>
  802550:	d9402d17 	ldw	r5,180(sp)
  802554:	d9801e04 	addi	r6,sp,120
  802558:	9809883a 	mov	r4,r19
  80255c:	08064500 	call	806450 <__ssprint_r>
  802560:	103b501e 	bne	r2,zero,8012a4 <__alt_data_end+0xff8012a4>
  802564:	d8c02017 	ldw	r3,128(sp)
  802568:	dc401f17 	ldw	r17,124(sp)
  80256c:	da000404 	addi	r8,sp,16
  802570:	003e8406 	br	801f84 <__alt_data_end+0xff801f84>
  802574:	d9402d17 	ldw	r5,180(sp)
  802578:	d9801e04 	addi	r6,sp,120
  80257c:	9809883a 	mov	r4,r19
  802580:	08064500 	call	806450 <__ssprint_r>
  802584:	103b471e 	bne	r2,zero,8012a4 <__alt_data_end+0xff8012a4>
  802588:	d8c02017 	ldw	r3,128(sp)
  80258c:	dc401f17 	ldw	r17,124(sp)
  802590:	dd800404 	addi	r22,sp,16
  802594:	003e8606 	br	801fb0 <__alt_data_end+0xff801fb0>
  802598:	0029883a 	mov	r20,zero
  80259c:	a5000c04 	addi	r20,r20,48
  8025a0:	dc001dc4 	addi	r16,sp,119
  8025a4:	dd001dc5 	stb	r20,119(sp)
  8025a8:	003f3806 	br	80228c <__alt_data_end+0xff80228c>
  8025ac:	d9402d17 	ldw	r5,180(sp)
  8025b0:	d9801e04 	addi	r6,sp,120
  8025b4:	9809883a 	mov	r4,r19
  8025b8:	08064500 	call	806450 <__ssprint_r>
  8025bc:	103b391e 	bne	r2,zero,8012a4 <__alt_data_end+0xff8012a4>
  8025c0:	d8c02017 	ldw	r3,128(sp)
  8025c4:	da000404 	addi	r8,sp,16
  8025c8:	003c7306 	br	801798 <__alt_data_end+0xff801798>
  8025cc:	d9003617 	ldw	r4,216(sp)
  8025d0:	d9403717 	ldw	r5,220(sp)
  8025d4:	da003e15 	stw	r8,248(sp)
  8025d8:	08062680 	call	806268 <__fpclassifyd>
  8025dc:	da003e17 	ldw	r8,248(sp)
  8025e0:	1000bd1e 	bne	r2,zero,8028d8 <___svfprintf_internal_r+0x19d0>
  8025e4:	008011c4 	movi	r2,71
  8025e8:	14411e0e 	bge	r2,r17,802a64 <___svfprintf_internal_r+0x1b5c>
  8025ec:	04002074 	movhi	r16,129
  8025f0:	843e3e04 	addi	r16,r16,-1800
  8025f4:	00c000c4 	movi	r3,3
  8025f8:	00bfdfc4 	movi	r2,-129
  8025fc:	d8c02915 	stw	r3,164(sp)
  802600:	90a4703a 	and	r18,r18,r2
  802604:	df002783 	ldbu	fp,158(sp)
  802608:	d8c02b15 	stw	r3,172(sp)
  80260c:	d8002a15 	stw	zero,168(sp)
  802610:	d8003215 	stw	zero,200(sp)
  802614:	003bfa06 	br	801600 <__alt_data_end+0xff801600>
  802618:	9080100c 	andi	r2,r18,64
  80261c:	d8002785 	stb	zero,158(sp)
  802620:	10009426 	beq	r2,zero,802874 <___svfprintf_internal_r+0x196c>
  802624:	d9402e17 	ldw	r5,184(sp)
  802628:	d8c02a17 	ldw	r3,168(sp)
  80262c:	002d883a 	mov	r22,zero
  802630:	28800104 	addi	r2,r5,4
  802634:	2d00000b 	ldhu	r20,0(r5)
  802638:	183ec10e 	bge	r3,zero,802140 <__alt_data_end+0xff802140>
  80263c:	a586b03a 	or	r3,r20,r22
  802640:	d8802e15 	stw	r2,184(sp)
  802644:	183ec21e 	bne	r3,zero,802150 <__alt_data_end+0xff802150>
  802648:	0039883a 	mov	fp,zero
  80264c:	0005883a 	mov	r2,zero
  802650:	003db806 	br	801d34 <__alt_data_end+0xff801d34>
  802654:	d8c02e17 	ldw	r3,184(sp)
  802658:	d9002e17 	ldw	r4,184(sp)
  80265c:	d9402e17 	ldw	r5,184(sp)
  802660:	18c00017 	ldw	r3,0(r3)
  802664:	21000117 	ldw	r4,4(r4)
  802668:	29400204 	addi	r5,r5,8
  80266c:	d8c03615 	stw	r3,216(sp)
  802670:	d9003715 	stw	r4,220(sp)
  802674:	d9402e15 	stw	r5,184(sp)
  802678:	003b5a06 	br	8013e4 <__alt_data_end+0xff8013e4>
  80267c:	9080100c 	andi	r2,r18,64
  802680:	10010726 	beq	r2,zero,802aa0 <___svfprintf_internal_r+0x1b98>
  802684:	d8802e17 	ldw	r2,184(sp)
  802688:	1500000f 	ldh	r20,0(r2)
  80268c:	10800104 	addi	r2,r2,4
  802690:	d8802e15 	stw	r2,184(sp)
  802694:	a02dd7fa 	srai	r22,r20,31
  802698:	b005883a 	mov	r2,r22
  80269c:	003b7d06 	br	801494 <__alt_data_end+0xff801494>
  8026a0:	9080100c 	andi	r2,r18,64
  8026a4:	10010526 	beq	r2,zero,802abc <___svfprintf_internal_r+0x1bb4>
  8026a8:	d8c02e17 	ldw	r3,184(sp)
  8026ac:	002d883a 	mov	r22,zero
  8026b0:	1d00000b 	ldhu	r20,0(r3)
  8026b4:	18c00104 	addi	r3,r3,4
  8026b8:	d8c02e15 	stw	r3,184(sp)
  8026bc:	003ce206 	br	801a48 <__alt_data_end+0xff801a48>
  8026c0:	bc400007 	ldb	r17,0(r23)
  8026c4:	003a6506 	br	80105c <__alt_data_end+0xff80105c>
  8026c8:	9080040c 	andi	r2,r18,16
  8026cc:	10010126 	beq	r2,zero,802ad4 <___svfprintf_internal_r+0x1bcc>
  8026d0:	d8c02e17 	ldw	r3,184(sp)
  8026d4:	d9002f17 	ldw	r4,188(sp)
  8026d8:	18800017 	ldw	r2,0(r3)
  8026dc:	18c00104 	addi	r3,r3,4
  8026e0:	d8c02e15 	stw	r3,184(sp)
  8026e4:	11000015 	stw	r4,0(r2)
  8026e8:	003a3206 	br	800fb4 <__alt_data_end+0xff800fb4>
  8026ec:	d9002a17 	ldw	r4,168(sp)
  8026f0:	d8002785 	stb	zero,158(sp)
  8026f4:	203d8d16 	blt	r4,zero,801d2c <__alt_data_end+0xff801d2c>
  8026f8:	00bfdfc4 	movi	r2,-129
  8026fc:	90a4703a 	and	r18,r18,r2
  802700:	003ad506 	br	801258 <__alt_data_end+0xff801258>
  802704:	01402074 	movhi	r5,129
  802708:	297e4b84 	addi	r5,r5,-1746
  80270c:	d9402c15 	stw	r5,176(sp)
  802710:	d9402c17 	ldw	r5,176(sp)
  802714:	1c47883a 	add	r3,r3,r17
  802718:	10800044 	addi	r2,r2,1
  80271c:	41400015 	stw	r5,0(r8)
  802720:	44400115 	stw	r17,4(r8)
  802724:	d8c02015 	stw	r3,128(sp)
  802728:	d8801f15 	stw	r2,124(sp)
  80272c:	010001c4 	movi	r4,7
  802730:	20bf3016 	blt	r4,r2,8023f4 <__alt_data_end+0xff8023f4>
  802734:	42000204 	addi	r8,r8,8
  802738:	003f3506 	br	802410 <__alt_data_end+0xff802410>
  80273c:	01002074 	movhi	r4,129
  802740:	213e4b84 	addi	r4,r4,-1746
  802744:	d9002c15 	stw	r4,176(sp)
  802748:	003c3c06 	br	80183c <__alt_data_end+0xff80183c>
  80274c:	d9402d17 	ldw	r5,180(sp)
  802750:	d9801e04 	addi	r6,sp,120
  802754:	9809883a 	mov	r4,r19
  802758:	08064500 	call	806450 <__ssprint_r>
  80275c:	103ad11e 	bne	r2,zero,8012a4 <__alt_data_end+0xff8012a4>
  802760:	d8c02017 	ldw	r3,128(sp)
  802764:	da000404 	addi	r8,sp,16
  802768:	003d9306 	br	801db8 <__alt_data_end+0xff801db8>
  80276c:	d8801f17 	ldw	r2,124(sp)
  802770:	01402074 	movhi	r5,129
  802774:	01000044 	movi	r4,1
  802778:	18c00044 	addi	r3,r3,1
  80277c:	10800044 	addi	r2,r2,1
  802780:	297e4b04 	addi	r5,r5,-1748
  802784:	41000115 	stw	r4,4(r8)
  802788:	41400015 	stw	r5,0(r8)
  80278c:	d8c02015 	stw	r3,128(sp)
  802790:	d8801f15 	stw	r2,124(sp)
  802794:	010001c4 	movi	r4,7
  802798:	2080b516 	blt	r4,r2,802a70 <___svfprintf_internal_r+0x1b68>
  80279c:	42000204 	addi	r8,r8,8
  8027a0:	8800041e 	bne	r17,zero,8027b4 <___svfprintf_internal_r+0x18ac>
  8027a4:	d8803317 	ldw	r2,204(sp)
  8027a8:	1000021e 	bne	r2,zero,8027b4 <___svfprintf_internal_r+0x18ac>
  8027ac:	9080004c 	andi	r2,r18,1
  8027b0:	103c3926 	beq	r2,zero,801898 <__alt_data_end+0xff801898>
  8027b4:	d9003817 	ldw	r4,224(sp)
  8027b8:	d8801f17 	ldw	r2,124(sp)
  8027bc:	d9403417 	ldw	r5,208(sp)
  8027c0:	20c7883a 	add	r3,r4,r3
  8027c4:	10800044 	addi	r2,r2,1
  8027c8:	41000115 	stw	r4,4(r8)
  8027cc:	41400015 	stw	r5,0(r8)
  8027d0:	d8c02015 	stw	r3,128(sp)
  8027d4:	d8801f15 	stw	r2,124(sp)
  8027d8:	010001c4 	movi	r4,7
  8027dc:	20818016 	blt	r4,r2,802de0 <___svfprintf_internal_r+0x1ed8>
  8027e0:	42000204 	addi	r8,r8,8
  8027e4:	0463c83a 	sub	r17,zero,r17
  8027e8:	0440cb0e 	bge	zero,r17,802b18 <___svfprintf_internal_r+0x1c10>
  8027ec:	05800404 	movi	r22,16
  8027f0:	b440e80e 	bge	r22,r17,802b94 <___svfprintf_internal_r+0x1c8c>
  8027f4:	01402074 	movhi	r5,129
  8027f8:	297e4b84 	addi	r5,r5,-1746
  8027fc:	d9402c15 	stw	r5,176(sp)
  802800:	070001c4 	movi	fp,7
  802804:	dd002d17 	ldw	r20,180(sp)
  802808:	00000306 	br	802818 <___svfprintf_internal_r+0x1910>
  80280c:	42000204 	addi	r8,r8,8
  802810:	8c7ffc04 	addi	r17,r17,-16
  802814:	b440e20e 	bge	r22,r17,802ba0 <___svfprintf_internal_r+0x1c98>
  802818:	18c00404 	addi	r3,r3,16
  80281c:	10800044 	addi	r2,r2,1
  802820:	45400015 	stw	r21,0(r8)
  802824:	45800115 	stw	r22,4(r8)
  802828:	d8c02015 	stw	r3,128(sp)
  80282c:	d8801f15 	stw	r2,124(sp)
  802830:	e0bff60e 	bge	fp,r2,80280c <__alt_data_end+0xff80280c>
  802834:	d9801e04 	addi	r6,sp,120
  802838:	a00b883a 	mov	r5,r20
  80283c:	9809883a 	mov	r4,r19
  802840:	08064500 	call	806450 <__ssprint_r>
  802844:	103a971e 	bne	r2,zero,8012a4 <__alt_data_end+0xff8012a4>
  802848:	d8c02017 	ldw	r3,128(sp)
  80284c:	d8801f17 	ldw	r2,124(sp)
  802850:	da000404 	addi	r8,sp,16
  802854:	003fee06 	br	802810 <__alt_data_end+0xff802810>
  802858:	d9002e17 	ldw	r4,184(sp)
  80285c:	d9402a17 	ldw	r5,168(sp)
  802860:	002d883a 	mov	r22,zero
  802864:	20800104 	addi	r2,r4,4
  802868:	25000017 	ldw	r20,0(r4)
  80286c:	283e7d0e 	bge	r5,zero,802264 <__alt_data_end+0xff802264>
  802870:	003eda06 	br	8023dc <__alt_data_end+0xff8023dc>
  802874:	d9002e17 	ldw	r4,184(sp)
  802878:	d9402a17 	ldw	r5,168(sp)
  80287c:	002d883a 	mov	r22,zero
  802880:	20800104 	addi	r2,r4,4
  802884:	25000017 	ldw	r20,0(r4)
  802888:	283e2d0e 	bge	r5,zero,802140 <__alt_data_end+0xff802140>
  80288c:	003f6b06 	br	80263c <__alt_data_end+0xff80263c>
  802890:	d8c02e15 	stw	r3,184(sp)
  802894:	0039883a 	mov	fp,zero
  802898:	003ed206 	br	8023e4 <__alt_data_end+0xff8023e4>
  80289c:	bc400043 	ldbu	r17,1(r23)
  8028a0:	84000814 	ori	r16,r16,32
  8028a4:	bdc00044 	addi	r23,r23,1
  8028a8:	8c403fcc 	andi	r17,r17,255
  8028ac:	8c40201c 	xori	r17,r17,128
  8028b0:	8c7fe004 	addi	r17,r17,-128
  8028b4:	0039e906 	br	80105c <__alt_data_end+0xff80105c>
  8028b8:	d9402d17 	ldw	r5,180(sp)
  8028bc:	d9801e04 	addi	r6,sp,120
  8028c0:	9809883a 	mov	r4,r19
  8028c4:	08064500 	call	806450 <__ssprint_r>
  8028c8:	103a761e 	bne	r2,zero,8012a4 <__alt_data_end+0xff8012a4>
  8028cc:	d8c02017 	ldw	r3,128(sp)
  8028d0:	da000404 	addi	r8,sp,16
  8028d4:	003d4a06 	br	801e00 <__alt_data_end+0xff801e00>
  8028d8:	d9002a17 	ldw	r4,168(sp)
  8028dc:	05bff7c4 	movi	r22,-33
  8028e0:	00bfffc4 	movi	r2,-1
  8028e4:	8dac703a 	and	r22,r17,r22
  8028e8:	20806a26 	beq	r4,r2,802a94 <___svfprintf_internal_r+0x1b8c>
  8028ec:	008011c4 	movi	r2,71
  8028f0:	b0813726 	beq	r22,r2,802dd0 <___svfprintf_internal_r+0x1ec8>
  8028f4:	d9003717 	ldw	r4,220(sp)
  8028f8:	90c04014 	ori	r3,r18,256
  8028fc:	d8c02c15 	stw	r3,176(sp)
  802900:	20015d16 	blt	r4,zero,802e78 <___svfprintf_internal_r+0x1f70>
  802904:	dd003717 	ldw	r20,220(sp)
  802908:	d8002905 	stb	zero,164(sp)
  80290c:	00801984 	movi	r2,102
  802910:	88814026 	beq	r17,r2,802e14 <___svfprintf_internal_r+0x1f0c>
  802914:	00801184 	movi	r2,70
  802918:	88817126 	beq	r17,r2,802ee0 <___svfprintf_internal_r+0x1fd8>
  80291c:	00801144 	movi	r2,69
  802920:	b0816226 	beq	r22,r2,802eac <___svfprintf_internal_r+0x1fa4>
  802924:	d8c02a17 	ldw	r3,168(sp)
  802928:	d8802104 	addi	r2,sp,132
  80292c:	d8800315 	stw	r2,12(sp)
  802930:	d9403617 	ldw	r5,216(sp)
  802934:	d8802504 	addi	r2,sp,148
  802938:	d8800215 	stw	r2,8(sp)
  80293c:	d8802604 	addi	r2,sp,152
  802940:	d8c00015 	stw	r3,0(sp)
  802944:	d8800115 	stw	r2,4(sp)
  802948:	01c00084 	movi	r7,2
  80294c:	a00d883a 	mov	r6,r20
  802950:	9809883a 	mov	r4,r19
  802954:	d8c03d15 	stw	r3,244(sp)
  802958:	da003e15 	stw	r8,248(sp)
  80295c:	08033ec0 	call	8033ec <_dtoa_r>
  802960:	1021883a 	mov	r16,r2
  802964:	008019c4 	movi	r2,103
  802968:	d8c03d17 	ldw	r3,244(sp)
  80296c:	da003e17 	ldw	r8,248(sp)
  802970:	8880e726 	beq	r17,r2,802d10 <___svfprintf_internal_r+0x1e08>
  802974:	008011c4 	movi	r2,71
  802978:	8880d426 	beq	r17,r2,802ccc <___svfprintf_internal_r+0x1dc4>
  80297c:	80f9883a 	add	fp,r16,r3
  802980:	d9003617 	ldw	r4,216(sp)
  802984:	000d883a 	mov	r6,zero
  802988:	000f883a 	mov	r7,zero
  80298c:	a00b883a 	mov	r5,r20
  802990:	da003e15 	stw	r8,248(sp)
  802994:	080a1740 	call	80a174 <__eqdf2>
  802998:	da003e17 	ldw	r8,248(sp)
  80299c:	1000e426 	beq	r2,zero,802d30 <___svfprintf_internal_r+0x1e28>
  8029a0:	d8802117 	ldw	r2,132(sp)
  8029a4:	1700062e 	bgeu	r2,fp,8029c0 <___svfprintf_internal_r+0x1ab8>
  8029a8:	01000c04 	movi	r4,48
  8029ac:	10c00044 	addi	r3,r2,1
  8029b0:	d8c02115 	stw	r3,132(sp)
  8029b4:	11000005 	stb	r4,0(r2)
  8029b8:	d8802117 	ldw	r2,132(sp)
  8029bc:	173ffb36 	bltu	r2,fp,8029ac <__alt_data_end+0xff8029ac>
  8029c0:	1405c83a 	sub	r2,r2,r16
  8029c4:	d8803315 	stw	r2,204(sp)
  8029c8:	008011c4 	movi	r2,71
  8029cc:	b080c526 	beq	r22,r2,802ce4 <___svfprintf_internal_r+0x1ddc>
  8029d0:	00801944 	movi	r2,101
  8029d4:	1441d80e 	bge	r2,r17,803138 <___svfprintf_internal_r+0x2230>
  8029d8:	d8c02617 	ldw	r3,152(sp)
  8029dc:	00801984 	movi	r2,102
  8029e0:	d8c03215 	stw	r3,200(sp)
  8029e4:	88813426 	beq	r17,r2,802eb8 <___svfprintf_internal_r+0x1fb0>
  8029e8:	d8c03217 	ldw	r3,200(sp)
  8029ec:	d9003317 	ldw	r4,204(sp)
  8029f0:	19012516 	blt	r3,r4,802e88 <___svfprintf_internal_r+0x1f80>
  8029f4:	9480004c 	andi	r18,r18,1
  8029f8:	9001841e 	bne	r18,zero,80300c <___svfprintf_internal_r+0x2104>
  8029fc:	1805883a 	mov	r2,r3
  802a00:	1801cb16 	blt	r3,zero,803130 <___svfprintf_internal_r+0x2228>
  802a04:	d8c03217 	ldw	r3,200(sp)
  802a08:	044019c4 	movi	r17,103
  802a0c:	d8c02b15 	stw	r3,172(sp)
  802a10:	df002907 	ldb	fp,164(sp)
  802a14:	e000a61e 	bne	fp,zero,802cb0 <___svfprintf_internal_r+0x1da8>
  802a18:	df002783 	ldbu	fp,158(sp)
  802a1c:	d8802915 	stw	r2,164(sp)
  802a20:	dc802c17 	ldw	r18,176(sp)
  802a24:	d8002a15 	stw	zero,168(sp)
  802a28:	003af506 	br	801600 <__alt_data_end+0xff801600>
  802a2c:	04002074 	movhi	r16,129
  802a30:	843e3b04 	addi	r16,r16,-1812
  802a34:	003a7e06 	br	801430 <__alt_data_end+0xff801430>
  802a38:	d9003917 	ldw	r4,228(sp)
  802a3c:	04001004 	movi	r16,64
  802a40:	800b883a 	mov	r5,r16
  802a44:	08005800 	call	800580 <_malloc_r>
  802a48:	d9002d17 	ldw	r4,180(sp)
  802a4c:	20800015 	stw	r2,0(r4)
  802a50:	20800415 	stw	r2,16(r4)
  802a54:	1001d026 	beq	r2,zero,803198 <___svfprintf_internal_r+0x2290>
  802a58:	d8802d17 	ldw	r2,180(sp)
  802a5c:	14000515 	stw	r16,20(r2)
  802a60:	00394406 	br	800f74 <__alt_data_end+0xff800f74>
  802a64:	04002074 	movhi	r16,129
  802a68:	843e3d04 	addi	r16,r16,-1804
  802a6c:	003ee106 	br	8025f4 <__alt_data_end+0xff8025f4>
  802a70:	d9402d17 	ldw	r5,180(sp)
  802a74:	d9801e04 	addi	r6,sp,120
  802a78:	9809883a 	mov	r4,r19
  802a7c:	08064500 	call	806450 <__ssprint_r>
  802a80:	103a081e 	bne	r2,zero,8012a4 <__alt_data_end+0xff8012a4>
  802a84:	dc402617 	ldw	r17,152(sp)
  802a88:	d8c02017 	ldw	r3,128(sp)
  802a8c:	da000404 	addi	r8,sp,16
  802a90:	003f4306 	br	8027a0 <__alt_data_end+0xff8027a0>
  802a94:	01400184 	movi	r5,6
  802a98:	d9402a15 	stw	r5,168(sp)
  802a9c:	003f9506 	br	8028f4 <__alt_data_end+0xff8028f4>
  802aa0:	d8c02e17 	ldw	r3,184(sp)
  802aa4:	1d000017 	ldw	r20,0(r3)
  802aa8:	18c00104 	addi	r3,r3,4
  802aac:	d8c02e15 	stw	r3,184(sp)
  802ab0:	a02dd7fa 	srai	r22,r20,31
  802ab4:	b005883a 	mov	r2,r22
  802ab8:	003a7606 	br	801494 <__alt_data_end+0xff801494>
  802abc:	d9002e17 	ldw	r4,184(sp)
  802ac0:	002d883a 	mov	r22,zero
  802ac4:	25000017 	ldw	r20,0(r4)
  802ac8:	21000104 	addi	r4,r4,4
  802acc:	d9002e15 	stw	r4,184(sp)
  802ad0:	003bdd06 	br	801a48 <__alt_data_end+0xff801a48>
  802ad4:	9480100c 	andi	r18,r18,64
  802ad8:	90006e26 	beq	r18,zero,802c94 <___svfprintf_internal_r+0x1d8c>
  802adc:	d9402e17 	ldw	r5,184(sp)
  802ae0:	d8c02f17 	ldw	r3,188(sp)
  802ae4:	28800017 	ldw	r2,0(r5)
  802ae8:	29400104 	addi	r5,r5,4
  802aec:	d9402e15 	stw	r5,184(sp)
  802af0:	10c0000d 	sth	r3,0(r2)
  802af4:	00392f06 	br	800fb4 <__alt_data_end+0xff800fb4>
  802af8:	d9402d17 	ldw	r5,180(sp)
  802afc:	d9801e04 	addi	r6,sp,120
  802b00:	9809883a 	mov	r4,r19
  802b04:	08064500 	call	806450 <__ssprint_r>
  802b08:	1039e61e 	bne	r2,zero,8012a4 <__alt_data_end+0xff8012a4>
  802b0c:	d8c02017 	ldw	r3,128(sp)
  802b10:	d8801f17 	ldw	r2,124(sp)
  802b14:	da000404 	addi	r8,sp,16
  802b18:	d9403317 	ldw	r5,204(sp)
  802b1c:	10800044 	addi	r2,r2,1
  802b20:	44000015 	stw	r16,0(r8)
  802b24:	28c7883a 	add	r3,r5,r3
  802b28:	003b5506 	br	801880 <__alt_data_end+0xff801880>
  802b2c:	8009883a 	mov	r4,r16
  802b30:	df003e15 	stw	fp,248(sp)
  802b34:	08063b80 	call	8063b8 <strlen>
  802b38:	d8802b15 	stw	r2,172(sp)
  802b3c:	da003e17 	ldw	r8,248(sp)
  802b40:	103c160e 	bge	r2,zero,801b9c <__alt_data_end+0xff801b9c>
  802b44:	0005883a 	mov	r2,zero
  802b48:	003c1406 	br	801b9c <__alt_data_end+0xff801b9c>
  802b4c:	00bfffc4 	movi	r2,-1
  802b50:	0039d906 	br	8012b8 <__alt_data_end+0xff8012b8>
  802b54:	01002074 	movhi	r4,129
  802b58:	213e4f84 	addi	r4,r4,-1730
  802b5c:	d9003515 	stw	r4,212(sp)
  802b60:	003ae406 	br	8016f4 <__alt_data_end+0xff8016f4>
  802b64:	013fffc4 	movi	r4,-1
  802b68:	0039fa06 	br	801354 <__alt_data_end+0xff801354>
  802b6c:	d9402d17 	ldw	r5,180(sp)
  802b70:	d9801e04 	addi	r6,sp,120
  802b74:	9809883a 	mov	r4,r19
  802b78:	08064500 	call	806450 <__ssprint_r>
  802b7c:	1039c91e 	bne	r2,zero,8012a4 <__alt_data_end+0xff8012a4>
  802b80:	d8c02017 	ldw	r3,128(sp)
  802b84:	da000404 	addi	r8,sp,16
  802b88:	003d8406 	br	80219c <__alt_data_end+0xff80219c>
  802b8c:	0023883a 	mov	r17,zero
  802b90:	003d8306 	br	8021a0 <__alt_data_end+0xff8021a0>
  802b94:	01002074 	movhi	r4,129
  802b98:	213e4b84 	addi	r4,r4,-1746
  802b9c:	d9002c15 	stw	r4,176(sp)
  802ba0:	d9002c17 	ldw	r4,176(sp)
  802ba4:	1c47883a 	add	r3,r3,r17
  802ba8:	10800044 	addi	r2,r2,1
  802bac:	41000015 	stw	r4,0(r8)
  802bb0:	44400115 	stw	r17,4(r8)
  802bb4:	d8c02015 	stw	r3,128(sp)
  802bb8:	d8801f15 	stw	r2,124(sp)
  802bbc:	010001c4 	movi	r4,7
  802bc0:	20bfcd16 	blt	r4,r2,802af8 <__alt_data_end+0xff802af8>
  802bc4:	42000204 	addi	r8,r8,8
  802bc8:	003fd306 	br	802b18 <__alt_data_end+0xff802b18>
  802bcc:	d9402d17 	ldw	r5,180(sp)
  802bd0:	d9801e04 	addi	r6,sp,120
  802bd4:	9809883a 	mov	r4,r19
  802bd8:	08064500 	call	806450 <__ssprint_r>
  802bdc:	1039b11e 	bne	r2,zero,8012a4 <__alt_data_end+0xff8012a4>
  802be0:	d8802617 	ldw	r2,152(sp)
  802be4:	d8c02017 	ldw	r3,128(sp)
  802be8:	da000404 	addi	r8,sp,16
  802bec:	003e1c06 	br	802460 <__alt_data_end+0xff802460>
  802bf0:	d8802a17 	ldw	r2,168(sp)
  802bf4:	00c00184 	movi	r3,6
  802bf8:	1880012e 	bgeu	r3,r2,802c00 <___svfprintf_internal_r+0x1cf8>
  802bfc:	1805883a 	mov	r2,r3
  802c00:	d8802b15 	stw	r2,172(sp)
  802c04:	1000f316 	blt	r2,zero,802fd4 <___svfprintf_internal_r+0x20cc>
  802c08:	04002074 	movhi	r16,129
  802c0c:	d8802915 	stw	r2,164(sp)
  802c10:	dd002e15 	stw	r20,184(sp)
  802c14:	d8002a15 	stw	zero,168(sp)
  802c18:	d8003215 	stw	zero,200(sp)
  802c1c:	843e4904 	addi	r16,r16,-1756
  802c20:	0039883a 	mov	fp,zero
  802c24:	003a7d06 	br	80161c <__alt_data_end+0xff80161c>
  802c28:	01002074 	movhi	r4,129
  802c2c:	213e4f84 	addi	r4,r4,-1730
  802c30:	d9003515 	stw	r4,212(sp)
  802c34:	003b3d06 	br	80192c <__alt_data_end+0xff80192c>
  802c38:	d9402d17 	ldw	r5,180(sp)
  802c3c:	d9801e04 	addi	r6,sp,120
  802c40:	9809883a 	mov	r4,r19
  802c44:	08064500 	call	806450 <__ssprint_r>
  802c48:	1039961e 	bne	r2,zero,8012a4 <__alt_data_end+0xff8012a4>
  802c4c:	d8802617 	ldw	r2,152(sp)
  802c50:	d9403317 	ldw	r5,204(sp)
  802c54:	d8c02017 	ldw	r3,128(sp)
  802c58:	da000404 	addi	r8,sp,16
  802c5c:	2885c83a 	sub	r2,r5,r2
  802c60:	003e1006 	br	8024a4 <__alt_data_end+0xff8024a4>
  802c64:	00800044 	movi	r2,1
  802c68:	10803fcc 	andi	r2,r2,255
  802c6c:	00c00044 	movi	r3,1
  802c70:	10fa1026 	beq	r2,r3,8014b4 <__alt_data_end+0xff8014b4>
  802c74:	00c00084 	movi	r3,2
  802c78:	10fb8226 	beq	r2,r3,801a84 <__alt_data_end+0xff801a84>
  802c7c:	003a4206 	br	801588 <__alt_data_end+0xff801588>
  802c80:	0021883a 	mov	r16,zero
  802c84:	003e0806 	br	8024a8 <__alt_data_end+0xff8024a8>
  802c88:	07000b44 	movi	fp,45
  802c8c:	df002785 	stb	fp,158(sp)
  802c90:	0039e306 	br	801420 <__alt_data_end+0xff801420>
  802c94:	d9002e17 	ldw	r4,184(sp)
  802c98:	d9402f17 	ldw	r5,188(sp)
  802c9c:	20800017 	ldw	r2,0(r4)
  802ca0:	21000104 	addi	r4,r4,4
  802ca4:	d9002e15 	stw	r4,184(sp)
  802ca8:	11400015 	stw	r5,0(r2)
  802cac:	0038c106 	br	800fb4 <__alt_data_end+0xff800fb4>
  802cb0:	00c00b44 	movi	r3,45
  802cb4:	d8c02785 	stb	r3,158(sp)
  802cb8:	d8802915 	stw	r2,164(sp)
  802cbc:	dc802c17 	ldw	r18,176(sp)
  802cc0:	d8002a15 	stw	zero,168(sp)
  802cc4:	07000b44 	movi	fp,45
  802cc8:	003a5106 	br	801610 <__alt_data_end+0xff801610>
  802ccc:	9080004c 	andi	r2,r18,1
  802cd0:	1000941e 	bne	r2,zero,802f24 <___svfprintf_internal_r+0x201c>
  802cd4:	d8802117 	ldw	r2,132(sp)
  802cd8:	1405c83a 	sub	r2,r2,r16
  802cdc:	d8803315 	stw	r2,204(sp)
  802ce0:	b441151e 	bne	r22,r17,803138 <___svfprintf_internal_r+0x2230>
  802ce4:	dd802617 	ldw	r22,152(sp)
  802ce8:	00bfff44 	movi	r2,-3
  802cec:	b0801a16 	blt	r22,r2,802d58 <___svfprintf_internal_r+0x1e50>
  802cf0:	d9402a17 	ldw	r5,168(sp)
  802cf4:	2d801816 	blt	r5,r22,802d58 <___svfprintf_internal_r+0x1e50>
  802cf8:	dd803215 	stw	r22,200(sp)
  802cfc:	003f3a06 	br	8029e8 <__alt_data_end+0xff8029e8>
  802d00:	1025883a 	mov	r18,r2
  802d04:	0039883a 	mov	fp,zero
  802d08:	00800084 	movi	r2,2
  802d0c:	003fd606 	br	802c68 <__alt_data_end+0xff802c68>
  802d10:	9080004c 	andi	r2,r18,1
  802d14:	103f191e 	bne	r2,zero,80297c <__alt_data_end+0xff80297c>
  802d18:	d8802117 	ldw	r2,132(sp)
  802d1c:	003f2806 	br	8029c0 <__alt_data_end+0xff8029c0>
  802d20:	01002074 	movhi	r4,129
  802d24:	213e4b84 	addi	r4,r4,-1746
  802d28:	d9002c15 	stw	r4,176(sp)
  802d2c:	003c7c06 	br	801f20 <__alt_data_end+0xff801f20>
  802d30:	e005883a 	mov	r2,fp
  802d34:	003f2206 	br	8029c0 <__alt_data_end+0xff8029c0>
  802d38:	d9002a17 	ldw	r4,168(sp)
  802d3c:	df002783 	ldbu	fp,158(sp)
  802d40:	dd002e15 	stw	r20,184(sp)
  802d44:	d9002915 	stw	r4,164(sp)
  802d48:	d9002b15 	stw	r4,172(sp)
  802d4c:	d8002a15 	stw	zero,168(sp)
  802d50:	d8003215 	stw	zero,200(sp)
  802d54:	003a2a06 	br	801600 <__alt_data_end+0xff801600>
  802d58:	8c7fff84 	addi	r17,r17,-2
  802d5c:	b5bfffc4 	addi	r22,r22,-1
  802d60:	dd802615 	stw	r22,152(sp)
  802d64:	dc4022c5 	stb	r17,139(sp)
  802d68:	b000c316 	blt	r22,zero,803078 <___svfprintf_internal_r+0x2170>
  802d6c:	00800ac4 	movi	r2,43
  802d70:	d8802305 	stb	r2,140(sp)
  802d74:	00800244 	movi	r2,9
  802d78:	15806e16 	blt	r2,r22,802f34 <___svfprintf_internal_r+0x202c>
  802d7c:	00800c04 	movi	r2,48
  802d80:	b5800c04 	addi	r22,r22,48
  802d84:	d8802345 	stb	r2,141(sp)
  802d88:	dd802385 	stb	r22,142(sp)
  802d8c:	d88023c4 	addi	r2,sp,143
  802d90:	df0022c4 	addi	fp,sp,139
  802d94:	d8c03317 	ldw	r3,204(sp)
  802d98:	1739c83a 	sub	fp,r2,fp
  802d9c:	d9003317 	ldw	r4,204(sp)
  802da0:	e0c7883a 	add	r3,fp,r3
  802da4:	df003b15 	stw	fp,236(sp)
  802da8:	d8c02b15 	stw	r3,172(sp)
  802dac:	00800044 	movi	r2,1
  802db0:	1100b70e 	bge	r2,r4,803090 <___svfprintf_internal_r+0x2188>
  802db4:	d8c02b17 	ldw	r3,172(sp)
  802db8:	18c00044 	addi	r3,r3,1
  802dbc:	d8c02b15 	stw	r3,172(sp)
  802dc0:	1805883a 	mov	r2,r3
  802dc4:	1800b016 	blt	r3,zero,803088 <___svfprintf_internal_r+0x2180>
  802dc8:	d8003215 	stw	zero,200(sp)
  802dcc:	003f1006 	br	802a10 <__alt_data_end+0xff802a10>
  802dd0:	d8802a17 	ldw	r2,168(sp)
  802dd4:	103ec71e 	bne	r2,zero,8028f4 <__alt_data_end+0xff8028f4>
  802dd8:	dc002a15 	stw	r16,168(sp)
  802ddc:	003ec506 	br	8028f4 <__alt_data_end+0xff8028f4>
  802de0:	d9402d17 	ldw	r5,180(sp)
  802de4:	d9801e04 	addi	r6,sp,120
  802de8:	9809883a 	mov	r4,r19
  802dec:	08064500 	call	806450 <__ssprint_r>
  802df0:	10392c1e 	bne	r2,zero,8012a4 <__alt_data_end+0xff8012a4>
  802df4:	dc402617 	ldw	r17,152(sp)
  802df8:	d8c02017 	ldw	r3,128(sp)
  802dfc:	d8801f17 	ldw	r2,124(sp)
  802e00:	da000404 	addi	r8,sp,16
  802e04:	003e7706 	br	8027e4 <__alt_data_end+0xff8027e4>
  802e08:	182f883a 	mov	r23,r3
  802e0c:	d8002a15 	stw	zero,168(sp)
  802e10:	00389306 	br	801060 <__alt_data_end+0xff801060>
  802e14:	d8c02a17 	ldw	r3,168(sp)
  802e18:	d8802104 	addi	r2,sp,132
  802e1c:	d8800315 	stw	r2,12(sp)
  802e20:	d9403617 	ldw	r5,216(sp)
  802e24:	d8802504 	addi	r2,sp,148
  802e28:	d8800215 	stw	r2,8(sp)
  802e2c:	d8802604 	addi	r2,sp,152
  802e30:	d8c00015 	stw	r3,0(sp)
  802e34:	9809883a 	mov	r4,r19
  802e38:	d8800115 	stw	r2,4(sp)
  802e3c:	01c000c4 	movi	r7,3
  802e40:	a00d883a 	mov	r6,r20
  802e44:	da003e15 	stw	r8,248(sp)
  802e48:	08033ec0 	call	8033ec <_dtoa_r>
  802e4c:	d9002a17 	ldw	r4,168(sp)
  802e50:	da003e17 	ldw	r8,248(sp)
  802e54:	1021883a 	mov	r16,r2
  802e58:	1139883a 	add	fp,r2,r4
  802e5c:	2007883a 	mov	r3,r4
  802e60:	81000007 	ldb	r4,0(r16)
  802e64:	00800c04 	movi	r2,48
  802e68:	20806f26 	beq	r4,r2,803028 <___svfprintf_internal_r+0x2120>
  802e6c:	d8c02617 	ldw	r3,152(sp)
  802e70:	e0f9883a 	add	fp,fp,r3
  802e74:	003ec206 	br	802980 <__alt_data_end+0xff802980>
  802e78:	00c00b44 	movi	r3,45
  802e7c:	2520003c 	xorhi	r20,r4,32768
  802e80:	d8c02905 	stb	r3,164(sp)
  802e84:	003ea106 	br	80290c <__alt_data_end+0xff80290c>
  802e88:	d8c03217 	ldw	r3,200(sp)
  802e8c:	00c0890e 	bge	zero,r3,8030b4 <___svfprintf_internal_r+0x21ac>
  802e90:	00800044 	movi	r2,1
  802e94:	d9003317 	ldw	r4,204(sp)
  802e98:	1105883a 	add	r2,r2,r4
  802e9c:	d8802b15 	stw	r2,172(sp)
  802ea0:	10005f16 	blt	r2,zero,803020 <___svfprintf_internal_r+0x2118>
  802ea4:	044019c4 	movi	r17,103
  802ea8:	003ed906 	br	802a10 <__alt_data_end+0xff802a10>
  802eac:	d9002a17 	ldw	r4,168(sp)
  802eb0:	20c00044 	addi	r3,r4,1
  802eb4:	003e9c06 	br	802928 <__alt_data_end+0xff802928>
  802eb8:	d9002a17 	ldw	r4,168(sp)
  802ebc:	00c0680e 	bge	zero,r3,803060 <___svfprintf_internal_r+0x2158>
  802ec0:	2000461e 	bne	r4,zero,802fdc <___svfprintf_internal_r+0x20d4>
  802ec4:	9480004c 	andi	r18,r18,1
  802ec8:	9000441e 	bne	r18,zero,802fdc <___svfprintf_internal_r+0x20d4>
  802ecc:	1805883a 	mov	r2,r3
  802ed0:	1800a116 	blt	r3,zero,803158 <___svfprintf_internal_r+0x2250>
  802ed4:	d8c03217 	ldw	r3,200(sp)
  802ed8:	d8c02b15 	stw	r3,172(sp)
  802edc:	003ecc06 	br	802a10 <__alt_data_end+0xff802a10>
  802ee0:	d9402a17 	ldw	r5,168(sp)
  802ee4:	d8802104 	addi	r2,sp,132
  802ee8:	d8800315 	stw	r2,12(sp)
  802eec:	d9400015 	stw	r5,0(sp)
  802ef0:	d8802504 	addi	r2,sp,148
  802ef4:	d9403617 	ldw	r5,216(sp)
  802ef8:	d8800215 	stw	r2,8(sp)
  802efc:	d8802604 	addi	r2,sp,152
  802f00:	d8800115 	stw	r2,4(sp)
  802f04:	01c000c4 	movi	r7,3
  802f08:	a00d883a 	mov	r6,r20
  802f0c:	9809883a 	mov	r4,r19
  802f10:	da003e15 	stw	r8,248(sp)
  802f14:	08033ec0 	call	8033ec <_dtoa_r>
  802f18:	d8c02a17 	ldw	r3,168(sp)
  802f1c:	da003e17 	ldw	r8,248(sp)
  802f20:	1021883a 	mov	r16,r2
  802f24:	00801184 	movi	r2,70
  802f28:	80f9883a 	add	fp,r16,r3
  802f2c:	88bfcc26 	beq	r17,r2,802e60 <__alt_data_end+0xff802e60>
  802f30:	003e9306 	br	802980 <__alt_data_end+0xff802980>
  802f34:	df0022c4 	addi	fp,sp,139
  802f38:	dc002a15 	stw	r16,168(sp)
  802f3c:	9829883a 	mov	r20,r19
  802f40:	e021883a 	mov	r16,fp
  802f44:	4027883a 	mov	r19,r8
  802f48:	b009883a 	mov	r4,r22
  802f4c:	01400284 	movi	r5,10
  802f50:	0808da00 	call	808da0 <__modsi3>
  802f54:	10800c04 	addi	r2,r2,48
  802f58:	843fffc4 	addi	r16,r16,-1
  802f5c:	b009883a 	mov	r4,r22
  802f60:	01400284 	movi	r5,10
  802f64:	80800005 	stb	r2,0(r16)
  802f68:	0808d1c0 	call	808d1c <__divsi3>
  802f6c:	102d883a 	mov	r22,r2
  802f70:	00800244 	movi	r2,9
  802f74:	15bff416 	blt	r2,r22,802f48 <__alt_data_end+0xff802f48>
  802f78:	9811883a 	mov	r8,r19
  802f7c:	b0800c04 	addi	r2,r22,48
  802f80:	a027883a 	mov	r19,r20
  802f84:	8029883a 	mov	r20,r16
  802f88:	a17fffc4 	addi	r5,r20,-1
  802f8c:	a0bfffc5 	stb	r2,-1(r20)
  802f90:	dc002a17 	ldw	r16,168(sp)
  802f94:	2f00782e 	bgeu	r5,fp,803178 <___svfprintf_internal_r+0x2270>
  802f98:	d9c02384 	addi	r7,sp,142
  802f9c:	3d0fc83a 	sub	r7,r7,r20
  802fa0:	d9002344 	addi	r4,sp,141
  802fa4:	e1cf883a 	add	r7,fp,r7
  802fa8:	00000106 	br	802fb0 <___svfprintf_internal_r+0x20a8>
  802fac:	28800003 	ldbu	r2,0(r5)
  802fb0:	20800005 	stb	r2,0(r4)
  802fb4:	21000044 	addi	r4,r4,1
  802fb8:	29400044 	addi	r5,r5,1
  802fbc:	21fffb1e 	bne	r4,r7,802fac <__alt_data_end+0xff802fac>
  802fc0:	d8802304 	addi	r2,sp,140
  802fc4:	1505c83a 	sub	r2,r2,r20
  802fc8:	d8c02344 	addi	r3,sp,141
  802fcc:	1885883a 	add	r2,r3,r2
  802fd0:	003f7006 	br	802d94 <__alt_data_end+0xff802d94>
  802fd4:	0005883a 	mov	r2,zero
  802fd8:	003f0b06 	br	802c08 <__alt_data_end+0xff802c08>
  802fdc:	d9002a17 	ldw	r4,168(sp)
  802fe0:	d8c03217 	ldw	r3,200(sp)
  802fe4:	20800044 	addi	r2,r4,1
  802fe8:	1885883a 	add	r2,r3,r2
  802fec:	d8802b15 	stw	r2,172(sp)
  802ff0:	103e870e 	bge	r2,zero,802a10 <__alt_data_end+0xff802a10>
  802ff4:	0005883a 	mov	r2,zero
  802ff8:	003e8506 	br	802a10 <__alt_data_end+0xff802a10>
  802ffc:	01002074 	movhi	r4,129
  803000:	213e4b84 	addi	r4,r4,-1746
  803004:	d9002c15 	stw	r4,176(sp)
  803008:	003cc506 	br	802320 <__alt_data_end+0xff802320>
  80300c:	d8c03217 	ldw	r3,200(sp)
  803010:	18c00044 	addi	r3,r3,1
  803014:	d8c02b15 	stw	r3,172(sp)
  803018:	1805883a 	mov	r2,r3
  80301c:	183fa10e 	bge	r3,zero,802ea4 <__alt_data_end+0xff802ea4>
  803020:	0005883a 	mov	r2,zero
  803024:	003f9f06 	br	802ea4 <__alt_data_end+0xff802ea4>
  803028:	d9003617 	ldw	r4,216(sp)
  80302c:	000d883a 	mov	r6,zero
  803030:	000f883a 	mov	r7,zero
  803034:	a00b883a 	mov	r5,r20
  803038:	d8c03d15 	stw	r3,244(sp)
  80303c:	da003e15 	stw	r8,248(sp)
  803040:	080a1740 	call	80a174 <__eqdf2>
  803044:	d8c03d17 	ldw	r3,244(sp)
  803048:	da003e17 	ldw	r8,248(sp)
  80304c:	103f8726 	beq	r2,zero,802e6c <__alt_data_end+0xff802e6c>
  803050:	00800044 	movi	r2,1
  803054:	10c7c83a 	sub	r3,r2,r3
  803058:	d8c02615 	stw	r3,152(sp)
  80305c:	003f8406 	br	802e70 <__alt_data_end+0xff802e70>
  803060:	20000e1e 	bne	r4,zero,80309c <___svfprintf_internal_r+0x2194>
  803064:	9480004c 	andi	r18,r18,1
  803068:	90000c1e 	bne	r18,zero,80309c <___svfprintf_internal_r+0x2194>
  80306c:	00800044 	movi	r2,1
  803070:	d8802b15 	stw	r2,172(sp)
  803074:	003e6606 	br	802a10 <__alt_data_end+0xff802a10>
  803078:	00800b44 	movi	r2,45
  80307c:	05adc83a 	sub	r22,zero,r22
  803080:	d8802305 	stb	r2,140(sp)
  803084:	003f3b06 	br	802d74 <__alt_data_end+0xff802d74>
  803088:	0005883a 	mov	r2,zero
  80308c:	003f4e06 	br	802dc8 <__alt_data_end+0xff802dc8>
  803090:	90a4703a 	and	r18,r18,r2
  803094:	903f4a26 	beq	r18,zero,802dc0 <__alt_data_end+0xff802dc0>
  803098:	003f4606 	br	802db4 <__alt_data_end+0xff802db4>
  80309c:	d8c02a17 	ldw	r3,168(sp)
  8030a0:	18c00084 	addi	r3,r3,2
  8030a4:	d8c02b15 	stw	r3,172(sp)
  8030a8:	1805883a 	mov	r2,r3
  8030ac:	183e580e 	bge	r3,zero,802a10 <__alt_data_end+0xff802a10>
  8030b0:	003fd006 	br	802ff4 <__alt_data_end+0xff802ff4>
  8030b4:	00800084 	movi	r2,2
  8030b8:	10c5c83a 	sub	r2,r2,r3
  8030bc:	003f7506 	br	802e94 <__alt_data_end+0xff802e94>
  8030c0:	d9402e17 	ldw	r5,184(sp)
  8030c4:	d9002e17 	ldw	r4,184(sp)
  8030c8:	bc400043 	ldbu	r17,1(r23)
  8030cc:	29400017 	ldw	r5,0(r5)
  8030d0:	20800104 	addi	r2,r4,4
  8030d4:	d8802e15 	stw	r2,184(sp)
  8030d8:	d9402a15 	stw	r5,168(sp)
  8030dc:	182f883a 	mov	r23,r3
  8030e0:	283df10e 	bge	r5,zero,8028a8 <__alt_data_end+0xff8028a8>
  8030e4:	8c403fcc 	andi	r17,r17,255
  8030e8:	017fffc4 	movi	r5,-1
  8030ec:	8c40201c 	xori	r17,r17,128
  8030f0:	d9402a15 	stw	r5,168(sp)
  8030f4:	8c7fe004 	addi	r17,r17,-128
  8030f8:	0037d806 	br	80105c <__alt_data_end+0xff80105c>
  8030fc:	9080004c 	andi	r2,r18,1
  803100:	0039883a 	mov	fp,zero
  803104:	10000726 	beq	r2,zero,803124 <___svfprintf_internal_r+0x221c>
  803108:	d8c02817 	ldw	r3,160(sp)
  80310c:	dc001dc4 	addi	r16,sp,119
  803110:	00800c04 	movi	r2,48
  803114:	1c07c83a 	sub	r3,r3,r16
  803118:	d8801dc5 	stb	r2,119(sp)
  80311c:	d8c02b15 	stw	r3,172(sp)
  803120:	00393106 	br	8015e8 <__alt_data_end+0xff8015e8>
  803124:	d8002b15 	stw	zero,172(sp)
  803128:	dc001e04 	addi	r16,sp,120
  80312c:	00392e06 	br	8015e8 <__alt_data_end+0xff8015e8>
  803130:	0005883a 	mov	r2,zero
  803134:	003e3306 	br	802a04 <__alt_data_end+0xff802a04>
  803138:	dd802617 	ldw	r22,152(sp)
  80313c:	003f0706 	br	802d5c <__alt_data_end+0xff802d5c>
  803140:	d8c02b03 	ldbu	r3,172(sp)
  803144:	d8c02785 	stb	r3,158(sp)
  803148:	003a3506 	br	801a20 <__alt_data_end+0xff801a20>
  80314c:	d8c02b03 	ldbu	r3,172(sp)
  803150:	d8c02785 	stb	r3,158(sp)
  803154:	003a1706 	br	8019b4 <__alt_data_end+0xff8019b4>
  803158:	0005883a 	mov	r2,zero
  80315c:	003f5d06 	br	802ed4 <__alt_data_end+0xff802ed4>
  803160:	d8c02b03 	ldbu	r3,172(sp)
  803164:	d8c02785 	stb	r3,158(sp)
  803168:	0038f306 	br	801538 <__alt_data_end+0xff801538>
  80316c:	d8c02b03 	ldbu	r3,172(sp)
  803170:	d8c02785 	stb	r3,158(sp)
  803174:	0038be06 	br	801470 <__alt_data_end+0xff801470>
  803178:	d8802344 	addi	r2,sp,141
  80317c:	003f0506 	br	802d94 <__alt_data_end+0xff802d94>
  803180:	d8c02b03 	ldbu	r3,172(sp)
  803184:	d8c02785 	stb	r3,158(sp)
  803188:	00388b06 	br	8013b8 <__alt_data_end+0xff8013b8>
  80318c:	d8c02b03 	ldbu	r3,172(sp)
  803190:	d8c02785 	stb	r3,158(sp)
  803194:	003ad706 	br	801cf4 <__alt_data_end+0xff801cf4>
  803198:	d9403917 	ldw	r5,228(sp)
  80319c:	00800304 	movi	r2,12
  8031a0:	28800015 	stw	r2,0(r5)
  8031a4:	00bfffc4 	movi	r2,-1
  8031a8:	00384306 	br	8012b8 <__alt_data_end+0xff8012b8>
  8031ac:	d8c02b03 	ldbu	r3,172(sp)
  8031b0:	d8c02785 	stb	r3,158(sp)
  8031b4:	003ab606 	br	801c90 <__alt_data_end+0xff801c90>
  8031b8:	d8c02b03 	ldbu	r3,172(sp)
  8031bc:	d8c02785 	stb	r3,158(sp)
  8031c0:	003a8906 	br	801be8 <__alt_data_end+0xff801be8>

008031c4 <quorem>:
  8031c4:	defff204 	addi	sp,sp,-56
  8031c8:	ddc00b15 	stw	r23,44(sp)
  8031cc:	20800417 	ldw	r2,16(r4)
  8031d0:	2dc00417 	ldw	r23,16(r5)
  8031d4:	dfc00d15 	stw	ra,52(sp)
  8031d8:	df000c15 	stw	fp,48(sp)
  8031dc:	dd800a15 	stw	r22,40(sp)
  8031e0:	dd400915 	stw	r21,36(sp)
  8031e4:	dd000815 	stw	r20,32(sp)
  8031e8:	dcc00715 	stw	r19,28(sp)
  8031ec:	dc800615 	stw	r18,24(sp)
  8031f0:	dc400515 	stw	r17,20(sp)
  8031f4:	dc000415 	stw	r16,16(sp)
  8031f8:	15c07a16 	blt	r2,r23,8033e4 <quorem+0x220>
  8031fc:	bdffffc4 	addi	r23,r23,-1
  803200:	bde9883a 	add	r20,r23,r23
  803204:	28c00504 	addi	r3,r5,20
  803208:	a529883a 	add	r20,r20,r20
  80320c:	1d39883a 	add	fp,r3,r20
  803210:	24c00504 	addi	r19,r4,20
  803214:	d9400215 	stw	r5,8(sp)
  803218:	9d29883a 	add	r20,r19,r20
  80321c:	e1400017 	ldw	r5,0(fp)
  803220:	d9000015 	stw	r4,0(sp)
  803224:	a1000017 	ldw	r4,0(r20)
  803228:	29400044 	addi	r5,r5,1
  80322c:	d8c00115 	stw	r3,4(sp)
  803230:	dd000315 	stw	r20,12(sp)
  803234:	0808e140 	call	808e14 <__udivsi3>
  803238:	1025883a 	mov	r18,r2
  80323c:	10003026 	beq	r2,zero,803300 <quorem+0x13c>
  803240:	dc400117 	ldw	r17,4(sp)
  803244:	9829883a 	mov	r20,r19
  803248:	002d883a 	mov	r22,zero
  80324c:	0021883a 	mov	r16,zero
  803250:	8d400017 	ldw	r21,0(r17)
  803254:	900b883a 	mov	r5,r18
  803258:	8c400104 	addi	r17,r17,4
  80325c:	a93fffcc 	andi	r4,r21,65535
  803260:	0808ed00 	call	808ed0 <__mulsi3>
  803264:	a808d43a 	srli	r4,r21,16
  803268:	900b883a 	mov	r5,r18
  80326c:	15ad883a 	add	r22,r2,r22
  803270:	0808ed00 	call	808ed0 <__mulsi3>
  803274:	a1000017 	ldw	r4,0(r20)
  803278:	b00cd43a 	srli	r6,r22,16
  80327c:	b0ffffcc 	andi	r3,r22,65535
  803280:	217fffcc 	andi	r5,r4,65535
  803284:	2c21883a 	add	r16,r5,r16
  803288:	80c7c83a 	sub	r3,r16,r3
  80328c:	2008d43a 	srli	r4,r4,16
  803290:	1185883a 	add	r2,r2,r6
  803294:	1821d43a 	srai	r16,r3,16
  803298:	117fffcc 	andi	r5,r2,65535
  80329c:	2149c83a 	sub	r4,r4,r5
  8032a0:	2421883a 	add	r16,r4,r16
  8032a4:	8008943a 	slli	r4,r16,16
  8032a8:	18ffffcc 	andi	r3,r3,65535
  8032ac:	102cd43a 	srli	r22,r2,16
  8032b0:	20c8b03a 	or	r4,r4,r3
  8032b4:	a1000015 	stw	r4,0(r20)
  8032b8:	8021d43a 	srai	r16,r16,16
  8032bc:	a5000104 	addi	r20,r20,4
  8032c0:	e47fe32e 	bgeu	fp,r17,803250 <__alt_data_end+0xff803250>
  8032c4:	d8c00317 	ldw	r3,12(sp)
  8032c8:	18800017 	ldw	r2,0(r3)
  8032cc:	10000c1e 	bne	r2,zero,803300 <quorem+0x13c>
  8032d0:	18bfff04 	addi	r2,r3,-4
  8032d4:	9880082e 	bgeu	r19,r2,8032f8 <quorem+0x134>
  8032d8:	18ffff17 	ldw	r3,-4(r3)
  8032dc:	18000326 	beq	r3,zero,8032ec <quorem+0x128>
  8032e0:	00000506 	br	8032f8 <quorem+0x134>
  8032e4:	10c00017 	ldw	r3,0(r2)
  8032e8:	1800031e 	bne	r3,zero,8032f8 <quorem+0x134>
  8032ec:	10bfff04 	addi	r2,r2,-4
  8032f0:	bdffffc4 	addi	r23,r23,-1
  8032f4:	98bffb36 	bltu	r19,r2,8032e4 <__alt_data_end+0xff8032e4>
  8032f8:	d8c00017 	ldw	r3,0(sp)
  8032fc:	1dc00415 	stw	r23,16(r3)
  803300:	d9400217 	ldw	r5,8(sp)
  803304:	d9000017 	ldw	r4,0(sp)
  803308:	0805b340 	call	805b34 <__mcmp>
  80330c:	10002816 	blt	r2,zero,8033b0 <quorem+0x1ec>
  803310:	dc400117 	ldw	r17,4(sp)
  803314:	94800044 	addi	r18,r18,1
  803318:	980d883a 	mov	r6,r19
  80331c:	0007883a 	mov	r3,zero
  803320:	31000017 	ldw	r4,0(r6)
  803324:	89400017 	ldw	r5,0(r17)
  803328:	31800104 	addi	r6,r6,4
  80332c:	20bfffcc 	andi	r2,r4,65535
  803330:	10c7883a 	add	r3,r2,r3
  803334:	28bfffcc 	andi	r2,r5,65535
  803338:	1885c83a 	sub	r2,r3,r2
  80333c:	280ad43a 	srli	r5,r5,16
  803340:	2008d43a 	srli	r4,r4,16
  803344:	1007d43a 	srai	r3,r2,16
  803348:	10bfffcc 	andi	r2,r2,65535
  80334c:	2149c83a 	sub	r4,r4,r5
  803350:	20c9883a 	add	r4,r4,r3
  803354:	200a943a 	slli	r5,r4,16
  803358:	8c400104 	addi	r17,r17,4
  80335c:	2007d43a 	srai	r3,r4,16
  803360:	2884b03a 	or	r2,r5,r2
  803364:	30bfff15 	stw	r2,-4(r6)
  803368:	e47fed2e 	bgeu	fp,r17,803320 <__alt_data_end+0xff803320>
  80336c:	bdc5883a 	add	r2,r23,r23
  803370:	1085883a 	add	r2,r2,r2
  803374:	9887883a 	add	r3,r19,r2
  803378:	18800017 	ldw	r2,0(r3)
  80337c:	10000c1e 	bne	r2,zero,8033b0 <quorem+0x1ec>
  803380:	18bfff04 	addi	r2,r3,-4
  803384:	9880082e 	bgeu	r19,r2,8033a8 <quorem+0x1e4>
  803388:	18ffff17 	ldw	r3,-4(r3)
  80338c:	18000326 	beq	r3,zero,80339c <quorem+0x1d8>
  803390:	00000506 	br	8033a8 <quorem+0x1e4>
  803394:	10c00017 	ldw	r3,0(r2)
  803398:	1800031e 	bne	r3,zero,8033a8 <quorem+0x1e4>
  80339c:	10bfff04 	addi	r2,r2,-4
  8033a0:	bdffffc4 	addi	r23,r23,-1
  8033a4:	98bffb36 	bltu	r19,r2,803394 <__alt_data_end+0xff803394>
  8033a8:	d8c00017 	ldw	r3,0(sp)
  8033ac:	1dc00415 	stw	r23,16(r3)
  8033b0:	9005883a 	mov	r2,r18
  8033b4:	dfc00d17 	ldw	ra,52(sp)
  8033b8:	df000c17 	ldw	fp,48(sp)
  8033bc:	ddc00b17 	ldw	r23,44(sp)
  8033c0:	dd800a17 	ldw	r22,40(sp)
  8033c4:	dd400917 	ldw	r21,36(sp)
  8033c8:	dd000817 	ldw	r20,32(sp)
  8033cc:	dcc00717 	ldw	r19,28(sp)
  8033d0:	dc800617 	ldw	r18,24(sp)
  8033d4:	dc400517 	ldw	r17,20(sp)
  8033d8:	dc000417 	ldw	r16,16(sp)
  8033dc:	dec00e04 	addi	sp,sp,56
  8033e0:	f800283a 	ret
  8033e4:	0005883a 	mov	r2,zero
  8033e8:	003ff206 	br	8033b4 <__alt_data_end+0xff8033b4>

008033ec <_dtoa_r>:
  8033ec:	20801017 	ldw	r2,64(r4)
  8033f0:	deffde04 	addi	sp,sp,-136
  8033f4:	df002015 	stw	fp,128(sp)
  8033f8:	dcc01b15 	stw	r19,108(sp)
  8033fc:	dc801a15 	stw	r18,104(sp)
  803400:	dc401915 	stw	r17,100(sp)
  803404:	dc001815 	stw	r16,96(sp)
  803408:	dfc02115 	stw	ra,132(sp)
  80340c:	ddc01f15 	stw	r23,124(sp)
  803410:	dd801e15 	stw	r22,120(sp)
  803414:	dd401d15 	stw	r21,116(sp)
  803418:	dd001c15 	stw	r20,112(sp)
  80341c:	d9c00315 	stw	r7,12(sp)
  803420:	2039883a 	mov	fp,r4
  803424:	3023883a 	mov	r17,r6
  803428:	2825883a 	mov	r18,r5
  80342c:	dc002417 	ldw	r16,144(sp)
  803430:	3027883a 	mov	r19,r6
  803434:	10000826 	beq	r2,zero,803458 <_dtoa_r+0x6c>
  803438:	21801117 	ldw	r6,68(r4)
  80343c:	00c00044 	movi	r3,1
  803440:	100b883a 	mov	r5,r2
  803444:	1986983a 	sll	r3,r3,r6
  803448:	11800115 	stw	r6,4(r2)
  80344c:	10c00215 	stw	r3,8(r2)
  803450:	08052580 	call	805258 <_Bfree>
  803454:	e0001015 	stw	zero,64(fp)
  803458:	88002e16 	blt	r17,zero,803514 <_dtoa_r+0x128>
  80345c:	80000015 	stw	zero,0(r16)
  803460:	889ffc2c 	andhi	r2,r17,32752
  803464:	00dffc34 	movhi	r3,32752
  803468:	10c01c26 	beq	r2,r3,8034dc <_dtoa_r+0xf0>
  80346c:	000d883a 	mov	r6,zero
  803470:	000f883a 	mov	r7,zero
  803474:	9009883a 	mov	r4,r18
  803478:	980b883a 	mov	r5,r19
  80347c:	080a1740 	call	80a174 <__eqdf2>
  803480:	10002b1e 	bne	r2,zero,803530 <_dtoa_r+0x144>
  803484:	d9c02317 	ldw	r7,140(sp)
  803488:	00800044 	movi	r2,1
  80348c:	38800015 	stw	r2,0(r7)
  803490:	d8802517 	ldw	r2,148(sp)
  803494:	10019e26 	beq	r2,zero,803b10 <_dtoa_r+0x724>
  803498:	d8c02517 	ldw	r3,148(sp)
  80349c:	00802074 	movhi	r2,129
  8034a0:	10be4b44 	addi	r2,r2,-1747
  8034a4:	18800015 	stw	r2,0(r3)
  8034a8:	10bfffc4 	addi	r2,r2,-1
  8034ac:	dfc02117 	ldw	ra,132(sp)
  8034b0:	df002017 	ldw	fp,128(sp)
  8034b4:	ddc01f17 	ldw	r23,124(sp)
  8034b8:	dd801e17 	ldw	r22,120(sp)
  8034bc:	dd401d17 	ldw	r21,116(sp)
  8034c0:	dd001c17 	ldw	r20,112(sp)
  8034c4:	dcc01b17 	ldw	r19,108(sp)
  8034c8:	dc801a17 	ldw	r18,104(sp)
  8034cc:	dc401917 	ldw	r17,100(sp)
  8034d0:	dc001817 	ldw	r16,96(sp)
  8034d4:	dec02204 	addi	sp,sp,136
  8034d8:	f800283a 	ret
  8034dc:	d8c02317 	ldw	r3,140(sp)
  8034e0:	0089c3c4 	movi	r2,9999
  8034e4:	18800015 	stw	r2,0(r3)
  8034e8:	90017726 	beq	r18,zero,803ac8 <_dtoa_r+0x6dc>
  8034ec:	00802074 	movhi	r2,129
  8034f0:	10be5704 	addi	r2,r2,-1700
  8034f4:	d9002517 	ldw	r4,148(sp)
  8034f8:	203fec26 	beq	r4,zero,8034ac <__alt_data_end+0xff8034ac>
  8034fc:	10c000c7 	ldb	r3,3(r2)
  803500:	1801781e 	bne	r3,zero,803ae4 <_dtoa_r+0x6f8>
  803504:	10c000c4 	addi	r3,r2,3
  803508:	d9802517 	ldw	r6,148(sp)
  80350c:	30c00015 	stw	r3,0(r6)
  803510:	003fe606 	br	8034ac <__alt_data_end+0xff8034ac>
  803514:	04e00034 	movhi	r19,32768
  803518:	9cffffc4 	addi	r19,r19,-1
  80351c:	00800044 	movi	r2,1
  803520:	8ce6703a 	and	r19,r17,r19
  803524:	80800015 	stw	r2,0(r16)
  803528:	9823883a 	mov	r17,r19
  80352c:	003fcc06 	br	803460 <__alt_data_end+0xff803460>
  803530:	d8800204 	addi	r2,sp,8
  803534:	d8800015 	stw	r2,0(sp)
  803538:	d9c00104 	addi	r7,sp,4
  80353c:	900b883a 	mov	r5,r18
  803540:	980d883a 	mov	r6,r19
  803544:	e009883a 	mov	r4,fp
  803548:	8820d53a 	srli	r16,r17,20
  80354c:	0805f000 	call	805f00 <__d2b>
  803550:	d8800915 	stw	r2,36(sp)
  803554:	8001651e 	bne	r16,zero,803aec <_dtoa_r+0x700>
  803558:	dd800217 	ldw	r22,8(sp)
  80355c:	dc000117 	ldw	r16,4(sp)
  803560:	00800804 	movi	r2,32
  803564:	b421883a 	add	r16,r22,r16
  803568:	80c10c84 	addi	r3,r16,1074
  80356c:	10c2d10e 	bge	r2,r3,8040b4 <_dtoa_r+0xcc8>
  803570:	00801004 	movi	r2,64
  803574:	81010484 	addi	r4,r16,1042
  803578:	10c7c83a 	sub	r3,r2,r3
  80357c:	9108d83a 	srl	r4,r18,r4
  803580:	88e2983a 	sll	r17,r17,r3
  803584:	2448b03a 	or	r4,r4,r17
  803588:	080b6900 	call	80b690 <__floatunsidf>
  80358c:	017f8434 	movhi	r5,65040
  803590:	01800044 	movi	r6,1
  803594:	1009883a 	mov	r4,r2
  803598:	194b883a 	add	r5,r3,r5
  80359c:	843fffc4 	addi	r16,r16,-1
  8035a0:	d9801115 	stw	r6,68(sp)
  8035a4:	000d883a 	mov	r6,zero
  8035a8:	01cffe34 	movhi	r7,16376
  8035ac:	080ac380 	call	80ac38 <__subdf3>
  8035b0:	0198dbf4 	movhi	r6,25455
  8035b4:	01cff4f4 	movhi	r7,16339
  8035b8:	3190d844 	addi	r6,r6,17249
  8035bc:	39e1e9c4 	addi	r7,r7,-30809
  8035c0:	1009883a 	mov	r4,r2
  8035c4:	180b883a 	mov	r5,r3
  8035c8:	080a3cc0 	call	80a3cc <__muldf3>
  8035cc:	01a2d874 	movhi	r6,35681
  8035d0:	01cff1f4 	movhi	r7,16327
  8035d4:	31b22cc4 	addi	r6,r6,-14157
  8035d8:	39e28a04 	addi	r7,r7,-30168
  8035dc:	180b883a 	mov	r5,r3
  8035e0:	1009883a 	mov	r4,r2
  8035e4:	0808ef80 	call	808ef8 <__adddf3>
  8035e8:	8009883a 	mov	r4,r16
  8035ec:	1029883a 	mov	r20,r2
  8035f0:	1823883a 	mov	r17,r3
  8035f4:	080b5b40 	call	80b5b4 <__floatsidf>
  8035f8:	019427f4 	movhi	r6,20639
  8035fc:	01cff4f4 	movhi	r7,16339
  803600:	319e7ec4 	addi	r6,r6,31227
  803604:	39d104c4 	addi	r7,r7,17427
  803608:	1009883a 	mov	r4,r2
  80360c:	180b883a 	mov	r5,r3
  803610:	080a3cc0 	call	80a3cc <__muldf3>
  803614:	100d883a 	mov	r6,r2
  803618:	180f883a 	mov	r7,r3
  80361c:	a009883a 	mov	r4,r20
  803620:	880b883a 	mov	r5,r17
  803624:	0808ef80 	call	808ef8 <__adddf3>
  803628:	1009883a 	mov	r4,r2
  80362c:	180b883a 	mov	r5,r3
  803630:	1029883a 	mov	r20,r2
  803634:	1823883a 	mov	r17,r3
  803638:	080b5340 	call	80b534 <__fixdfsi>
  80363c:	000d883a 	mov	r6,zero
  803640:	000f883a 	mov	r7,zero
  803644:	a009883a 	mov	r4,r20
  803648:	880b883a 	mov	r5,r17
  80364c:	d8800515 	stw	r2,20(sp)
  803650:	080a2d80 	call	80a2d8 <__ledf2>
  803654:	10028716 	blt	r2,zero,804074 <_dtoa_r+0xc88>
  803658:	d8c00517 	ldw	r3,20(sp)
  80365c:	00800584 	movi	r2,22
  803660:	10c27536 	bltu	r2,r3,804038 <_dtoa_r+0xc4c>
  803664:	180490fa 	slli	r2,r3,3
  803668:	00c02074 	movhi	r3,129
  80366c:	18fe7204 	addi	r3,r3,-1592
  803670:	1885883a 	add	r2,r3,r2
  803674:	11000017 	ldw	r4,0(r2)
  803678:	11400117 	ldw	r5,4(r2)
  80367c:	900d883a 	mov	r6,r18
  803680:	980f883a 	mov	r7,r19
  803684:	080a1fc0 	call	80a1fc <__gedf2>
  803688:	00828d0e 	bge	zero,r2,8040c0 <_dtoa_r+0xcd4>
  80368c:	d9000517 	ldw	r4,20(sp)
  803690:	d8000e15 	stw	zero,56(sp)
  803694:	213fffc4 	addi	r4,r4,-1
  803698:	d9000515 	stw	r4,20(sp)
  80369c:	b42dc83a 	sub	r22,r22,r16
  8036a0:	b5bfffc4 	addi	r22,r22,-1
  8036a4:	b0026f16 	blt	r22,zero,804064 <_dtoa_r+0xc78>
  8036a8:	d8000815 	stw	zero,32(sp)
  8036ac:	d9c00517 	ldw	r7,20(sp)
  8036b0:	38026416 	blt	r7,zero,804044 <_dtoa_r+0xc58>
  8036b4:	b1ed883a 	add	r22,r22,r7
  8036b8:	d9c00d15 	stw	r7,52(sp)
  8036bc:	d8000a15 	stw	zero,40(sp)
  8036c0:	d9800317 	ldw	r6,12(sp)
  8036c4:	00800244 	movi	r2,9
  8036c8:	11811436 	bltu	r2,r6,803b1c <_dtoa_r+0x730>
  8036cc:	00800144 	movi	r2,5
  8036d0:	1184e10e 	bge	r2,r6,804a58 <_dtoa_r+0x166c>
  8036d4:	31bfff04 	addi	r6,r6,-4
  8036d8:	d9800315 	stw	r6,12(sp)
  8036dc:	0023883a 	mov	r17,zero
  8036e0:	d9800317 	ldw	r6,12(sp)
  8036e4:	008000c4 	movi	r2,3
  8036e8:	30836726 	beq	r6,r2,804488 <_dtoa_r+0x109c>
  8036ec:	1183410e 	bge	r2,r6,8043f4 <_dtoa_r+0x1008>
  8036f0:	d9c00317 	ldw	r7,12(sp)
  8036f4:	00800104 	movi	r2,4
  8036f8:	38827c26 	beq	r7,r2,8040ec <_dtoa_r+0xd00>
  8036fc:	00800144 	movi	r2,5
  803700:	3884c41e 	bne	r7,r2,804a14 <_dtoa_r+0x1628>
  803704:	00800044 	movi	r2,1
  803708:	d8800b15 	stw	r2,44(sp)
  80370c:	d8c00517 	ldw	r3,20(sp)
  803710:	d9002217 	ldw	r4,136(sp)
  803714:	1907883a 	add	r3,r3,r4
  803718:	19800044 	addi	r6,r3,1
  80371c:	d8c00c15 	stw	r3,48(sp)
  803720:	d9800615 	stw	r6,24(sp)
  803724:	0183a40e 	bge	zero,r6,8045b8 <_dtoa_r+0x11cc>
  803728:	d9800617 	ldw	r6,24(sp)
  80372c:	3021883a 	mov	r16,r6
  803730:	e0001115 	stw	zero,68(fp)
  803734:	008005c4 	movi	r2,23
  803738:	1184c92e 	bgeu	r2,r6,804a60 <_dtoa_r+0x1674>
  80373c:	00c00044 	movi	r3,1
  803740:	00800104 	movi	r2,4
  803744:	1085883a 	add	r2,r2,r2
  803748:	11000504 	addi	r4,r2,20
  80374c:	180b883a 	mov	r5,r3
  803750:	18c00044 	addi	r3,r3,1
  803754:	313ffb2e 	bgeu	r6,r4,803744 <__alt_data_end+0xff803744>
  803758:	e1401115 	stw	r5,68(fp)
  80375c:	e009883a 	mov	r4,fp
  803760:	08051b00 	call	8051b0 <_Balloc>
  803764:	d8800715 	stw	r2,28(sp)
  803768:	e0801015 	stw	r2,64(fp)
  80376c:	00800384 	movi	r2,14
  803770:	1400f736 	bltu	r2,r16,803b50 <_dtoa_r+0x764>
  803774:	8800f626 	beq	r17,zero,803b50 <_dtoa_r+0x764>
  803778:	d9c00517 	ldw	r7,20(sp)
  80377c:	01c39a0e 	bge	zero,r7,8045e8 <_dtoa_r+0x11fc>
  803780:	388003cc 	andi	r2,r7,15
  803784:	100490fa 	slli	r2,r2,3
  803788:	382bd13a 	srai	r21,r7,4
  80378c:	00c02074 	movhi	r3,129
  803790:	18fe7204 	addi	r3,r3,-1592
  803794:	1885883a 	add	r2,r3,r2
  803798:	a8c0040c 	andi	r3,r21,16
  80379c:	12400017 	ldw	r9,0(r2)
  8037a0:	12000117 	ldw	r8,4(r2)
  8037a4:	18037926 	beq	r3,zero,80458c <_dtoa_r+0x11a0>
  8037a8:	00802074 	movhi	r2,129
  8037ac:	10be6804 	addi	r2,r2,-1632
  8037b0:	11800817 	ldw	r6,32(r2)
  8037b4:	11c00917 	ldw	r7,36(r2)
  8037b8:	9009883a 	mov	r4,r18
  8037bc:	980b883a 	mov	r5,r19
  8037c0:	da001715 	stw	r8,92(sp)
  8037c4:	da401615 	stw	r9,88(sp)
  8037c8:	08097a40 	call	8097a4 <__divdf3>
  8037cc:	da001717 	ldw	r8,92(sp)
  8037d0:	da401617 	ldw	r9,88(sp)
  8037d4:	ad4003cc 	andi	r21,r21,15
  8037d8:	040000c4 	movi	r16,3
  8037dc:	1023883a 	mov	r17,r2
  8037e0:	1829883a 	mov	r20,r3
  8037e4:	a8001126 	beq	r21,zero,80382c <_dtoa_r+0x440>
  8037e8:	05c02074 	movhi	r23,129
  8037ec:	bdfe6804 	addi	r23,r23,-1632
  8037f0:	4805883a 	mov	r2,r9
  8037f4:	4007883a 	mov	r3,r8
  8037f8:	a980004c 	andi	r6,r21,1
  8037fc:	1009883a 	mov	r4,r2
  803800:	a82bd07a 	srai	r21,r21,1
  803804:	180b883a 	mov	r5,r3
  803808:	30000426 	beq	r6,zero,80381c <_dtoa_r+0x430>
  80380c:	b9800017 	ldw	r6,0(r23)
  803810:	b9c00117 	ldw	r7,4(r23)
  803814:	84000044 	addi	r16,r16,1
  803818:	080a3cc0 	call	80a3cc <__muldf3>
  80381c:	bdc00204 	addi	r23,r23,8
  803820:	a83ff51e 	bne	r21,zero,8037f8 <__alt_data_end+0xff8037f8>
  803824:	1013883a 	mov	r9,r2
  803828:	1811883a 	mov	r8,r3
  80382c:	480d883a 	mov	r6,r9
  803830:	400f883a 	mov	r7,r8
  803834:	8809883a 	mov	r4,r17
  803838:	a00b883a 	mov	r5,r20
  80383c:	08097a40 	call	8097a4 <__divdf3>
  803840:	d8800f15 	stw	r2,60(sp)
  803844:	d8c01015 	stw	r3,64(sp)
  803848:	d8c00e17 	ldw	r3,56(sp)
  80384c:	18000626 	beq	r3,zero,803868 <_dtoa_r+0x47c>
  803850:	d9000f17 	ldw	r4,60(sp)
  803854:	d9401017 	ldw	r5,64(sp)
  803858:	000d883a 	mov	r6,zero
  80385c:	01cffc34 	movhi	r7,16368
  803860:	080a2d80 	call	80a2d8 <__ledf2>
  803864:	10040b16 	blt	r2,zero,804894 <_dtoa_r+0x14a8>
  803868:	8009883a 	mov	r4,r16
  80386c:	080b5b40 	call	80b5b4 <__floatsidf>
  803870:	d9800f17 	ldw	r6,60(sp)
  803874:	d9c01017 	ldw	r7,64(sp)
  803878:	1009883a 	mov	r4,r2
  80387c:	180b883a 	mov	r5,r3
  803880:	080a3cc0 	call	80a3cc <__muldf3>
  803884:	000d883a 	mov	r6,zero
  803888:	01d00734 	movhi	r7,16412
  80388c:	1009883a 	mov	r4,r2
  803890:	180b883a 	mov	r5,r3
  803894:	0808ef80 	call	808ef8 <__adddf3>
  803898:	1021883a 	mov	r16,r2
  80389c:	d8800617 	ldw	r2,24(sp)
  8038a0:	047f3034 	movhi	r17,64704
  8038a4:	1c63883a 	add	r17,r3,r17
  8038a8:	10031826 	beq	r2,zero,80450c <_dtoa_r+0x1120>
  8038ac:	d8c00517 	ldw	r3,20(sp)
  8038b0:	db000617 	ldw	r12,24(sp)
  8038b4:	d8c01315 	stw	r3,76(sp)
  8038b8:	d9000b17 	ldw	r4,44(sp)
  8038bc:	20038f26 	beq	r4,zero,8046fc <_dtoa_r+0x1310>
  8038c0:	60bfffc4 	addi	r2,r12,-1
  8038c4:	100490fa 	slli	r2,r2,3
  8038c8:	00c02074 	movhi	r3,129
  8038cc:	18fe7204 	addi	r3,r3,-1592
  8038d0:	1885883a 	add	r2,r3,r2
  8038d4:	11800017 	ldw	r6,0(r2)
  8038d8:	11c00117 	ldw	r7,4(r2)
  8038dc:	d8800717 	ldw	r2,28(sp)
  8038e0:	0009883a 	mov	r4,zero
  8038e4:	014ff834 	movhi	r5,16352
  8038e8:	db001615 	stw	r12,88(sp)
  8038ec:	15c00044 	addi	r23,r2,1
  8038f0:	08097a40 	call	8097a4 <__divdf3>
  8038f4:	800d883a 	mov	r6,r16
  8038f8:	880f883a 	mov	r7,r17
  8038fc:	1009883a 	mov	r4,r2
  803900:	180b883a 	mov	r5,r3
  803904:	080ac380 	call	80ac38 <__subdf3>
  803908:	d9401017 	ldw	r5,64(sp)
  80390c:	d9000f17 	ldw	r4,60(sp)
  803910:	102b883a 	mov	r21,r2
  803914:	d8c01215 	stw	r3,72(sp)
  803918:	080b5340 	call	80b534 <__fixdfsi>
  80391c:	1009883a 	mov	r4,r2
  803920:	1029883a 	mov	r20,r2
  803924:	080b5b40 	call	80b5b4 <__floatsidf>
  803928:	d9000f17 	ldw	r4,60(sp)
  80392c:	d9401017 	ldw	r5,64(sp)
  803930:	100d883a 	mov	r6,r2
  803934:	180f883a 	mov	r7,r3
  803938:	080ac380 	call	80ac38 <__subdf3>
  80393c:	1823883a 	mov	r17,r3
  803940:	d8c00717 	ldw	r3,28(sp)
  803944:	d9401217 	ldw	r5,72(sp)
  803948:	a2000c04 	addi	r8,r20,48
  80394c:	1021883a 	mov	r16,r2
  803950:	1a000005 	stb	r8,0(r3)
  803954:	800d883a 	mov	r6,r16
  803958:	880f883a 	mov	r7,r17
  80395c:	a809883a 	mov	r4,r21
  803960:	4029883a 	mov	r20,r8
  803964:	080a1fc0 	call	80a1fc <__gedf2>
  803968:	00841d16 	blt	zero,r2,8049e0 <_dtoa_r+0x15f4>
  80396c:	800d883a 	mov	r6,r16
  803970:	880f883a 	mov	r7,r17
  803974:	0009883a 	mov	r4,zero
  803978:	014ffc34 	movhi	r5,16368
  80397c:	080ac380 	call	80ac38 <__subdf3>
  803980:	d9401217 	ldw	r5,72(sp)
  803984:	100d883a 	mov	r6,r2
  803988:	180f883a 	mov	r7,r3
  80398c:	a809883a 	mov	r4,r21
  803990:	080a1fc0 	call	80a1fc <__gedf2>
  803994:	db001617 	ldw	r12,88(sp)
  803998:	00840e16 	blt	zero,r2,8049d4 <_dtoa_r+0x15e8>
  80399c:	00800044 	movi	r2,1
  8039a0:	13006b0e 	bge	r2,r12,803b50 <_dtoa_r+0x764>
  8039a4:	d9000717 	ldw	r4,28(sp)
  8039a8:	dd800f15 	stw	r22,60(sp)
  8039ac:	dcc01015 	stw	r19,64(sp)
  8039b0:	2319883a 	add	r12,r4,r12
  8039b4:	dcc01217 	ldw	r19,72(sp)
  8039b8:	602d883a 	mov	r22,r12
  8039bc:	dc801215 	stw	r18,72(sp)
  8039c0:	b825883a 	mov	r18,r23
  8039c4:	00000906 	br	8039ec <_dtoa_r+0x600>
  8039c8:	080ac380 	call	80ac38 <__subdf3>
  8039cc:	a80d883a 	mov	r6,r21
  8039d0:	980f883a 	mov	r7,r19
  8039d4:	1009883a 	mov	r4,r2
  8039d8:	180b883a 	mov	r5,r3
  8039dc:	080a2d80 	call	80a2d8 <__ledf2>
  8039e0:	1003e816 	blt	r2,zero,804984 <_dtoa_r+0x1598>
  8039e4:	b825883a 	mov	r18,r23
  8039e8:	bd83e926 	beq	r23,r22,804990 <_dtoa_r+0x15a4>
  8039ec:	a809883a 	mov	r4,r21
  8039f0:	980b883a 	mov	r5,r19
  8039f4:	000d883a 	mov	r6,zero
  8039f8:	01d00934 	movhi	r7,16420
  8039fc:	080a3cc0 	call	80a3cc <__muldf3>
  803a00:	000d883a 	mov	r6,zero
  803a04:	01d00934 	movhi	r7,16420
  803a08:	8009883a 	mov	r4,r16
  803a0c:	880b883a 	mov	r5,r17
  803a10:	102b883a 	mov	r21,r2
  803a14:	1827883a 	mov	r19,r3
  803a18:	080a3cc0 	call	80a3cc <__muldf3>
  803a1c:	180b883a 	mov	r5,r3
  803a20:	1009883a 	mov	r4,r2
  803a24:	1821883a 	mov	r16,r3
  803a28:	1023883a 	mov	r17,r2
  803a2c:	080b5340 	call	80b534 <__fixdfsi>
  803a30:	1009883a 	mov	r4,r2
  803a34:	1029883a 	mov	r20,r2
  803a38:	080b5b40 	call	80b5b4 <__floatsidf>
  803a3c:	8809883a 	mov	r4,r17
  803a40:	800b883a 	mov	r5,r16
  803a44:	100d883a 	mov	r6,r2
  803a48:	180f883a 	mov	r7,r3
  803a4c:	080ac380 	call	80ac38 <__subdf3>
  803a50:	a5000c04 	addi	r20,r20,48
  803a54:	a80d883a 	mov	r6,r21
  803a58:	980f883a 	mov	r7,r19
  803a5c:	1009883a 	mov	r4,r2
  803a60:	180b883a 	mov	r5,r3
  803a64:	95000005 	stb	r20,0(r18)
  803a68:	1021883a 	mov	r16,r2
  803a6c:	1823883a 	mov	r17,r3
  803a70:	080a2d80 	call	80a2d8 <__ledf2>
  803a74:	bdc00044 	addi	r23,r23,1
  803a78:	800d883a 	mov	r6,r16
  803a7c:	880f883a 	mov	r7,r17
  803a80:	0009883a 	mov	r4,zero
  803a84:	014ffc34 	movhi	r5,16368
  803a88:	103fcf0e 	bge	r2,zero,8039c8 <__alt_data_end+0xff8039c8>
  803a8c:	d8c01317 	ldw	r3,76(sp)
  803a90:	d8c00515 	stw	r3,20(sp)
  803a94:	d9400917 	ldw	r5,36(sp)
  803a98:	e009883a 	mov	r4,fp
  803a9c:	08052580 	call	805258 <_Bfree>
  803aa0:	d9000517 	ldw	r4,20(sp)
  803aa4:	d9802317 	ldw	r6,140(sp)
  803aa8:	d9c02517 	ldw	r7,148(sp)
  803aac:	b8000005 	stb	zero,0(r23)
  803ab0:	20800044 	addi	r2,r4,1
  803ab4:	30800015 	stw	r2,0(r6)
  803ab8:	3802aa26 	beq	r7,zero,804564 <_dtoa_r+0x1178>
  803abc:	3dc00015 	stw	r23,0(r7)
  803ac0:	d8800717 	ldw	r2,28(sp)
  803ac4:	003e7906 	br	8034ac <__alt_data_end+0xff8034ac>
  803ac8:	00800434 	movhi	r2,16
  803acc:	10bfffc4 	addi	r2,r2,-1
  803ad0:	88a2703a 	and	r17,r17,r2
  803ad4:	883e851e 	bne	r17,zero,8034ec <__alt_data_end+0xff8034ec>
  803ad8:	00802074 	movhi	r2,129
  803adc:	10be5404 	addi	r2,r2,-1712
  803ae0:	003e8406 	br	8034f4 <__alt_data_end+0xff8034f4>
  803ae4:	10c00204 	addi	r3,r2,8
  803ae8:	003e8706 	br	803508 <__alt_data_end+0xff803508>
  803aec:	01400434 	movhi	r5,16
  803af0:	297fffc4 	addi	r5,r5,-1
  803af4:	994a703a 	and	r5,r19,r5
  803af8:	9009883a 	mov	r4,r18
  803afc:	843f0044 	addi	r16,r16,-1023
  803b00:	294ffc34 	orhi	r5,r5,16368
  803b04:	dd800217 	ldw	r22,8(sp)
  803b08:	d8001115 	stw	zero,68(sp)
  803b0c:	003ea506 	br	8035a4 <__alt_data_end+0xff8035a4>
  803b10:	00802074 	movhi	r2,129
  803b14:	10be4b04 	addi	r2,r2,-1748
  803b18:	003e6406 	br	8034ac <__alt_data_end+0xff8034ac>
  803b1c:	e0001115 	stw	zero,68(fp)
  803b20:	000b883a 	mov	r5,zero
  803b24:	e009883a 	mov	r4,fp
  803b28:	08051b00 	call	8051b0 <_Balloc>
  803b2c:	01bfffc4 	movi	r6,-1
  803b30:	01c00044 	movi	r7,1
  803b34:	d8800715 	stw	r2,28(sp)
  803b38:	d9800c15 	stw	r6,48(sp)
  803b3c:	e0801015 	stw	r2,64(fp)
  803b40:	d8000315 	stw	zero,12(sp)
  803b44:	d9c00b15 	stw	r7,44(sp)
  803b48:	d9800615 	stw	r6,24(sp)
  803b4c:	d8002215 	stw	zero,136(sp)
  803b50:	d8800117 	ldw	r2,4(sp)
  803b54:	10008916 	blt	r2,zero,803d7c <_dtoa_r+0x990>
  803b58:	d9000517 	ldw	r4,20(sp)
  803b5c:	00c00384 	movi	r3,14
  803b60:	19008616 	blt	r3,r4,803d7c <_dtoa_r+0x990>
  803b64:	200490fa 	slli	r2,r4,3
  803b68:	00c02074 	movhi	r3,129
  803b6c:	d9802217 	ldw	r6,136(sp)
  803b70:	18fe7204 	addi	r3,r3,-1592
  803b74:	1885883a 	add	r2,r3,r2
  803b78:	14000017 	ldw	r16,0(r2)
  803b7c:	14400117 	ldw	r17,4(r2)
  803b80:	30016316 	blt	r6,zero,804110 <_dtoa_r+0xd24>
  803b84:	800d883a 	mov	r6,r16
  803b88:	880f883a 	mov	r7,r17
  803b8c:	9009883a 	mov	r4,r18
  803b90:	980b883a 	mov	r5,r19
  803b94:	08097a40 	call	8097a4 <__divdf3>
  803b98:	180b883a 	mov	r5,r3
  803b9c:	1009883a 	mov	r4,r2
  803ba0:	080b5340 	call	80b534 <__fixdfsi>
  803ba4:	1009883a 	mov	r4,r2
  803ba8:	102b883a 	mov	r21,r2
  803bac:	080b5b40 	call	80b5b4 <__floatsidf>
  803bb0:	800d883a 	mov	r6,r16
  803bb4:	880f883a 	mov	r7,r17
  803bb8:	1009883a 	mov	r4,r2
  803bbc:	180b883a 	mov	r5,r3
  803bc0:	080a3cc0 	call	80a3cc <__muldf3>
  803bc4:	100d883a 	mov	r6,r2
  803bc8:	180f883a 	mov	r7,r3
  803bcc:	9009883a 	mov	r4,r18
  803bd0:	980b883a 	mov	r5,r19
  803bd4:	080ac380 	call	80ac38 <__subdf3>
  803bd8:	d9c00717 	ldw	r7,28(sp)
  803bdc:	1009883a 	mov	r4,r2
  803be0:	a8800c04 	addi	r2,r21,48
  803be4:	38800005 	stb	r2,0(r7)
  803be8:	3dc00044 	addi	r23,r7,1
  803bec:	d9c00617 	ldw	r7,24(sp)
  803bf0:	01800044 	movi	r6,1
  803bf4:	180b883a 	mov	r5,r3
  803bf8:	2005883a 	mov	r2,r4
  803bfc:	39803826 	beq	r7,r6,803ce0 <_dtoa_r+0x8f4>
  803c00:	000d883a 	mov	r6,zero
  803c04:	01d00934 	movhi	r7,16420
  803c08:	080a3cc0 	call	80a3cc <__muldf3>
  803c0c:	000d883a 	mov	r6,zero
  803c10:	000f883a 	mov	r7,zero
  803c14:	1009883a 	mov	r4,r2
  803c18:	180b883a 	mov	r5,r3
  803c1c:	1025883a 	mov	r18,r2
  803c20:	1827883a 	mov	r19,r3
  803c24:	080a1740 	call	80a174 <__eqdf2>
  803c28:	103f9a26 	beq	r2,zero,803a94 <__alt_data_end+0xff803a94>
  803c2c:	d9c00617 	ldw	r7,24(sp)
  803c30:	d8c00717 	ldw	r3,28(sp)
  803c34:	b829883a 	mov	r20,r23
  803c38:	38bfffc4 	addi	r2,r7,-1
  803c3c:	18ad883a 	add	r22,r3,r2
  803c40:	00000a06 	br	803c6c <_dtoa_r+0x880>
  803c44:	080a3cc0 	call	80a3cc <__muldf3>
  803c48:	000d883a 	mov	r6,zero
  803c4c:	000f883a 	mov	r7,zero
  803c50:	1009883a 	mov	r4,r2
  803c54:	180b883a 	mov	r5,r3
  803c58:	1025883a 	mov	r18,r2
  803c5c:	1827883a 	mov	r19,r3
  803c60:	b829883a 	mov	r20,r23
  803c64:	080a1740 	call	80a174 <__eqdf2>
  803c68:	103f8a26 	beq	r2,zero,803a94 <__alt_data_end+0xff803a94>
  803c6c:	800d883a 	mov	r6,r16
  803c70:	880f883a 	mov	r7,r17
  803c74:	9009883a 	mov	r4,r18
  803c78:	980b883a 	mov	r5,r19
  803c7c:	08097a40 	call	8097a4 <__divdf3>
  803c80:	180b883a 	mov	r5,r3
  803c84:	1009883a 	mov	r4,r2
  803c88:	080b5340 	call	80b534 <__fixdfsi>
  803c8c:	1009883a 	mov	r4,r2
  803c90:	102b883a 	mov	r21,r2
  803c94:	080b5b40 	call	80b5b4 <__floatsidf>
  803c98:	800d883a 	mov	r6,r16
  803c9c:	880f883a 	mov	r7,r17
  803ca0:	1009883a 	mov	r4,r2
  803ca4:	180b883a 	mov	r5,r3
  803ca8:	080a3cc0 	call	80a3cc <__muldf3>
  803cac:	100d883a 	mov	r6,r2
  803cb0:	180f883a 	mov	r7,r3
  803cb4:	9009883a 	mov	r4,r18
  803cb8:	980b883a 	mov	r5,r19
  803cbc:	080ac380 	call	80ac38 <__subdf3>
  803cc0:	aa000c04 	addi	r8,r21,48
  803cc4:	a2000005 	stb	r8,0(r20)
  803cc8:	000d883a 	mov	r6,zero
  803ccc:	01d00934 	movhi	r7,16420
  803cd0:	1009883a 	mov	r4,r2
  803cd4:	180b883a 	mov	r5,r3
  803cd8:	a5c00044 	addi	r23,r20,1
  803cdc:	b53fd91e 	bne	r22,r20,803c44 <__alt_data_end+0xff803c44>
  803ce0:	100d883a 	mov	r6,r2
  803ce4:	180f883a 	mov	r7,r3
  803ce8:	1009883a 	mov	r4,r2
  803cec:	180b883a 	mov	r5,r3
  803cf0:	0808ef80 	call	808ef8 <__adddf3>
  803cf4:	100d883a 	mov	r6,r2
  803cf8:	180f883a 	mov	r7,r3
  803cfc:	8009883a 	mov	r4,r16
  803d00:	880b883a 	mov	r5,r17
  803d04:	1027883a 	mov	r19,r2
  803d08:	1825883a 	mov	r18,r3
  803d0c:	080a2d80 	call	80a2d8 <__ledf2>
  803d10:	10000816 	blt	r2,zero,803d34 <_dtoa_r+0x948>
  803d14:	980d883a 	mov	r6,r19
  803d18:	900f883a 	mov	r7,r18
  803d1c:	8009883a 	mov	r4,r16
  803d20:	880b883a 	mov	r5,r17
  803d24:	080a1740 	call	80a174 <__eqdf2>
  803d28:	103f5a1e 	bne	r2,zero,803a94 <__alt_data_end+0xff803a94>
  803d2c:	ad40004c 	andi	r21,r21,1
  803d30:	a83f5826 	beq	r21,zero,803a94 <__alt_data_end+0xff803a94>
  803d34:	bd3fffc3 	ldbu	r20,-1(r23)
  803d38:	b8bfffc4 	addi	r2,r23,-1
  803d3c:	1007883a 	mov	r3,r2
  803d40:	01400e44 	movi	r5,57
  803d44:	d9800717 	ldw	r6,28(sp)
  803d48:	00000506 	br	803d60 <_dtoa_r+0x974>
  803d4c:	18ffffc4 	addi	r3,r3,-1
  803d50:	11824726 	beq	r2,r6,804670 <_dtoa_r+0x1284>
  803d54:	1d000003 	ldbu	r20,0(r3)
  803d58:	102f883a 	mov	r23,r2
  803d5c:	10bfffc4 	addi	r2,r2,-1
  803d60:	a1003fcc 	andi	r4,r20,255
  803d64:	2100201c 	xori	r4,r4,128
  803d68:	213fe004 	addi	r4,r4,-128
  803d6c:	217ff726 	beq	r4,r5,803d4c <__alt_data_end+0xff803d4c>
  803d70:	a2000044 	addi	r8,r20,1
  803d74:	12000005 	stb	r8,0(r2)
  803d78:	003f4606 	br	803a94 <__alt_data_end+0xff803a94>
  803d7c:	d9000b17 	ldw	r4,44(sp)
  803d80:	2000c826 	beq	r4,zero,8040a4 <_dtoa_r+0xcb8>
  803d84:	d9800317 	ldw	r6,12(sp)
  803d88:	00c00044 	movi	r3,1
  803d8c:	1980f90e 	bge	r3,r6,804174 <_dtoa_r+0xd88>
  803d90:	d8800617 	ldw	r2,24(sp)
  803d94:	d8c00a17 	ldw	r3,40(sp)
  803d98:	157fffc4 	addi	r21,r2,-1
  803d9c:	1d41f316 	blt	r3,r21,80456c <_dtoa_r+0x1180>
  803da0:	1d6bc83a 	sub	r21,r3,r21
  803da4:	d9c00617 	ldw	r7,24(sp)
  803da8:	3802aa16 	blt	r7,zero,804854 <_dtoa_r+0x1468>
  803dac:	dd000817 	ldw	r20,32(sp)
  803db0:	d8800617 	ldw	r2,24(sp)
  803db4:	d8c00817 	ldw	r3,32(sp)
  803db8:	01400044 	movi	r5,1
  803dbc:	e009883a 	mov	r4,fp
  803dc0:	1887883a 	add	r3,r3,r2
  803dc4:	d8c00815 	stw	r3,32(sp)
  803dc8:	b0ad883a 	add	r22,r22,r2
  803dcc:	08055e40 	call	8055e4 <__i2b>
  803dd0:	1023883a 	mov	r17,r2
  803dd4:	a0000826 	beq	r20,zero,803df8 <_dtoa_r+0xa0c>
  803dd8:	0580070e 	bge	zero,r22,803df8 <_dtoa_r+0xa0c>
  803ddc:	a005883a 	mov	r2,r20
  803de0:	b500b916 	blt	r22,r20,8040c8 <_dtoa_r+0xcdc>
  803de4:	d9000817 	ldw	r4,32(sp)
  803de8:	a0a9c83a 	sub	r20,r20,r2
  803dec:	b0adc83a 	sub	r22,r22,r2
  803df0:	2089c83a 	sub	r4,r4,r2
  803df4:	d9000815 	stw	r4,32(sp)
  803df8:	d9800a17 	ldw	r6,40(sp)
  803dfc:	0181810e 	bge	zero,r6,804404 <_dtoa_r+0x1018>
  803e00:	d9c00b17 	ldw	r7,44(sp)
  803e04:	3800b326 	beq	r7,zero,8040d4 <_dtoa_r+0xce8>
  803e08:	a800b226 	beq	r21,zero,8040d4 <_dtoa_r+0xce8>
  803e0c:	880b883a 	mov	r5,r17
  803e10:	a80d883a 	mov	r6,r21
  803e14:	e009883a 	mov	r4,fp
  803e18:	08058ac0 	call	8058ac <__pow5mult>
  803e1c:	d9800917 	ldw	r6,36(sp)
  803e20:	100b883a 	mov	r5,r2
  803e24:	e009883a 	mov	r4,fp
  803e28:	1023883a 	mov	r17,r2
  803e2c:	08056200 	call	805620 <__multiply>
  803e30:	1021883a 	mov	r16,r2
  803e34:	d8800a17 	ldw	r2,40(sp)
  803e38:	d9400917 	ldw	r5,36(sp)
  803e3c:	e009883a 	mov	r4,fp
  803e40:	1545c83a 	sub	r2,r2,r21
  803e44:	d8800a15 	stw	r2,40(sp)
  803e48:	08052580 	call	805258 <_Bfree>
  803e4c:	d8c00a17 	ldw	r3,40(sp)
  803e50:	18009f1e 	bne	r3,zero,8040d0 <_dtoa_r+0xce4>
  803e54:	05c00044 	movi	r23,1
  803e58:	e009883a 	mov	r4,fp
  803e5c:	b80b883a 	mov	r5,r23
  803e60:	08055e40 	call	8055e4 <__i2b>
  803e64:	d9000d17 	ldw	r4,52(sp)
  803e68:	102b883a 	mov	r21,r2
  803e6c:	2000ce26 	beq	r4,zero,8041a8 <_dtoa_r+0xdbc>
  803e70:	200d883a 	mov	r6,r4
  803e74:	100b883a 	mov	r5,r2
  803e78:	e009883a 	mov	r4,fp
  803e7c:	08058ac0 	call	8058ac <__pow5mult>
  803e80:	d9800317 	ldw	r6,12(sp)
  803e84:	102b883a 	mov	r21,r2
  803e88:	b981810e 	bge	r23,r6,804490 <_dtoa_r+0x10a4>
  803e8c:	0027883a 	mov	r19,zero
  803e90:	a8800417 	ldw	r2,16(r21)
  803e94:	05c00804 	movi	r23,32
  803e98:	10800104 	addi	r2,r2,4
  803e9c:	1085883a 	add	r2,r2,r2
  803ea0:	1085883a 	add	r2,r2,r2
  803ea4:	a885883a 	add	r2,r21,r2
  803ea8:	11000017 	ldw	r4,0(r2)
  803eac:	08054cc0 	call	8054cc <__hi0bits>
  803eb0:	b885c83a 	sub	r2,r23,r2
  803eb4:	1585883a 	add	r2,r2,r22
  803eb8:	108007cc 	andi	r2,r2,31
  803ebc:	1000b326 	beq	r2,zero,80418c <_dtoa_r+0xda0>
  803ec0:	00c00804 	movi	r3,32
  803ec4:	1887c83a 	sub	r3,r3,r2
  803ec8:	01000104 	movi	r4,4
  803ecc:	20c2cd0e 	bge	r4,r3,804a04 <_dtoa_r+0x1618>
  803ed0:	00c00704 	movi	r3,28
  803ed4:	1885c83a 	sub	r2,r3,r2
  803ed8:	d8c00817 	ldw	r3,32(sp)
  803edc:	a0a9883a 	add	r20,r20,r2
  803ee0:	b0ad883a 	add	r22,r22,r2
  803ee4:	1887883a 	add	r3,r3,r2
  803ee8:	d8c00815 	stw	r3,32(sp)
  803eec:	d9800817 	ldw	r6,32(sp)
  803ef0:	0180040e 	bge	zero,r6,803f04 <_dtoa_r+0xb18>
  803ef4:	800b883a 	mov	r5,r16
  803ef8:	e009883a 	mov	r4,fp
  803efc:	08059ec0 	call	8059ec <__lshift>
  803f00:	1021883a 	mov	r16,r2
  803f04:	0580050e 	bge	zero,r22,803f1c <_dtoa_r+0xb30>
  803f08:	a80b883a 	mov	r5,r21
  803f0c:	b00d883a 	mov	r6,r22
  803f10:	e009883a 	mov	r4,fp
  803f14:	08059ec0 	call	8059ec <__lshift>
  803f18:	102b883a 	mov	r21,r2
  803f1c:	d9c00e17 	ldw	r7,56(sp)
  803f20:	3801211e 	bne	r7,zero,8043a8 <_dtoa_r+0xfbc>
  803f24:	d9800617 	ldw	r6,24(sp)
  803f28:	0181380e 	bge	zero,r6,80440c <_dtoa_r+0x1020>
  803f2c:	d8c00b17 	ldw	r3,44(sp)
  803f30:	1800ab1e 	bne	r3,zero,8041e0 <_dtoa_r+0xdf4>
  803f34:	dc800717 	ldw	r18,28(sp)
  803f38:	dcc00617 	ldw	r19,24(sp)
  803f3c:	9029883a 	mov	r20,r18
  803f40:	00000206 	br	803f4c <_dtoa_r+0xb60>
  803f44:	08052800 	call	805280 <__multadd>
  803f48:	1021883a 	mov	r16,r2
  803f4c:	a80b883a 	mov	r5,r21
  803f50:	8009883a 	mov	r4,r16
  803f54:	08031c40 	call	8031c4 <quorem>
  803f58:	10800c04 	addi	r2,r2,48
  803f5c:	90800005 	stb	r2,0(r18)
  803f60:	94800044 	addi	r18,r18,1
  803f64:	9507c83a 	sub	r3,r18,r20
  803f68:	000f883a 	mov	r7,zero
  803f6c:	01800284 	movi	r6,10
  803f70:	800b883a 	mov	r5,r16
  803f74:	e009883a 	mov	r4,fp
  803f78:	1cfff216 	blt	r3,r19,803f44 <__alt_data_end+0xff803f44>
  803f7c:	1011883a 	mov	r8,r2
  803f80:	d8800617 	ldw	r2,24(sp)
  803f84:	0082370e 	bge	zero,r2,804864 <_dtoa_r+0x1478>
  803f88:	d9000717 	ldw	r4,28(sp)
  803f8c:	0025883a 	mov	r18,zero
  803f90:	20af883a 	add	r23,r4,r2
  803f94:	01800044 	movi	r6,1
  803f98:	800b883a 	mov	r5,r16
  803f9c:	e009883a 	mov	r4,fp
  803fa0:	da001715 	stw	r8,92(sp)
  803fa4:	08059ec0 	call	8059ec <__lshift>
  803fa8:	a80b883a 	mov	r5,r21
  803fac:	1009883a 	mov	r4,r2
  803fb0:	d8800915 	stw	r2,36(sp)
  803fb4:	0805b340 	call	805b34 <__mcmp>
  803fb8:	da001717 	ldw	r8,92(sp)
  803fbc:	0081800e 	bge	zero,r2,8045c0 <_dtoa_r+0x11d4>
  803fc0:	b93fffc3 	ldbu	r4,-1(r23)
  803fc4:	b8bfffc4 	addi	r2,r23,-1
  803fc8:	1007883a 	mov	r3,r2
  803fcc:	01800e44 	movi	r6,57
  803fd0:	d9c00717 	ldw	r7,28(sp)
  803fd4:	00000506 	br	803fec <_dtoa_r+0xc00>
  803fd8:	18ffffc4 	addi	r3,r3,-1
  803fdc:	11c12326 	beq	r2,r7,80446c <_dtoa_r+0x1080>
  803fe0:	19000003 	ldbu	r4,0(r3)
  803fe4:	102f883a 	mov	r23,r2
  803fe8:	10bfffc4 	addi	r2,r2,-1
  803fec:	21403fcc 	andi	r5,r4,255
  803ff0:	2940201c 	xori	r5,r5,128
  803ff4:	297fe004 	addi	r5,r5,-128
  803ff8:	29bff726 	beq	r5,r6,803fd8 <__alt_data_end+0xff803fd8>
  803ffc:	21000044 	addi	r4,r4,1
  804000:	11000005 	stb	r4,0(r2)
  804004:	a80b883a 	mov	r5,r21
  804008:	e009883a 	mov	r4,fp
  80400c:	08052580 	call	805258 <_Bfree>
  804010:	883ea026 	beq	r17,zero,803a94 <__alt_data_end+0xff803a94>
  804014:	90000426 	beq	r18,zero,804028 <_dtoa_r+0xc3c>
  804018:	94400326 	beq	r18,r17,804028 <_dtoa_r+0xc3c>
  80401c:	900b883a 	mov	r5,r18
  804020:	e009883a 	mov	r4,fp
  804024:	08052580 	call	805258 <_Bfree>
  804028:	880b883a 	mov	r5,r17
  80402c:	e009883a 	mov	r4,fp
  804030:	08052580 	call	805258 <_Bfree>
  804034:	003e9706 	br	803a94 <__alt_data_end+0xff803a94>
  804038:	01800044 	movi	r6,1
  80403c:	d9800e15 	stw	r6,56(sp)
  804040:	003d9606 	br	80369c <__alt_data_end+0xff80369c>
  804044:	d8800817 	ldw	r2,32(sp)
  804048:	d8c00517 	ldw	r3,20(sp)
  80404c:	d8000d15 	stw	zero,52(sp)
  804050:	10c5c83a 	sub	r2,r2,r3
  804054:	00c9c83a 	sub	r4,zero,r3
  804058:	d8800815 	stw	r2,32(sp)
  80405c:	d9000a15 	stw	r4,40(sp)
  804060:	003d9706 	br	8036c0 <__alt_data_end+0xff8036c0>
  804064:	05adc83a 	sub	r22,zero,r22
  804068:	dd800815 	stw	r22,32(sp)
  80406c:	002d883a 	mov	r22,zero
  804070:	003d8e06 	br	8036ac <__alt_data_end+0xff8036ac>
  804074:	d9000517 	ldw	r4,20(sp)
  804078:	080b5b40 	call	80b5b4 <__floatsidf>
  80407c:	100d883a 	mov	r6,r2
  804080:	180f883a 	mov	r7,r3
  804084:	a009883a 	mov	r4,r20
  804088:	880b883a 	mov	r5,r17
  80408c:	080a1740 	call	80a174 <__eqdf2>
  804090:	103d7126 	beq	r2,zero,803658 <__alt_data_end+0xff803658>
  804094:	d9c00517 	ldw	r7,20(sp)
  804098:	39ffffc4 	addi	r7,r7,-1
  80409c:	d9c00515 	stw	r7,20(sp)
  8040a0:	003d6d06 	br	803658 <__alt_data_end+0xff803658>
  8040a4:	dd400a17 	ldw	r21,40(sp)
  8040a8:	dd000817 	ldw	r20,32(sp)
  8040ac:	0023883a 	mov	r17,zero
  8040b0:	003f4806 	br	803dd4 <__alt_data_end+0xff803dd4>
  8040b4:	10e3c83a 	sub	r17,r2,r3
  8040b8:	9448983a 	sll	r4,r18,r17
  8040bc:	003d3206 	br	803588 <__alt_data_end+0xff803588>
  8040c0:	d8000e15 	stw	zero,56(sp)
  8040c4:	003d7506 	br	80369c <__alt_data_end+0xff80369c>
  8040c8:	b005883a 	mov	r2,r22
  8040cc:	003f4506 	br	803de4 <__alt_data_end+0xff803de4>
  8040d0:	dc000915 	stw	r16,36(sp)
  8040d4:	d9800a17 	ldw	r6,40(sp)
  8040d8:	d9400917 	ldw	r5,36(sp)
  8040dc:	e009883a 	mov	r4,fp
  8040e0:	08058ac0 	call	8058ac <__pow5mult>
  8040e4:	1021883a 	mov	r16,r2
  8040e8:	003f5a06 	br	803e54 <__alt_data_end+0xff803e54>
  8040ec:	01c00044 	movi	r7,1
  8040f0:	d9c00b15 	stw	r7,44(sp)
  8040f4:	d8802217 	ldw	r2,136(sp)
  8040f8:	0081280e 	bge	zero,r2,80459c <_dtoa_r+0x11b0>
  8040fc:	100d883a 	mov	r6,r2
  804100:	1021883a 	mov	r16,r2
  804104:	d8800c15 	stw	r2,48(sp)
  804108:	d8800615 	stw	r2,24(sp)
  80410c:	003d8806 	br	803730 <__alt_data_end+0xff803730>
  804110:	d8800617 	ldw	r2,24(sp)
  804114:	00be9b16 	blt	zero,r2,803b84 <__alt_data_end+0xff803b84>
  804118:	10010f1e 	bne	r2,zero,804558 <_dtoa_r+0x116c>
  80411c:	880b883a 	mov	r5,r17
  804120:	000d883a 	mov	r6,zero
  804124:	01d00534 	movhi	r7,16404
  804128:	8009883a 	mov	r4,r16
  80412c:	080a3cc0 	call	80a3cc <__muldf3>
  804130:	900d883a 	mov	r6,r18
  804134:	980f883a 	mov	r7,r19
  804138:	1009883a 	mov	r4,r2
  80413c:	180b883a 	mov	r5,r3
  804140:	080a1fc0 	call	80a1fc <__gedf2>
  804144:	002b883a 	mov	r21,zero
  804148:	0023883a 	mov	r17,zero
  80414c:	1000bf16 	blt	r2,zero,80444c <_dtoa_r+0x1060>
  804150:	d9802217 	ldw	r6,136(sp)
  804154:	ddc00717 	ldw	r23,28(sp)
  804158:	018c303a 	nor	r6,zero,r6
  80415c:	d9800515 	stw	r6,20(sp)
  804160:	a80b883a 	mov	r5,r21
  804164:	e009883a 	mov	r4,fp
  804168:	08052580 	call	805258 <_Bfree>
  80416c:	883e4926 	beq	r17,zero,803a94 <__alt_data_end+0xff803a94>
  804170:	003fad06 	br	804028 <__alt_data_end+0xff804028>
  804174:	d9c01117 	ldw	r7,68(sp)
  804178:	3801bc26 	beq	r7,zero,80486c <_dtoa_r+0x1480>
  80417c:	10810cc4 	addi	r2,r2,1075
  804180:	dd400a17 	ldw	r21,40(sp)
  804184:	dd000817 	ldw	r20,32(sp)
  804188:	003f0a06 	br	803db4 <__alt_data_end+0xff803db4>
  80418c:	00800704 	movi	r2,28
  804190:	d9000817 	ldw	r4,32(sp)
  804194:	a0a9883a 	add	r20,r20,r2
  804198:	b0ad883a 	add	r22,r22,r2
  80419c:	2089883a 	add	r4,r4,r2
  8041a0:	d9000815 	stw	r4,32(sp)
  8041a4:	003f5106 	br	803eec <__alt_data_end+0xff803eec>
  8041a8:	d8c00317 	ldw	r3,12(sp)
  8041ac:	b8c1fc0e 	bge	r23,r3,8049a0 <_dtoa_r+0x15b4>
  8041b0:	0027883a 	mov	r19,zero
  8041b4:	b805883a 	mov	r2,r23
  8041b8:	003f3e06 	br	803eb4 <__alt_data_end+0xff803eb4>
  8041bc:	880b883a 	mov	r5,r17
  8041c0:	e009883a 	mov	r4,fp
  8041c4:	000f883a 	mov	r7,zero
  8041c8:	01800284 	movi	r6,10
  8041cc:	08052800 	call	805280 <__multadd>
  8041d0:	d9000c17 	ldw	r4,48(sp)
  8041d4:	1023883a 	mov	r17,r2
  8041d8:	0102040e 	bge	zero,r4,8049ec <_dtoa_r+0x1600>
  8041dc:	d9000615 	stw	r4,24(sp)
  8041e0:	0500050e 	bge	zero,r20,8041f8 <_dtoa_r+0xe0c>
  8041e4:	880b883a 	mov	r5,r17
  8041e8:	a00d883a 	mov	r6,r20
  8041ec:	e009883a 	mov	r4,fp
  8041f0:	08059ec0 	call	8059ec <__lshift>
  8041f4:	1023883a 	mov	r17,r2
  8041f8:	9801241e 	bne	r19,zero,80468c <_dtoa_r+0x12a0>
  8041fc:	8829883a 	mov	r20,r17
  804200:	d9000617 	ldw	r4,24(sp)
  804204:	dcc00717 	ldw	r19,28(sp)
  804208:	9480004c 	andi	r18,r18,1
  80420c:	20bfffc4 	addi	r2,r4,-1
  804210:	9885883a 	add	r2,r19,r2
  804214:	d8800415 	stw	r2,16(sp)
  804218:	dc800615 	stw	r18,24(sp)
  80421c:	a80b883a 	mov	r5,r21
  804220:	8009883a 	mov	r4,r16
  804224:	08031c40 	call	8031c4 <quorem>
  804228:	880b883a 	mov	r5,r17
  80422c:	8009883a 	mov	r4,r16
  804230:	102f883a 	mov	r23,r2
  804234:	0805b340 	call	805b34 <__mcmp>
  804238:	a80b883a 	mov	r5,r21
  80423c:	a00d883a 	mov	r6,r20
  804240:	e009883a 	mov	r4,fp
  804244:	102d883a 	mov	r22,r2
  804248:	0805b940 	call	805b94 <__mdiff>
  80424c:	1007883a 	mov	r3,r2
  804250:	10800317 	ldw	r2,12(r2)
  804254:	bc800c04 	addi	r18,r23,48
  804258:	180b883a 	mov	r5,r3
  80425c:	10004e1e 	bne	r2,zero,804398 <_dtoa_r+0xfac>
  804260:	8009883a 	mov	r4,r16
  804264:	d8c01615 	stw	r3,88(sp)
  804268:	0805b340 	call	805b34 <__mcmp>
  80426c:	d8c01617 	ldw	r3,88(sp)
  804270:	e009883a 	mov	r4,fp
  804274:	d8801615 	stw	r2,88(sp)
  804278:	180b883a 	mov	r5,r3
  80427c:	08052580 	call	805258 <_Bfree>
  804280:	d8801617 	ldw	r2,88(sp)
  804284:	1000041e 	bne	r2,zero,804298 <_dtoa_r+0xeac>
  804288:	d9800317 	ldw	r6,12(sp)
  80428c:	3000021e 	bne	r6,zero,804298 <_dtoa_r+0xeac>
  804290:	d8c00617 	ldw	r3,24(sp)
  804294:	18003726 	beq	r3,zero,804374 <_dtoa_r+0xf88>
  804298:	b0002016 	blt	r22,zero,80431c <_dtoa_r+0xf30>
  80429c:	b000041e 	bne	r22,zero,8042b0 <_dtoa_r+0xec4>
  8042a0:	d9000317 	ldw	r4,12(sp)
  8042a4:	2000021e 	bne	r4,zero,8042b0 <_dtoa_r+0xec4>
  8042a8:	d8c00617 	ldw	r3,24(sp)
  8042ac:	18001b26 	beq	r3,zero,80431c <_dtoa_r+0xf30>
  8042b0:	00810716 	blt	zero,r2,8046d0 <_dtoa_r+0x12e4>
  8042b4:	d8c00417 	ldw	r3,16(sp)
  8042b8:	9d800044 	addi	r22,r19,1
  8042bc:	9c800005 	stb	r18,0(r19)
  8042c0:	b02f883a 	mov	r23,r22
  8042c4:	98c10626 	beq	r19,r3,8046e0 <_dtoa_r+0x12f4>
  8042c8:	800b883a 	mov	r5,r16
  8042cc:	000f883a 	mov	r7,zero
  8042d0:	01800284 	movi	r6,10
  8042d4:	e009883a 	mov	r4,fp
  8042d8:	08052800 	call	805280 <__multadd>
  8042dc:	1021883a 	mov	r16,r2
  8042e0:	000f883a 	mov	r7,zero
  8042e4:	01800284 	movi	r6,10
  8042e8:	880b883a 	mov	r5,r17
  8042ec:	e009883a 	mov	r4,fp
  8042f0:	8d002526 	beq	r17,r20,804388 <_dtoa_r+0xf9c>
  8042f4:	08052800 	call	805280 <__multadd>
  8042f8:	a00b883a 	mov	r5,r20
  8042fc:	000f883a 	mov	r7,zero
  804300:	01800284 	movi	r6,10
  804304:	e009883a 	mov	r4,fp
  804308:	1023883a 	mov	r17,r2
  80430c:	08052800 	call	805280 <__multadd>
  804310:	1029883a 	mov	r20,r2
  804314:	b027883a 	mov	r19,r22
  804318:	003fc006 	br	80421c <__alt_data_end+0xff80421c>
  80431c:	9011883a 	mov	r8,r18
  804320:	00800e0e 	bge	zero,r2,80435c <_dtoa_r+0xf70>
  804324:	800b883a 	mov	r5,r16
  804328:	01800044 	movi	r6,1
  80432c:	e009883a 	mov	r4,fp
  804330:	da001715 	stw	r8,92(sp)
  804334:	08059ec0 	call	8059ec <__lshift>
  804338:	a80b883a 	mov	r5,r21
  80433c:	1009883a 	mov	r4,r2
  804340:	1021883a 	mov	r16,r2
  804344:	0805b340 	call	805b34 <__mcmp>
  804348:	da001717 	ldw	r8,92(sp)
  80434c:	0081960e 	bge	zero,r2,8049a8 <_dtoa_r+0x15bc>
  804350:	00800e44 	movi	r2,57
  804354:	40817026 	beq	r8,r2,804918 <_dtoa_r+0x152c>
  804358:	ba000c44 	addi	r8,r23,49
  80435c:	8825883a 	mov	r18,r17
  804360:	9dc00044 	addi	r23,r19,1
  804364:	9a000005 	stb	r8,0(r19)
  804368:	a023883a 	mov	r17,r20
  80436c:	dc000915 	stw	r16,36(sp)
  804370:	003f2406 	br	804004 <__alt_data_end+0xff804004>
  804374:	00800e44 	movi	r2,57
  804378:	9011883a 	mov	r8,r18
  80437c:	90816626 	beq	r18,r2,804918 <_dtoa_r+0x152c>
  804380:	05bff516 	blt	zero,r22,804358 <__alt_data_end+0xff804358>
  804384:	003ff506 	br	80435c <__alt_data_end+0xff80435c>
  804388:	08052800 	call	805280 <__multadd>
  80438c:	1023883a 	mov	r17,r2
  804390:	1029883a 	mov	r20,r2
  804394:	003fdf06 	br	804314 <__alt_data_end+0xff804314>
  804398:	e009883a 	mov	r4,fp
  80439c:	08052580 	call	805258 <_Bfree>
  8043a0:	00800044 	movi	r2,1
  8043a4:	003fbc06 	br	804298 <__alt_data_end+0xff804298>
  8043a8:	a80b883a 	mov	r5,r21
  8043ac:	8009883a 	mov	r4,r16
  8043b0:	0805b340 	call	805b34 <__mcmp>
  8043b4:	103edb0e 	bge	r2,zero,803f24 <__alt_data_end+0xff803f24>
  8043b8:	800b883a 	mov	r5,r16
  8043bc:	000f883a 	mov	r7,zero
  8043c0:	01800284 	movi	r6,10
  8043c4:	e009883a 	mov	r4,fp
  8043c8:	08052800 	call	805280 <__multadd>
  8043cc:	1021883a 	mov	r16,r2
  8043d0:	d8800517 	ldw	r2,20(sp)
  8043d4:	d8c00b17 	ldw	r3,44(sp)
  8043d8:	10bfffc4 	addi	r2,r2,-1
  8043dc:	d8800515 	stw	r2,20(sp)
  8043e0:	183f761e 	bne	r3,zero,8041bc <__alt_data_end+0xff8041bc>
  8043e4:	d9000c17 	ldw	r4,48(sp)
  8043e8:	0101730e 	bge	zero,r4,8049b8 <_dtoa_r+0x15cc>
  8043ec:	d9000615 	stw	r4,24(sp)
  8043f0:	003ed006 	br	803f34 <__alt_data_end+0xff803f34>
  8043f4:	00800084 	movi	r2,2
  8043f8:	3081861e 	bne	r6,r2,804a14 <_dtoa_r+0x1628>
  8043fc:	d8000b15 	stw	zero,44(sp)
  804400:	003f3c06 	br	8040f4 <__alt_data_end+0xff8040f4>
  804404:	dc000917 	ldw	r16,36(sp)
  804408:	003e9206 	br	803e54 <__alt_data_end+0xff803e54>
  80440c:	d9c00317 	ldw	r7,12(sp)
  804410:	00800084 	movi	r2,2
  804414:	11fec50e 	bge	r2,r7,803f2c <__alt_data_end+0xff803f2c>
  804418:	d9000617 	ldw	r4,24(sp)
  80441c:	20013c1e 	bne	r4,zero,804910 <_dtoa_r+0x1524>
  804420:	a80b883a 	mov	r5,r21
  804424:	000f883a 	mov	r7,zero
  804428:	01800144 	movi	r6,5
  80442c:	e009883a 	mov	r4,fp
  804430:	08052800 	call	805280 <__multadd>
  804434:	100b883a 	mov	r5,r2
  804438:	8009883a 	mov	r4,r16
  80443c:	102b883a 	mov	r21,r2
  804440:	0805b340 	call	805b34 <__mcmp>
  804444:	dc000915 	stw	r16,36(sp)
  804448:	00bf410e 	bge	zero,r2,804150 <__alt_data_end+0xff804150>
  80444c:	d9c00717 	ldw	r7,28(sp)
  804450:	00800c44 	movi	r2,49
  804454:	38800005 	stb	r2,0(r7)
  804458:	d8800517 	ldw	r2,20(sp)
  80445c:	3dc00044 	addi	r23,r7,1
  804460:	10800044 	addi	r2,r2,1
  804464:	d8800515 	stw	r2,20(sp)
  804468:	003f3d06 	br	804160 <__alt_data_end+0xff804160>
  80446c:	d9800517 	ldw	r6,20(sp)
  804470:	d9c00717 	ldw	r7,28(sp)
  804474:	00800c44 	movi	r2,49
  804478:	31800044 	addi	r6,r6,1
  80447c:	d9800515 	stw	r6,20(sp)
  804480:	38800005 	stb	r2,0(r7)
  804484:	003edf06 	br	804004 <__alt_data_end+0xff804004>
  804488:	d8000b15 	stw	zero,44(sp)
  80448c:	003c9f06 	br	80370c <__alt_data_end+0xff80370c>
  804490:	903e7e1e 	bne	r18,zero,803e8c <__alt_data_end+0xff803e8c>
  804494:	00800434 	movhi	r2,16
  804498:	10bfffc4 	addi	r2,r2,-1
  80449c:	9884703a 	and	r2,r19,r2
  8044a0:	1000ea1e 	bne	r2,zero,80484c <_dtoa_r+0x1460>
  8044a4:	9cdffc2c 	andhi	r19,r19,32752
  8044a8:	9800e826 	beq	r19,zero,80484c <_dtoa_r+0x1460>
  8044ac:	d9c00817 	ldw	r7,32(sp)
  8044b0:	b5800044 	addi	r22,r22,1
  8044b4:	04c00044 	movi	r19,1
  8044b8:	39c00044 	addi	r7,r7,1
  8044bc:	d9c00815 	stw	r7,32(sp)
  8044c0:	d8800d17 	ldw	r2,52(sp)
  8044c4:	103e721e 	bne	r2,zero,803e90 <__alt_data_end+0xff803e90>
  8044c8:	00800044 	movi	r2,1
  8044cc:	003e7906 	br	803eb4 <__alt_data_end+0xff803eb4>
  8044d0:	8009883a 	mov	r4,r16
  8044d4:	080b5b40 	call	80b5b4 <__floatsidf>
  8044d8:	d9800f17 	ldw	r6,60(sp)
  8044dc:	d9c01017 	ldw	r7,64(sp)
  8044e0:	1009883a 	mov	r4,r2
  8044e4:	180b883a 	mov	r5,r3
  8044e8:	080a3cc0 	call	80a3cc <__muldf3>
  8044ec:	000d883a 	mov	r6,zero
  8044f0:	01d00734 	movhi	r7,16412
  8044f4:	1009883a 	mov	r4,r2
  8044f8:	180b883a 	mov	r5,r3
  8044fc:	0808ef80 	call	808ef8 <__adddf3>
  804500:	047f3034 	movhi	r17,64704
  804504:	1021883a 	mov	r16,r2
  804508:	1c63883a 	add	r17,r3,r17
  80450c:	d9000f17 	ldw	r4,60(sp)
  804510:	d9401017 	ldw	r5,64(sp)
  804514:	000d883a 	mov	r6,zero
  804518:	01d00534 	movhi	r7,16404
  80451c:	080ac380 	call	80ac38 <__subdf3>
  804520:	800d883a 	mov	r6,r16
  804524:	880f883a 	mov	r7,r17
  804528:	1009883a 	mov	r4,r2
  80452c:	180b883a 	mov	r5,r3
  804530:	102b883a 	mov	r21,r2
  804534:	1829883a 	mov	r20,r3
  804538:	080a1fc0 	call	80a1fc <__gedf2>
  80453c:	00806c16 	blt	zero,r2,8046f0 <_dtoa_r+0x1304>
  804540:	89e0003c 	xorhi	r7,r17,32768
  804544:	800d883a 	mov	r6,r16
  804548:	a809883a 	mov	r4,r21
  80454c:	a00b883a 	mov	r5,r20
  804550:	080a2d80 	call	80a2d8 <__ledf2>
  804554:	103d7e0e 	bge	r2,zero,803b50 <__alt_data_end+0xff803b50>
  804558:	002b883a 	mov	r21,zero
  80455c:	0023883a 	mov	r17,zero
  804560:	003efb06 	br	804150 <__alt_data_end+0xff804150>
  804564:	d8800717 	ldw	r2,28(sp)
  804568:	003bd006 	br	8034ac <__alt_data_end+0xff8034ac>
  80456c:	d9000a17 	ldw	r4,40(sp)
  804570:	d9800d17 	ldw	r6,52(sp)
  804574:	dd400a15 	stw	r21,40(sp)
  804578:	a905c83a 	sub	r2,r21,r4
  80457c:	308d883a 	add	r6,r6,r2
  804580:	d9800d15 	stw	r6,52(sp)
  804584:	002b883a 	mov	r21,zero
  804588:	003e0606 	br	803da4 <__alt_data_end+0xff803da4>
  80458c:	9023883a 	mov	r17,r18
  804590:	9829883a 	mov	r20,r19
  804594:	04000084 	movi	r16,2
  804598:	003c9206 	br	8037e4 <__alt_data_end+0xff8037e4>
  80459c:	04000044 	movi	r16,1
  8045a0:	dc000c15 	stw	r16,48(sp)
  8045a4:	dc000615 	stw	r16,24(sp)
  8045a8:	dc002215 	stw	r16,136(sp)
  8045ac:	e0001115 	stw	zero,68(fp)
  8045b0:	000b883a 	mov	r5,zero
  8045b4:	003c6906 	br	80375c <__alt_data_end+0xff80375c>
  8045b8:	3021883a 	mov	r16,r6
  8045bc:	003ffb06 	br	8045ac <__alt_data_end+0xff8045ac>
  8045c0:	1000021e 	bne	r2,zero,8045cc <_dtoa_r+0x11e0>
  8045c4:	4200004c 	andi	r8,r8,1
  8045c8:	403e7d1e 	bne	r8,zero,803fc0 <__alt_data_end+0xff803fc0>
  8045cc:	01000c04 	movi	r4,48
  8045d0:	00000106 	br	8045d8 <_dtoa_r+0x11ec>
  8045d4:	102f883a 	mov	r23,r2
  8045d8:	b8bfffc4 	addi	r2,r23,-1
  8045dc:	10c00007 	ldb	r3,0(r2)
  8045e0:	193ffc26 	beq	r3,r4,8045d4 <__alt_data_end+0xff8045d4>
  8045e4:	003e8706 	br	804004 <__alt_data_end+0xff804004>
  8045e8:	d8800517 	ldw	r2,20(sp)
  8045ec:	00a3c83a 	sub	r17,zero,r2
  8045f0:	8800a426 	beq	r17,zero,804884 <_dtoa_r+0x1498>
  8045f4:	888003cc 	andi	r2,r17,15
  8045f8:	100490fa 	slli	r2,r2,3
  8045fc:	00c02074 	movhi	r3,129
  804600:	18fe7204 	addi	r3,r3,-1592
  804604:	1885883a 	add	r2,r3,r2
  804608:	11800017 	ldw	r6,0(r2)
  80460c:	11c00117 	ldw	r7,4(r2)
  804610:	9009883a 	mov	r4,r18
  804614:	980b883a 	mov	r5,r19
  804618:	8823d13a 	srai	r17,r17,4
  80461c:	080a3cc0 	call	80a3cc <__muldf3>
  804620:	d8800f15 	stw	r2,60(sp)
  804624:	d8c01015 	stw	r3,64(sp)
  804628:	8800e826 	beq	r17,zero,8049cc <_dtoa_r+0x15e0>
  80462c:	05002074 	movhi	r20,129
  804630:	a53e6804 	addi	r20,r20,-1632
  804634:	04000084 	movi	r16,2
  804638:	8980004c 	andi	r6,r17,1
  80463c:	1009883a 	mov	r4,r2
  804640:	8823d07a 	srai	r17,r17,1
  804644:	180b883a 	mov	r5,r3
  804648:	30000426 	beq	r6,zero,80465c <_dtoa_r+0x1270>
  80464c:	a1800017 	ldw	r6,0(r20)
  804650:	a1c00117 	ldw	r7,4(r20)
  804654:	84000044 	addi	r16,r16,1
  804658:	080a3cc0 	call	80a3cc <__muldf3>
  80465c:	a5000204 	addi	r20,r20,8
  804660:	883ff51e 	bne	r17,zero,804638 <__alt_data_end+0xff804638>
  804664:	d8800f15 	stw	r2,60(sp)
  804668:	d8c01015 	stw	r3,64(sp)
  80466c:	003c7606 	br	803848 <__alt_data_end+0xff803848>
  804670:	00c00c04 	movi	r3,48
  804674:	10c00005 	stb	r3,0(r2)
  804678:	d8c00517 	ldw	r3,20(sp)
  80467c:	bd3fffc3 	ldbu	r20,-1(r23)
  804680:	18c00044 	addi	r3,r3,1
  804684:	d8c00515 	stw	r3,20(sp)
  804688:	003db906 	br	803d70 <__alt_data_end+0xff803d70>
  80468c:	89400117 	ldw	r5,4(r17)
  804690:	e009883a 	mov	r4,fp
  804694:	08051b00 	call	8051b0 <_Balloc>
  804698:	89800417 	ldw	r6,16(r17)
  80469c:	89400304 	addi	r5,r17,12
  8046a0:	11000304 	addi	r4,r2,12
  8046a4:	31800084 	addi	r6,r6,2
  8046a8:	318d883a 	add	r6,r6,r6
  8046ac:	318d883a 	add	r6,r6,r6
  8046b0:	1027883a 	mov	r19,r2
  8046b4:	08050680 	call	805068 <memcpy>
  8046b8:	01800044 	movi	r6,1
  8046bc:	980b883a 	mov	r5,r19
  8046c0:	e009883a 	mov	r4,fp
  8046c4:	08059ec0 	call	8059ec <__lshift>
  8046c8:	1029883a 	mov	r20,r2
  8046cc:	003ecc06 	br	804200 <__alt_data_end+0xff804200>
  8046d0:	00800e44 	movi	r2,57
  8046d4:	90809026 	beq	r18,r2,804918 <_dtoa_r+0x152c>
  8046d8:	92000044 	addi	r8,r18,1
  8046dc:	003f1f06 	br	80435c <__alt_data_end+0xff80435c>
  8046e0:	9011883a 	mov	r8,r18
  8046e4:	8825883a 	mov	r18,r17
  8046e8:	a023883a 	mov	r17,r20
  8046ec:	003e2906 	br	803f94 <__alt_data_end+0xff803f94>
  8046f0:	002b883a 	mov	r21,zero
  8046f4:	0023883a 	mov	r17,zero
  8046f8:	003f5406 	br	80444c <__alt_data_end+0xff80444c>
  8046fc:	61bfffc4 	addi	r6,r12,-1
  804700:	300490fa 	slli	r2,r6,3
  804704:	00c02074 	movhi	r3,129
  804708:	18fe7204 	addi	r3,r3,-1592
  80470c:	1885883a 	add	r2,r3,r2
  804710:	11000017 	ldw	r4,0(r2)
  804714:	11400117 	ldw	r5,4(r2)
  804718:	d8800717 	ldw	r2,28(sp)
  80471c:	880f883a 	mov	r7,r17
  804720:	d9801215 	stw	r6,72(sp)
  804724:	800d883a 	mov	r6,r16
  804728:	db001615 	stw	r12,88(sp)
  80472c:	15c00044 	addi	r23,r2,1
  804730:	080a3cc0 	call	80a3cc <__muldf3>
  804734:	d9401017 	ldw	r5,64(sp)
  804738:	d9000f17 	ldw	r4,60(sp)
  80473c:	d8c01515 	stw	r3,84(sp)
  804740:	d8801415 	stw	r2,80(sp)
  804744:	080b5340 	call	80b534 <__fixdfsi>
  804748:	1009883a 	mov	r4,r2
  80474c:	1021883a 	mov	r16,r2
  804750:	080b5b40 	call	80b5b4 <__floatsidf>
  804754:	d9000f17 	ldw	r4,60(sp)
  804758:	d9401017 	ldw	r5,64(sp)
  80475c:	100d883a 	mov	r6,r2
  804760:	180f883a 	mov	r7,r3
  804764:	080ac380 	call	80ac38 <__subdf3>
  804768:	1829883a 	mov	r20,r3
  80476c:	d8c00717 	ldw	r3,28(sp)
  804770:	84000c04 	addi	r16,r16,48
  804774:	1023883a 	mov	r17,r2
  804778:	1c000005 	stb	r16,0(r3)
  80477c:	db001617 	ldw	r12,88(sp)
  804780:	00800044 	movi	r2,1
  804784:	60802226 	beq	r12,r2,804810 <_dtoa_r+0x1424>
  804788:	d9c00717 	ldw	r7,28(sp)
  80478c:	8805883a 	mov	r2,r17
  804790:	b82b883a 	mov	r21,r23
  804794:	3b19883a 	add	r12,r7,r12
  804798:	6023883a 	mov	r17,r12
  80479c:	a007883a 	mov	r3,r20
  8047a0:	dc800f15 	stw	r18,60(sp)
  8047a4:	000d883a 	mov	r6,zero
  8047a8:	01d00934 	movhi	r7,16420
  8047ac:	1009883a 	mov	r4,r2
  8047b0:	180b883a 	mov	r5,r3
  8047b4:	080a3cc0 	call	80a3cc <__muldf3>
  8047b8:	180b883a 	mov	r5,r3
  8047bc:	1009883a 	mov	r4,r2
  8047c0:	1829883a 	mov	r20,r3
  8047c4:	1025883a 	mov	r18,r2
  8047c8:	080b5340 	call	80b534 <__fixdfsi>
  8047cc:	1009883a 	mov	r4,r2
  8047d0:	1021883a 	mov	r16,r2
  8047d4:	080b5b40 	call	80b5b4 <__floatsidf>
  8047d8:	100d883a 	mov	r6,r2
  8047dc:	180f883a 	mov	r7,r3
  8047e0:	9009883a 	mov	r4,r18
  8047e4:	a00b883a 	mov	r5,r20
  8047e8:	84000c04 	addi	r16,r16,48
  8047ec:	080ac380 	call	80ac38 <__subdf3>
  8047f0:	ad400044 	addi	r21,r21,1
  8047f4:	ac3fffc5 	stb	r16,-1(r21)
  8047f8:	ac7fea1e 	bne	r21,r17,8047a4 <__alt_data_end+0xff8047a4>
  8047fc:	1023883a 	mov	r17,r2
  804800:	d8801217 	ldw	r2,72(sp)
  804804:	dc800f17 	ldw	r18,60(sp)
  804808:	1829883a 	mov	r20,r3
  80480c:	b8af883a 	add	r23,r23,r2
  804810:	d9001417 	ldw	r4,80(sp)
  804814:	d9401517 	ldw	r5,84(sp)
  804818:	000d883a 	mov	r6,zero
  80481c:	01cff834 	movhi	r7,16352
  804820:	0808ef80 	call	808ef8 <__adddf3>
  804824:	880d883a 	mov	r6,r17
  804828:	a00f883a 	mov	r7,r20
  80482c:	1009883a 	mov	r4,r2
  804830:	180b883a 	mov	r5,r3
  804834:	080a2d80 	call	80a2d8 <__ledf2>
  804838:	10003e0e 	bge	r2,zero,804934 <_dtoa_r+0x1548>
  80483c:	d9001317 	ldw	r4,76(sp)
  804840:	bd3fffc3 	ldbu	r20,-1(r23)
  804844:	d9000515 	stw	r4,20(sp)
  804848:	003d3b06 	br	803d38 <__alt_data_end+0xff803d38>
  80484c:	0027883a 	mov	r19,zero
  804850:	003f1b06 	br	8044c0 <__alt_data_end+0xff8044c0>
  804854:	d8800817 	ldw	r2,32(sp)
  804858:	11e9c83a 	sub	r20,r2,r7
  80485c:	0005883a 	mov	r2,zero
  804860:	003d5406 	br	803db4 <__alt_data_end+0xff803db4>
  804864:	00800044 	movi	r2,1
  804868:	003dc706 	br	803f88 <__alt_data_end+0xff803f88>
  80486c:	d8c00217 	ldw	r3,8(sp)
  804870:	00800d84 	movi	r2,54
  804874:	dd400a17 	ldw	r21,40(sp)
  804878:	10c5c83a 	sub	r2,r2,r3
  80487c:	dd000817 	ldw	r20,32(sp)
  804880:	003d4c06 	br	803db4 <__alt_data_end+0xff803db4>
  804884:	dc800f15 	stw	r18,60(sp)
  804888:	dcc01015 	stw	r19,64(sp)
  80488c:	04000084 	movi	r16,2
  804890:	003bed06 	br	803848 <__alt_data_end+0xff803848>
  804894:	d9000617 	ldw	r4,24(sp)
  804898:	203f0d26 	beq	r4,zero,8044d0 <__alt_data_end+0xff8044d0>
  80489c:	d9800c17 	ldw	r6,48(sp)
  8048a0:	01bcab0e 	bge	zero,r6,803b50 <__alt_data_end+0xff803b50>
  8048a4:	d9401017 	ldw	r5,64(sp)
  8048a8:	d9000f17 	ldw	r4,60(sp)
  8048ac:	000d883a 	mov	r6,zero
  8048b0:	01d00934 	movhi	r7,16420
  8048b4:	080a3cc0 	call	80a3cc <__muldf3>
  8048b8:	81000044 	addi	r4,r16,1
  8048bc:	d8800f15 	stw	r2,60(sp)
  8048c0:	d8c01015 	stw	r3,64(sp)
  8048c4:	080b5b40 	call	80b5b4 <__floatsidf>
  8048c8:	d9800f17 	ldw	r6,60(sp)
  8048cc:	d9c01017 	ldw	r7,64(sp)
  8048d0:	1009883a 	mov	r4,r2
  8048d4:	180b883a 	mov	r5,r3
  8048d8:	080a3cc0 	call	80a3cc <__muldf3>
  8048dc:	01d00734 	movhi	r7,16412
  8048e0:	000d883a 	mov	r6,zero
  8048e4:	1009883a 	mov	r4,r2
  8048e8:	180b883a 	mov	r5,r3
  8048ec:	0808ef80 	call	808ef8 <__adddf3>
  8048f0:	d9c00517 	ldw	r7,20(sp)
  8048f4:	047f3034 	movhi	r17,64704
  8048f8:	1021883a 	mov	r16,r2
  8048fc:	39ffffc4 	addi	r7,r7,-1
  804900:	d9c01315 	stw	r7,76(sp)
  804904:	1c63883a 	add	r17,r3,r17
  804908:	db000c17 	ldw	r12,48(sp)
  80490c:	003bea06 	br	8038b8 <__alt_data_end+0xff8038b8>
  804910:	dc000915 	stw	r16,36(sp)
  804914:	003e0e06 	br	804150 <__alt_data_end+0xff804150>
  804918:	01000e44 	movi	r4,57
  80491c:	8825883a 	mov	r18,r17
  804920:	9dc00044 	addi	r23,r19,1
  804924:	99000005 	stb	r4,0(r19)
  804928:	a023883a 	mov	r17,r20
  80492c:	dc000915 	stw	r16,36(sp)
  804930:	003da406 	br	803fc4 <__alt_data_end+0xff803fc4>
  804934:	d9801417 	ldw	r6,80(sp)
  804938:	d9c01517 	ldw	r7,84(sp)
  80493c:	0009883a 	mov	r4,zero
  804940:	014ff834 	movhi	r5,16352
  804944:	080ac380 	call	80ac38 <__subdf3>
  804948:	880d883a 	mov	r6,r17
  80494c:	a00f883a 	mov	r7,r20
  804950:	1009883a 	mov	r4,r2
  804954:	180b883a 	mov	r5,r3
  804958:	080a1fc0 	call	80a1fc <__gedf2>
  80495c:	00bc7c0e 	bge	zero,r2,803b50 <__alt_data_end+0xff803b50>
  804960:	01000c04 	movi	r4,48
  804964:	00000106 	br	80496c <_dtoa_r+0x1580>
  804968:	102f883a 	mov	r23,r2
  80496c:	b8bfffc4 	addi	r2,r23,-1
  804970:	10c00007 	ldb	r3,0(r2)
  804974:	193ffc26 	beq	r3,r4,804968 <__alt_data_end+0xff804968>
  804978:	d9801317 	ldw	r6,76(sp)
  80497c:	d9800515 	stw	r6,20(sp)
  804980:	003c4406 	br	803a94 <__alt_data_end+0xff803a94>
  804984:	d9801317 	ldw	r6,76(sp)
  804988:	d9800515 	stw	r6,20(sp)
  80498c:	003cea06 	br	803d38 <__alt_data_end+0xff803d38>
  804990:	dd800f17 	ldw	r22,60(sp)
  804994:	dcc01017 	ldw	r19,64(sp)
  804998:	dc801217 	ldw	r18,72(sp)
  80499c:	003c6c06 	br	803b50 <__alt_data_end+0xff803b50>
  8049a0:	903e031e 	bne	r18,zero,8041b0 <__alt_data_end+0xff8041b0>
  8049a4:	003ebb06 	br	804494 <__alt_data_end+0xff804494>
  8049a8:	103e6c1e 	bne	r2,zero,80435c <__alt_data_end+0xff80435c>
  8049ac:	4080004c 	andi	r2,r8,1
  8049b0:	103e6a26 	beq	r2,zero,80435c <__alt_data_end+0xff80435c>
  8049b4:	003e6606 	br	804350 <__alt_data_end+0xff804350>
  8049b8:	d8c00317 	ldw	r3,12(sp)
  8049bc:	00800084 	movi	r2,2
  8049c0:	10c02916 	blt	r2,r3,804a68 <_dtoa_r+0x167c>
  8049c4:	d9000c17 	ldw	r4,48(sp)
  8049c8:	003e8806 	br	8043ec <__alt_data_end+0xff8043ec>
  8049cc:	04000084 	movi	r16,2
  8049d0:	003b9d06 	br	803848 <__alt_data_end+0xff803848>
  8049d4:	d9001317 	ldw	r4,76(sp)
  8049d8:	d9000515 	stw	r4,20(sp)
  8049dc:	003cd606 	br	803d38 <__alt_data_end+0xff803d38>
  8049e0:	d8801317 	ldw	r2,76(sp)
  8049e4:	d8800515 	stw	r2,20(sp)
  8049e8:	003c2a06 	br	803a94 <__alt_data_end+0xff803a94>
  8049ec:	d9800317 	ldw	r6,12(sp)
  8049f0:	00800084 	movi	r2,2
  8049f4:	11801516 	blt	r2,r6,804a4c <_dtoa_r+0x1660>
  8049f8:	d9c00c17 	ldw	r7,48(sp)
  8049fc:	d9c00615 	stw	r7,24(sp)
  804a00:	003df706 	br	8041e0 <__alt_data_end+0xff8041e0>
  804a04:	193d3926 	beq	r3,r4,803eec <__alt_data_end+0xff803eec>
  804a08:	00c00f04 	movi	r3,60
  804a0c:	1885c83a 	sub	r2,r3,r2
  804a10:	003ddf06 	br	804190 <__alt_data_end+0xff804190>
  804a14:	e009883a 	mov	r4,fp
  804a18:	e0001115 	stw	zero,68(fp)
  804a1c:	000b883a 	mov	r5,zero
  804a20:	08051b00 	call	8051b0 <_Balloc>
  804a24:	d8800715 	stw	r2,28(sp)
  804a28:	d8c00717 	ldw	r3,28(sp)
  804a2c:	00bfffc4 	movi	r2,-1
  804a30:	01000044 	movi	r4,1
  804a34:	d8800c15 	stw	r2,48(sp)
  804a38:	e0c01015 	stw	r3,64(fp)
  804a3c:	d9000b15 	stw	r4,44(sp)
  804a40:	d8800615 	stw	r2,24(sp)
  804a44:	d8002215 	stw	zero,136(sp)
  804a48:	003c4106 	br	803b50 <__alt_data_end+0xff803b50>
  804a4c:	d8c00c17 	ldw	r3,48(sp)
  804a50:	d8c00615 	stw	r3,24(sp)
  804a54:	003e7006 	br	804418 <__alt_data_end+0xff804418>
  804a58:	04400044 	movi	r17,1
  804a5c:	003b2006 	br	8036e0 <__alt_data_end+0xff8036e0>
  804a60:	000b883a 	mov	r5,zero
  804a64:	003b3d06 	br	80375c <__alt_data_end+0xff80375c>
  804a68:	d8800c17 	ldw	r2,48(sp)
  804a6c:	d8800615 	stw	r2,24(sp)
  804a70:	003e6906 	br	804418 <__alt_data_end+0xff804418>

00804a74 <_malloc_trim_r>:
  804a74:	defffb04 	addi	sp,sp,-20
  804a78:	dcc00315 	stw	r19,12(sp)
  804a7c:	04c02074 	movhi	r19,129
  804a80:	dc800215 	stw	r18,8(sp)
  804a84:	dc400115 	stw	r17,4(sp)
  804a88:	dc000015 	stw	r16,0(sp)
  804a8c:	dfc00415 	stw	ra,16(sp)
  804a90:	2821883a 	mov	r16,r5
  804a94:	9cc00004 	addi	r19,r19,0
  804a98:	2025883a 	mov	r18,r4
  804a9c:	080b9380 	call	80b938 <__malloc_lock>
  804aa0:	98800217 	ldw	r2,8(r19)
  804aa4:	14400117 	ldw	r17,4(r2)
  804aa8:	00bfff04 	movi	r2,-4
  804aac:	88a2703a 	and	r17,r17,r2
  804ab0:	8c21c83a 	sub	r16,r17,r16
  804ab4:	8403fbc4 	addi	r16,r16,4079
  804ab8:	8020d33a 	srli	r16,r16,12
  804abc:	0083ffc4 	movi	r2,4095
  804ac0:	843fffc4 	addi	r16,r16,-1
  804ac4:	8020933a 	slli	r16,r16,12
  804ac8:	1400060e 	bge	r2,r16,804ae4 <_malloc_trim_r+0x70>
  804acc:	000b883a 	mov	r5,zero
  804ad0:	9009883a 	mov	r4,r18
  804ad4:	0800eb40 	call	800eb4 <_sbrk_r>
  804ad8:	98c00217 	ldw	r3,8(r19)
  804adc:	1c47883a 	add	r3,r3,r17
  804ae0:	10c00a26 	beq	r2,r3,804b0c <_malloc_trim_r+0x98>
  804ae4:	9009883a 	mov	r4,r18
  804ae8:	080b95c0 	call	80b95c <__malloc_unlock>
  804aec:	0005883a 	mov	r2,zero
  804af0:	dfc00417 	ldw	ra,16(sp)
  804af4:	dcc00317 	ldw	r19,12(sp)
  804af8:	dc800217 	ldw	r18,8(sp)
  804afc:	dc400117 	ldw	r17,4(sp)
  804b00:	dc000017 	ldw	r16,0(sp)
  804b04:	dec00504 	addi	sp,sp,20
  804b08:	f800283a 	ret
  804b0c:	040bc83a 	sub	r5,zero,r16
  804b10:	9009883a 	mov	r4,r18
  804b14:	0800eb40 	call	800eb4 <_sbrk_r>
  804b18:	00ffffc4 	movi	r3,-1
  804b1c:	10c00d26 	beq	r2,r3,804b54 <_malloc_trim_r+0xe0>
  804b20:	00c02074 	movhi	r3,129
  804b24:	18cc7904 	addi	r3,r3,12772
  804b28:	18800017 	ldw	r2,0(r3)
  804b2c:	99000217 	ldw	r4,8(r19)
  804b30:	8c23c83a 	sub	r17,r17,r16
  804b34:	8c400054 	ori	r17,r17,1
  804b38:	1421c83a 	sub	r16,r2,r16
  804b3c:	24400115 	stw	r17,4(r4)
  804b40:	9009883a 	mov	r4,r18
  804b44:	1c000015 	stw	r16,0(r3)
  804b48:	080b95c0 	call	80b95c <__malloc_unlock>
  804b4c:	00800044 	movi	r2,1
  804b50:	003fe706 	br	804af0 <__alt_data_end+0xff804af0>
  804b54:	000b883a 	mov	r5,zero
  804b58:	9009883a 	mov	r4,r18
  804b5c:	0800eb40 	call	800eb4 <_sbrk_r>
  804b60:	99000217 	ldw	r4,8(r19)
  804b64:	014003c4 	movi	r5,15
  804b68:	1107c83a 	sub	r3,r2,r4
  804b6c:	28ffdd0e 	bge	r5,r3,804ae4 <__alt_data_end+0xff804ae4>
  804b70:	01402074 	movhi	r5,129
  804b74:	2945a404 	addi	r5,r5,5776
  804b78:	29400017 	ldw	r5,0(r5)
  804b7c:	18c00054 	ori	r3,r3,1
  804b80:	20c00115 	stw	r3,4(r4)
  804b84:	00c02074 	movhi	r3,129
  804b88:	1145c83a 	sub	r2,r2,r5
  804b8c:	18cc7904 	addi	r3,r3,12772
  804b90:	18800015 	stw	r2,0(r3)
  804b94:	003fd306 	br	804ae4 <__alt_data_end+0xff804ae4>

00804b98 <_free_r>:
  804b98:	28004126 	beq	r5,zero,804ca0 <_free_r+0x108>
  804b9c:	defffd04 	addi	sp,sp,-12
  804ba0:	dc400115 	stw	r17,4(sp)
  804ba4:	dc000015 	stw	r16,0(sp)
  804ba8:	2023883a 	mov	r17,r4
  804bac:	2821883a 	mov	r16,r5
  804bb0:	dfc00215 	stw	ra,8(sp)
  804bb4:	080b9380 	call	80b938 <__malloc_lock>
  804bb8:	81ffff17 	ldw	r7,-4(r16)
  804bbc:	00bfff84 	movi	r2,-2
  804bc0:	01002074 	movhi	r4,129
  804bc4:	81bffe04 	addi	r6,r16,-8
  804bc8:	3884703a 	and	r2,r7,r2
  804bcc:	21000004 	addi	r4,r4,0
  804bd0:	308b883a 	add	r5,r6,r2
  804bd4:	2a400117 	ldw	r9,4(r5)
  804bd8:	22000217 	ldw	r8,8(r4)
  804bdc:	00ffff04 	movi	r3,-4
  804be0:	48c6703a 	and	r3,r9,r3
  804be4:	2a005726 	beq	r5,r8,804d44 <_free_r+0x1ac>
  804be8:	28c00115 	stw	r3,4(r5)
  804bec:	39c0004c 	andi	r7,r7,1
  804bf0:	3800091e 	bne	r7,zero,804c18 <_free_r+0x80>
  804bf4:	823ffe17 	ldw	r8,-8(r16)
  804bf8:	22400204 	addi	r9,r4,8
  804bfc:	320dc83a 	sub	r6,r6,r8
  804c00:	31c00217 	ldw	r7,8(r6)
  804c04:	1205883a 	add	r2,r2,r8
  804c08:	3a406526 	beq	r7,r9,804da0 <_free_r+0x208>
  804c0c:	32000317 	ldw	r8,12(r6)
  804c10:	3a000315 	stw	r8,12(r7)
  804c14:	41c00215 	stw	r7,8(r8)
  804c18:	28cf883a 	add	r7,r5,r3
  804c1c:	39c00117 	ldw	r7,4(r7)
  804c20:	39c0004c 	andi	r7,r7,1
  804c24:	38003a26 	beq	r7,zero,804d10 <_free_r+0x178>
  804c28:	10c00054 	ori	r3,r2,1
  804c2c:	30c00115 	stw	r3,4(r6)
  804c30:	3087883a 	add	r3,r6,r2
  804c34:	18800015 	stw	r2,0(r3)
  804c38:	00c07fc4 	movi	r3,511
  804c3c:	18801936 	bltu	r3,r2,804ca4 <_free_r+0x10c>
  804c40:	1004d0fa 	srli	r2,r2,3
  804c44:	01c00044 	movi	r7,1
  804c48:	21400117 	ldw	r5,4(r4)
  804c4c:	10c00044 	addi	r3,r2,1
  804c50:	18c7883a 	add	r3,r3,r3
  804c54:	1005d0ba 	srai	r2,r2,2
  804c58:	18c7883a 	add	r3,r3,r3
  804c5c:	18c7883a 	add	r3,r3,r3
  804c60:	1907883a 	add	r3,r3,r4
  804c64:	3884983a 	sll	r2,r7,r2
  804c68:	19c00017 	ldw	r7,0(r3)
  804c6c:	1a3ffe04 	addi	r8,r3,-8
  804c70:	1144b03a 	or	r2,r2,r5
  804c74:	32000315 	stw	r8,12(r6)
  804c78:	31c00215 	stw	r7,8(r6)
  804c7c:	20800115 	stw	r2,4(r4)
  804c80:	19800015 	stw	r6,0(r3)
  804c84:	39800315 	stw	r6,12(r7)
  804c88:	8809883a 	mov	r4,r17
  804c8c:	dfc00217 	ldw	ra,8(sp)
  804c90:	dc400117 	ldw	r17,4(sp)
  804c94:	dc000017 	ldw	r16,0(sp)
  804c98:	dec00304 	addi	sp,sp,12
  804c9c:	080b95c1 	jmpi	80b95c <__malloc_unlock>
  804ca0:	f800283a 	ret
  804ca4:	100ad27a 	srli	r5,r2,9
  804ca8:	00c00104 	movi	r3,4
  804cac:	19404a36 	bltu	r3,r5,804dd8 <_free_r+0x240>
  804cb0:	100ad1ba 	srli	r5,r2,6
  804cb4:	28c00e44 	addi	r3,r5,57
  804cb8:	18c7883a 	add	r3,r3,r3
  804cbc:	29400e04 	addi	r5,r5,56
  804cc0:	18c7883a 	add	r3,r3,r3
  804cc4:	18c7883a 	add	r3,r3,r3
  804cc8:	1909883a 	add	r4,r3,r4
  804ccc:	20c00017 	ldw	r3,0(r4)
  804cd0:	01c02074 	movhi	r7,129
  804cd4:	213ffe04 	addi	r4,r4,-8
  804cd8:	39c00004 	addi	r7,r7,0
  804cdc:	20c04426 	beq	r4,r3,804df0 <_free_r+0x258>
  804ce0:	01ffff04 	movi	r7,-4
  804ce4:	19400117 	ldw	r5,4(r3)
  804ce8:	29ca703a 	and	r5,r5,r7
  804cec:	1140022e 	bgeu	r2,r5,804cf8 <_free_r+0x160>
  804cf0:	18c00217 	ldw	r3,8(r3)
  804cf4:	20fffb1e 	bne	r4,r3,804ce4 <__alt_data_end+0xff804ce4>
  804cf8:	19000317 	ldw	r4,12(r3)
  804cfc:	31000315 	stw	r4,12(r6)
  804d00:	30c00215 	stw	r3,8(r6)
  804d04:	21800215 	stw	r6,8(r4)
  804d08:	19800315 	stw	r6,12(r3)
  804d0c:	003fde06 	br	804c88 <__alt_data_end+0xff804c88>
  804d10:	29c00217 	ldw	r7,8(r5)
  804d14:	10c5883a 	add	r2,r2,r3
  804d18:	00c02074 	movhi	r3,129
  804d1c:	18c00204 	addi	r3,r3,8
  804d20:	38c03b26 	beq	r7,r3,804e10 <_free_r+0x278>
  804d24:	2a000317 	ldw	r8,12(r5)
  804d28:	11400054 	ori	r5,r2,1
  804d2c:	3087883a 	add	r3,r6,r2
  804d30:	3a000315 	stw	r8,12(r7)
  804d34:	41c00215 	stw	r7,8(r8)
  804d38:	31400115 	stw	r5,4(r6)
  804d3c:	18800015 	stw	r2,0(r3)
  804d40:	003fbd06 	br	804c38 <__alt_data_end+0xff804c38>
  804d44:	39c0004c 	andi	r7,r7,1
  804d48:	10c5883a 	add	r2,r2,r3
  804d4c:	3800071e 	bne	r7,zero,804d6c <_free_r+0x1d4>
  804d50:	81fffe17 	ldw	r7,-8(r16)
  804d54:	31cdc83a 	sub	r6,r6,r7
  804d58:	30c00317 	ldw	r3,12(r6)
  804d5c:	31400217 	ldw	r5,8(r6)
  804d60:	11c5883a 	add	r2,r2,r7
  804d64:	28c00315 	stw	r3,12(r5)
  804d68:	19400215 	stw	r5,8(r3)
  804d6c:	10c00054 	ori	r3,r2,1
  804d70:	30c00115 	stw	r3,4(r6)
  804d74:	00c02074 	movhi	r3,129
  804d78:	18c5a504 	addi	r3,r3,5780
  804d7c:	18c00017 	ldw	r3,0(r3)
  804d80:	21800215 	stw	r6,8(r4)
  804d84:	10ffc036 	bltu	r2,r3,804c88 <__alt_data_end+0xff804c88>
  804d88:	00802074 	movhi	r2,129
  804d8c:	108c6d04 	addi	r2,r2,12724
  804d90:	11400017 	ldw	r5,0(r2)
  804d94:	8809883a 	mov	r4,r17
  804d98:	0804a740 	call	804a74 <_malloc_trim_r>
  804d9c:	003fba06 	br	804c88 <__alt_data_end+0xff804c88>
  804da0:	28c9883a 	add	r4,r5,r3
  804da4:	21000117 	ldw	r4,4(r4)
  804da8:	2100004c 	andi	r4,r4,1
  804dac:	2000391e 	bne	r4,zero,804e94 <_free_r+0x2fc>
  804db0:	29c00217 	ldw	r7,8(r5)
  804db4:	29000317 	ldw	r4,12(r5)
  804db8:	1885883a 	add	r2,r3,r2
  804dbc:	10c00054 	ori	r3,r2,1
  804dc0:	39000315 	stw	r4,12(r7)
  804dc4:	21c00215 	stw	r7,8(r4)
  804dc8:	30c00115 	stw	r3,4(r6)
  804dcc:	308d883a 	add	r6,r6,r2
  804dd0:	30800015 	stw	r2,0(r6)
  804dd4:	003fac06 	br	804c88 <__alt_data_end+0xff804c88>
  804dd8:	00c00504 	movi	r3,20
  804ddc:	19401536 	bltu	r3,r5,804e34 <_free_r+0x29c>
  804de0:	28c01704 	addi	r3,r5,92
  804de4:	18c7883a 	add	r3,r3,r3
  804de8:	294016c4 	addi	r5,r5,91
  804dec:	003fb406 	br	804cc0 <__alt_data_end+0xff804cc0>
  804df0:	280bd0ba 	srai	r5,r5,2
  804df4:	00c00044 	movi	r3,1
  804df8:	38800117 	ldw	r2,4(r7)
  804dfc:	194a983a 	sll	r5,r3,r5
  804e00:	2007883a 	mov	r3,r4
  804e04:	2884b03a 	or	r2,r5,r2
  804e08:	38800115 	stw	r2,4(r7)
  804e0c:	003fbb06 	br	804cfc <__alt_data_end+0xff804cfc>
  804e10:	21800515 	stw	r6,20(r4)
  804e14:	21800415 	stw	r6,16(r4)
  804e18:	10c00054 	ori	r3,r2,1
  804e1c:	31c00315 	stw	r7,12(r6)
  804e20:	31c00215 	stw	r7,8(r6)
  804e24:	30c00115 	stw	r3,4(r6)
  804e28:	308d883a 	add	r6,r6,r2
  804e2c:	30800015 	stw	r2,0(r6)
  804e30:	003f9506 	br	804c88 <__alt_data_end+0xff804c88>
  804e34:	00c01504 	movi	r3,84
  804e38:	19400536 	bltu	r3,r5,804e50 <_free_r+0x2b8>
  804e3c:	100ad33a 	srli	r5,r2,12
  804e40:	28c01bc4 	addi	r3,r5,111
  804e44:	18c7883a 	add	r3,r3,r3
  804e48:	29401b84 	addi	r5,r5,110
  804e4c:	003f9c06 	br	804cc0 <__alt_data_end+0xff804cc0>
  804e50:	00c05504 	movi	r3,340
  804e54:	19400536 	bltu	r3,r5,804e6c <_free_r+0x2d4>
  804e58:	100ad3fa 	srli	r5,r2,15
  804e5c:	28c01e04 	addi	r3,r5,120
  804e60:	18c7883a 	add	r3,r3,r3
  804e64:	29401dc4 	addi	r5,r5,119
  804e68:	003f9506 	br	804cc0 <__alt_data_end+0xff804cc0>
  804e6c:	00c15504 	movi	r3,1364
  804e70:	19400536 	bltu	r3,r5,804e88 <_free_r+0x2f0>
  804e74:	100ad4ba 	srli	r5,r2,18
  804e78:	28c01f44 	addi	r3,r5,125
  804e7c:	18c7883a 	add	r3,r3,r3
  804e80:	29401f04 	addi	r5,r5,124
  804e84:	003f8e06 	br	804cc0 <__alt_data_end+0xff804cc0>
  804e88:	00c03f84 	movi	r3,254
  804e8c:	01401f84 	movi	r5,126
  804e90:	003f8b06 	br	804cc0 <__alt_data_end+0xff804cc0>
  804e94:	10c00054 	ori	r3,r2,1
  804e98:	30c00115 	stw	r3,4(r6)
  804e9c:	308d883a 	add	r6,r6,r2
  804ea0:	30800015 	stw	r2,0(r6)
  804ea4:	003f7806 	br	804c88 <__alt_data_end+0xff804c88>

00804ea8 <_setlocale_r>:
  804ea8:	30001b26 	beq	r6,zero,804f18 <_setlocale_r+0x70>
  804eac:	01402074 	movhi	r5,129
  804eb0:	defffe04 	addi	sp,sp,-8
  804eb4:	297e5804 	addi	r5,r5,-1696
  804eb8:	3009883a 	mov	r4,r6
  804ebc:	dc000015 	stw	r16,0(sp)
  804ec0:	dfc00115 	stw	ra,4(sp)
  804ec4:	3021883a 	mov	r16,r6
  804ec8:	08062dc0 	call	8062dc <strcmp>
  804ecc:	1000061e 	bne	r2,zero,804ee8 <_setlocale_r+0x40>
  804ed0:	00802074 	movhi	r2,129
  804ed4:	10be3a04 	addi	r2,r2,-1816
  804ed8:	dfc00117 	ldw	ra,4(sp)
  804edc:	dc000017 	ldw	r16,0(sp)
  804ee0:	dec00204 	addi	sp,sp,8
  804ee4:	f800283a 	ret
  804ee8:	01402074 	movhi	r5,129
  804eec:	297e3a04 	addi	r5,r5,-1816
  804ef0:	8009883a 	mov	r4,r16
  804ef4:	08062dc0 	call	8062dc <strcmp>
  804ef8:	103ff526 	beq	r2,zero,804ed0 <__alt_data_end+0xff804ed0>
  804efc:	01402074 	movhi	r5,129
  804f00:	297e4304 	addi	r5,r5,-1780
  804f04:	8009883a 	mov	r4,r16
  804f08:	08062dc0 	call	8062dc <strcmp>
  804f0c:	103ff026 	beq	r2,zero,804ed0 <__alt_data_end+0xff804ed0>
  804f10:	0005883a 	mov	r2,zero
  804f14:	003ff006 	br	804ed8 <__alt_data_end+0xff804ed8>
  804f18:	00802074 	movhi	r2,129
  804f1c:	10be3a04 	addi	r2,r2,-1816
  804f20:	f800283a 	ret

00804f24 <__locale_charset>:
  804f24:	00802074 	movhi	r2,129
  804f28:	10810a04 	addi	r2,r2,1064
  804f2c:	f800283a 	ret

00804f30 <__locale_mb_cur_max>:
  804f30:	00802074 	movhi	r2,129
  804f34:	1085a604 	addi	r2,r2,5784
  804f38:	10800017 	ldw	r2,0(r2)
  804f3c:	f800283a 	ret

00804f40 <__locale_msgcharset>:
  804f40:	00802074 	movhi	r2,129
  804f44:	10810204 	addi	r2,r2,1032
  804f48:	f800283a 	ret

00804f4c <__locale_cjk_lang>:
  804f4c:	0005883a 	mov	r2,zero
  804f50:	f800283a 	ret

00804f54 <_localeconv_r>:
  804f54:	00802074 	movhi	r2,129
  804f58:	10811204 	addi	r2,r2,1096
  804f5c:	f800283a 	ret

00804f60 <setlocale>:
  804f60:	00802074 	movhi	r2,129
  804f64:	1085a304 	addi	r2,r2,5772
  804f68:	280d883a 	mov	r6,r5
  804f6c:	200b883a 	mov	r5,r4
  804f70:	11000017 	ldw	r4,0(r2)
  804f74:	0804ea81 	jmpi	804ea8 <_setlocale_r>

00804f78 <localeconv>:
  804f78:	00802074 	movhi	r2,129
  804f7c:	10811204 	addi	r2,r2,1096
  804f80:	f800283a 	ret

00804f84 <memchr>:
  804f84:	208000cc 	andi	r2,r4,3
  804f88:	280f883a 	mov	r7,r5
  804f8c:	10003426 	beq	r2,zero,805060 <memchr+0xdc>
  804f90:	30bfffc4 	addi	r2,r6,-1
  804f94:	30001a26 	beq	r6,zero,805000 <memchr+0x7c>
  804f98:	20c00003 	ldbu	r3,0(r4)
  804f9c:	29803fcc 	andi	r6,r5,255
  804fa0:	30c0051e 	bne	r6,r3,804fb8 <memchr+0x34>
  804fa4:	00001806 	br	805008 <memchr+0x84>
  804fa8:	10001526 	beq	r2,zero,805000 <memchr+0x7c>
  804fac:	20c00003 	ldbu	r3,0(r4)
  804fb0:	10bfffc4 	addi	r2,r2,-1
  804fb4:	30c01426 	beq	r6,r3,805008 <memchr+0x84>
  804fb8:	21000044 	addi	r4,r4,1
  804fbc:	20c000cc 	andi	r3,r4,3
  804fc0:	183ff91e 	bne	r3,zero,804fa8 <__alt_data_end+0xff804fa8>
  804fc4:	020000c4 	movi	r8,3
  804fc8:	40801136 	bltu	r8,r2,805010 <memchr+0x8c>
  804fcc:	10000c26 	beq	r2,zero,805000 <memchr+0x7c>
  804fd0:	20c00003 	ldbu	r3,0(r4)
  804fd4:	29403fcc 	andi	r5,r5,255
  804fd8:	28c00b26 	beq	r5,r3,805008 <memchr+0x84>
  804fdc:	20c00044 	addi	r3,r4,1
  804fe0:	39803fcc 	andi	r6,r7,255
  804fe4:	2089883a 	add	r4,r4,r2
  804fe8:	00000306 	br	804ff8 <memchr+0x74>
  804fec:	18c00044 	addi	r3,r3,1
  804ff0:	197fffc3 	ldbu	r5,-1(r3)
  804ff4:	31400526 	beq	r6,r5,80500c <memchr+0x88>
  804ff8:	1805883a 	mov	r2,r3
  804ffc:	20fffb1e 	bne	r4,r3,804fec <__alt_data_end+0xff804fec>
  805000:	0005883a 	mov	r2,zero
  805004:	f800283a 	ret
  805008:	2005883a 	mov	r2,r4
  80500c:	f800283a 	ret
  805010:	28c03fcc 	andi	r3,r5,255
  805014:	1812923a 	slli	r9,r3,8
  805018:	02ffbff4 	movhi	r11,65279
  80501c:	02a02074 	movhi	r10,32897
  805020:	48d2b03a 	or	r9,r9,r3
  805024:	4806943a 	slli	r3,r9,16
  805028:	5affbfc4 	addi	r11,r11,-257
  80502c:	52a02004 	addi	r10,r10,-32640
  805030:	48d2b03a 	or	r9,r9,r3
  805034:	20c00017 	ldw	r3,0(r4)
  805038:	48c6f03a 	xor	r3,r9,r3
  80503c:	1acd883a 	add	r6,r3,r11
  805040:	00c6303a 	nor	r3,zero,r3
  805044:	30c6703a 	and	r3,r6,r3
  805048:	1a86703a 	and	r3,r3,r10
  80504c:	183fe01e 	bne	r3,zero,804fd0 <__alt_data_end+0xff804fd0>
  805050:	10bfff04 	addi	r2,r2,-4
  805054:	21000104 	addi	r4,r4,4
  805058:	40bff636 	bltu	r8,r2,805034 <__alt_data_end+0xff805034>
  80505c:	003fdb06 	br	804fcc <__alt_data_end+0xff804fcc>
  805060:	3005883a 	mov	r2,r6
  805064:	003fd706 	br	804fc4 <__alt_data_end+0xff804fc4>

00805068 <memcpy>:
  805068:	defffd04 	addi	sp,sp,-12
  80506c:	dfc00215 	stw	ra,8(sp)
  805070:	dc400115 	stw	r17,4(sp)
  805074:	dc000015 	stw	r16,0(sp)
  805078:	00c003c4 	movi	r3,15
  80507c:	2005883a 	mov	r2,r4
  805080:	1980452e 	bgeu	r3,r6,805198 <memcpy+0x130>
  805084:	2906b03a 	or	r3,r5,r4
  805088:	18c000cc 	andi	r3,r3,3
  80508c:	1800441e 	bne	r3,zero,8051a0 <memcpy+0x138>
  805090:	347ffc04 	addi	r17,r6,-16
  805094:	8822d13a 	srli	r17,r17,4
  805098:	28c00104 	addi	r3,r5,4
  80509c:	23400104 	addi	r13,r4,4
  8050a0:	8820913a 	slli	r16,r17,4
  8050a4:	2b000204 	addi	r12,r5,8
  8050a8:	22c00204 	addi	r11,r4,8
  8050ac:	84000504 	addi	r16,r16,20
  8050b0:	2a800304 	addi	r10,r5,12
  8050b4:	22400304 	addi	r9,r4,12
  8050b8:	2c21883a 	add	r16,r5,r16
  8050bc:	2811883a 	mov	r8,r5
  8050c0:	200f883a 	mov	r7,r4
  8050c4:	41000017 	ldw	r4,0(r8)
  8050c8:	1fc00017 	ldw	ra,0(r3)
  8050cc:	63c00017 	ldw	r15,0(r12)
  8050d0:	39000015 	stw	r4,0(r7)
  8050d4:	53800017 	ldw	r14,0(r10)
  8050d8:	6fc00015 	stw	ra,0(r13)
  8050dc:	5bc00015 	stw	r15,0(r11)
  8050e0:	4b800015 	stw	r14,0(r9)
  8050e4:	18c00404 	addi	r3,r3,16
  8050e8:	39c00404 	addi	r7,r7,16
  8050ec:	42000404 	addi	r8,r8,16
  8050f0:	6b400404 	addi	r13,r13,16
  8050f4:	63000404 	addi	r12,r12,16
  8050f8:	5ac00404 	addi	r11,r11,16
  8050fc:	52800404 	addi	r10,r10,16
  805100:	4a400404 	addi	r9,r9,16
  805104:	1c3fef1e 	bne	r3,r16,8050c4 <__alt_data_end+0xff8050c4>
  805108:	89c00044 	addi	r7,r17,1
  80510c:	380e913a 	slli	r7,r7,4
  805110:	310003cc 	andi	r4,r6,15
  805114:	02c000c4 	movi	r11,3
  805118:	11c7883a 	add	r3,r2,r7
  80511c:	29cb883a 	add	r5,r5,r7
  805120:	5900212e 	bgeu	r11,r4,8051a8 <memcpy+0x140>
  805124:	1813883a 	mov	r9,r3
  805128:	2811883a 	mov	r8,r5
  80512c:	200f883a 	mov	r7,r4
  805130:	42800017 	ldw	r10,0(r8)
  805134:	4a400104 	addi	r9,r9,4
  805138:	39ffff04 	addi	r7,r7,-4
  80513c:	4abfff15 	stw	r10,-4(r9)
  805140:	42000104 	addi	r8,r8,4
  805144:	59fffa36 	bltu	r11,r7,805130 <__alt_data_end+0xff805130>
  805148:	213fff04 	addi	r4,r4,-4
  80514c:	2008d0ba 	srli	r4,r4,2
  805150:	318000cc 	andi	r6,r6,3
  805154:	21000044 	addi	r4,r4,1
  805158:	2109883a 	add	r4,r4,r4
  80515c:	2109883a 	add	r4,r4,r4
  805160:	1907883a 	add	r3,r3,r4
  805164:	290b883a 	add	r5,r5,r4
  805168:	30000626 	beq	r6,zero,805184 <memcpy+0x11c>
  80516c:	198d883a 	add	r6,r3,r6
  805170:	29c00003 	ldbu	r7,0(r5)
  805174:	18c00044 	addi	r3,r3,1
  805178:	29400044 	addi	r5,r5,1
  80517c:	19ffffc5 	stb	r7,-1(r3)
  805180:	19bffb1e 	bne	r3,r6,805170 <__alt_data_end+0xff805170>
  805184:	dfc00217 	ldw	ra,8(sp)
  805188:	dc400117 	ldw	r17,4(sp)
  80518c:	dc000017 	ldw	r16,0(sp)
  805190:	dec00304 	addi	sp,sp,12
  805194:	f800283a 	ret
  805198:	2007883a 	mov	r3,r4
  80519c:	003ff206 	br	805168 <__alt_data_end+0xff805168>
  8051a0:	2007883a 	mov	r3,r4
  8051a4:	003ff106 	br	80516c <__alt_data_end+0xff80516c>
  8051a8:	200d883a 	mov	r6,r4
  8051ac:	003fee06 	br	805168 <__alt_data_end+0xff805168>

008051b0 <_Balloc>:
  8051b0:	20801317 	ldw	r2,76(r4)
  8051b4:	defffc04 	addi	sp,sp,-16
  8051b8:	dc400115 	stw	r17,4(sp)
  8051bc:	dc000015 	stw	r16,0(sp)
  8051c0:	dfc00315 	stw	ra,12(sp)
  8051c4:	dc800215 	stw	r18,8(sp)
  8051c8:	2023883a 	mov	r17,r4
  8051cc:	2821883a 	mov	r16,r5
  8051d0:	10000f26 	beq	r2,zero,805210 <_Balloc+0x60>
  8051d4:	8407883a 	add	r3,r16,r16
  8051d8:	18c7883a 	add	r3,r3,r3
  8051dc:	10c7883a 	add	r3,r2,r3
  8051e0:	18800017 	ldw	r2,0(r3)
  8051e4:	10001126 	beq	r2,zero,80522c <_Balloc+0x7c>
  8051e8:	11000017 	ldw	r4,0(r2)
  8051ec:	19000015 	stw	r4,0(r3)
  8051f0:	10000415 	stw	zero,16(r2)
  8051f4:	10000315 	stw	zero,12(r2)
  8051f8:	dfc00317 	ldw	ra,12(sp)
  8051fc:	dc800217 	ldw	r18,8(sp)
  805200:	dc400117 	ldw	r17,4(sp)
  805204:	dc000017 	ldw	r16,0(sp)
  805208:	dec00404 	addi	sp,sp,16
  80520c:	f800283a 	ret
  805210:	01800844 	movi	r6,33
  805214:	01400104 	movi	r5,4
  805218:	08079c00 	call	8079c0 <_calloc_r>
  80521c:	88801315 	stw	r2,76(r17)
  805220:	103fec1e 	bne	r2,zero,8051d4 <__alt_data_end+0xff8051d4>
  805224:	0005883a 	mov	r2,zero
  805228:	003ff306 	br	8051f8 <__alt_data_end+0xff8051f8>
  80522c:	01400044 	movi	r5,1
  805230:	2c24983a 	sll	r18,r5,r16
  805234:	8809883a 	mov	r4,r17
  805238:	91800144 	addi	r6,r18,5
  80523c:	318d883a 	add	r6,r6,r6
  805240:	318d883a 	add	r6,r6,r6
  805244:	08079c00 	call	8079c0 <_calloc_r>
  805248:	103ff626 	beq	r2,zero,805224 <__alt_data_end+0xff805224>
  80524c:	14000115 	stw	r16,4(r2)
  805250:	14800215 	stw	r18,8(r2)
  805254:	003fe606 	br	8051f0 <__alt_data_end+0xff8051f0>

00805258 <_Bfree>:
  805258:	28000826 	beq	r5,zero,80527c <_Bfree+0x24>
  80525c:	28c00117 	ldw	r3,4(r5)
  805260:	20801317 	ldw	r2,76(r4)
  805264:	18c7883a 	add	r3,r3,r3
  805268:	18c7883a 	add	r3,r3,r3
  80526c:	10c5883a 	add	r2,r2,r3
  805270:	10c00017 	ldw	r3,0(r2)
  805274:	28c00015 	stw	r3,0(r5)
  805278:	11400015 	stw	r5,0(r2)
  80527c:	f800283a 	ret

00805280 <__multadd>:
  805280:	defff704 	addi	sp,sp,-36
  805284:	dc800215 	stw	r18,8(sp)
  805288:	2c800417 	ldw	r18,16(r5)
  80528c:	dd800615 	stw	r22,24(sp)
  805290:	dd400515 	stw	r21,20(sp)
  805294:	dd000415 	stw	r20,16(sp)
  805298:	dcc00315 	stw	r19,12(sp)
  80529c:	dc400115 	stw	r17,4(sp)
  8052a0:	dc000015 	stw	r16,0(sp)
  8052a4:	dfc00815 	stw	ra,32(sp)
  8052a8:	ddc00715 	stw	r23,28(sp)
  8052ac:	2827883a 	mov	r19,r5
  8052b0:	2029883a 	mov	r20,r4
  8052b4:	3023883a 	mov	r17,r6
  8052b8:	3821883a 	mov	r16,r7
  8052bc:	2d400504 	addi	r21,r5,20
  8052c0:	002d883a 	mov	r22,zero
  8052c4:	adc00017 	ldw	r23,0(r21)
  8052c8:	880b883a 	mov	r5,r17
  8052cc:	ad400104 	addi	r21,r21,4
  8052d0:	b93fffcc 	andi	r4,r23,65535
  8052d4:	0808ed00 	call	808ed0 <__mulsi3>
  8052d8:	b808d43a 	srli	r4,r23,16
  8052dc:	880b883a 	mov	r5,r17
  8052e0:	1421883a 	add	r16,r2,r16
  8052e4:	0808ed00 	call	808ed0 <__mulsi3>
  8052e8:	800ed43a 	srli	r7,r16,16
  8052ec:	80ffffcc 	andi	r3,r16,65535
  8052f0:	b5800044 	addi	r22,r22,1
  8052f4:	11c5883a 	add	r2,r2,r7
  8052f8:	100e943a 	slli	r7,r2,16
  8052fc:	1020d43a 	srli	r16,r2,16
  805300:	38c7883a 	add	r3,r7,r3
  805304:	a8ffff15 	stw	r3,-4(r21)
  805308:	b4bfee16 	blt	r22,r18,8052c4 <__alt_data_end+0xff8052c4>
  80530c:	80000926 	beq	r16,zero,805334 <__multadd+0xb4>
  805310:	98800217 	ldw	r2,8(r19)
  805314:	9080130e 	bge	r18,r2,805364 <__multadd+0xe4>
  805318:	90800144 	addi	r2,r18,5
  80531c:	1085883a 	add	r2,r2,r2
  805320:	1085883a 	add	r2,r2,r2
  805324:	9885883a 	add	r2,r19,r2
  805328:	14000015 	stw	r16,0(r2)
  80532c:	94800044 	addi	r18,r18,1
  805330:	9c800415 	stw	r18,16(r19)
  805334:	9805883a 	mov	r2,r19
  805338:	dfc00817 	ldw	ra,32(sp)
  80533c:	ddc00717 	ldw	r23,28(sp)
  805340:	dd800617 	ldw	r22,24(sp)
  805344:	dd400517 	ldw	r21,20(sp)
  805348:	dd000417 	ldw	r20,16(sp)
  80534c:	dcc00317 	ldw	r19,12(sp)
  805350:	dc800217 	ldw	r18,8(sp)
  805354:	dc400117 	ldw	r17,4(sp)
  805358:	dc000017 	ldw	r16,0(sp)
  80535c:	dec00904 	addi	sp,sp,36
  805360:	f800283a 	ret
  805364:	99400117 	ldw	r5,4(r19)
  805368:	a009883a 	mov	r4,r20
  80536c:	29400044 	addi	r5,r5,1
  805370:	08051b00 	call	8051b0 <_Balloc>
  805374:	99800417 	ldw	r6,16(r19)
  805378:	99400304 	addi	r5,r19,12
  80537c:	11000304 	addi	r4,r2,12
  805380:	31800084 	addi	r6,r6,2
  805384:	318d883a 	add	r6,r6,r6
  805388:	318d883a 	add	r6,r6,r6
  80538c:	1023883a 	mov	r17,r2
  805390:	08050680 	call	805068 <memcpy>
  805394:	98000a26 	beq	r19,zero,8053c0 <__multadd+0x140>
  805398:	98c00117 	ldw	r3,4(r19)
  80539c:	a0801317 	ldw	r2,76(r20)
  8053a0:	18c7883a 	add	r3,r3,r3
  8053a4:	18c7883a 	add	r3,r3,r3
  8053a8:	10c5883a 	add	r2,r2,r3
  8053ac:	10c00017 	ldw	r3,0(r2)
  8053b0:	98c00015 	stw	r3,0(r19)
  8053b4:	14c00015 	stw	r19,0(r2)
  8053b8:	8827883a 	mov	r19,r17
  8053bc:	003fd606 	br	805318 <__alt_data_end+0xff805318>
  8053c0:	8827883a 	mov	r19,r17
  8053c4:	003fd406 	br	805318 <__alt_data_end+0xff805318>

008053c8 <__s2b>:
  8053c8:	defff904 	addi	sp,sp,-28
  8053cc:	dc400115 	stw	r17,4(sp)
  8053d0:	dc000015 	stw	r16,0(sp)
  8053d4:	2023883a 	mov	r17,r4
  8053d8:	2821883a 	mov	r16,r5
  8053dc:	39000204 	addi	r4,r7,8
  8053e0:	01400244 	movi	r5,9
  8053e4:	dcc00315 	stw	r19,12(sp)
  8053e8:	dc800215 	stw	r18,8(sp)
  8053ec:	dfc00615 	stw	ra,24(sp)
  8053f0:	dd400515 	stw	r21,20(sp)
  8053f4:	dd000415 	stw	r20,16(sp)
  8053f8:	3825883a 	mov	r18,r7
  8053fc:	3027883a 	mov	r19,r6
  805400:	0808d1c0 	call	808d1c <__divsi3>
  805404:	00c00044 	movi	r3,1
  805408:	000b883a 	mov	r5,zero
  80540c:	1880030e 	bge	r3,r2,80541c <__s2b+0x54>
  805410:	18c7883a 	add	r3,r3,r3
  805414:	29400044 	addi	r5,r5,1
  805418:	18bffd16 	blt	r3,r2,805410 <__alt_data_end+0xff805410>
  80541c:	8809883a 	mov	r4,r17
  805420:	08051b00 	call	8051b0 <_Balloc>
  805424:	d8c00717 	ldw	r3,28(sp)
  805428:	10c00515 	stw	r3,20(r2)
  80542c:	00c00044 	movi	r3,1
  805430:	10c00415 	stw	r3,16(r2)
  805434:	00c00244 	movi	r3,9
  805438:	1cc0210e 	bge	r3,r19,8054c0 <__s2b+0xf8>
  80543c:	80eb883a 	add	r21,r16,r3
  805440:	a829883a 	mov	r20,r21
  805444:	84e1883a 	add	r16,r16,r19
  805448:	a1c00007 	ldb	r7,0(r20)
  80544c:	01800284 	movi	r6,10
  805450:	a5000044 	addi	r20,r20,1
  805454:	100b883a 	mov	r5,r2
  805458:	39fff404 	addi	r7,r7,-48
  80545c:	8809883a 	mov	r4,r17
  805460:	08052800 	call	805280 <__multadd>
  805464:	a43ff81e 	bne	r20,r16,805448 <__alt_data_end+0xff805448>
  805468:	ace1883a 	add	r16,r21,r19
  80546c:	843ffe04 	addi	r16,r16,-8
  805470:	9c800a0e 	bge	r19,r18,80549c <__s2b+0xd4>
  805474:	94e5c83a 	sub	r18,r18,r19
  805478:	84a5883a 	add	r18,r16,r18
  80547c:	81c00007 	ldb	r7,0(r16)
  805480:	01800284 	movi	r6,10
  805484:	84000044 	addi	r16,r16,1
  805488:	100b883a 	mov	r5,r2
  80548c:	39fff404 	addi	r7,r7,-48
  805490:	8809883a 	mov	r4,r17
  805494:	08052800 	call	805280 <__multadd>
  805498:	84bff81e 	bne	r16,r18,80547c <__alt_data_end+0xff80547c>
  80549c:	dfc00617 	ldw	ra,24(sp)
  8054a0:	dd400517 	ldw	r21,20(sp)
  8054a4:	dd000417 	ldw	r20,16(sp)
  8054a8:	dcc00317 	ldw	r19,12(sp)
  8054ac:	dc800217 	ldw	r18,8(sp)
  8054b0:	dc400117 	ldw	r17,4(sp)
  8054b4:	dc000017 	ldw	r16,0(sp)
  8054b8:	dec00704 	addi	sp,sp,28
  8054bc:	f800283a 	ret
  8054c0:	84000284 	addi	r16,r16,10
  8054c4:	1827883a 	mov	r19,r3
  8054c8:	003fe906 	br	805470 <__alt_data_end+0xff805470>

008054cc <__hi0bits>:
  8054cc:	20bfffec 	andhi	r2,r4,65535
  8054d0:	1000141e 	bne	r2,zero,805524 <__hi0bits+0x58>
  8054d4:	2008943a 	slli	r4,r4,16
  8054d8:	00800404 	movi	r2,16
  8054dc:	20ffc02c 	andhi	r3,r4,65280
  8054e0:	1800021e 	bne	r3,zero,8054ec <__hi0bits+0x20>
  8054e4:	2008923a 	slli	r4,r4,8
  8054e8:	10800204 	addi	r2,r2,8
  8054ec:	20fc002c 	andhi	r3,r4,61440
  8054f0:	1800021e 	bne	r3,zero,8054fc <__hi0bits+0x30>
  8054f4:	2008913a 	slli	r4,r4,4
  8054f8:	10800104 	addi	r2,r2,4
  8054fc:	20f0002c 	andhi	r3,r4,49152
  805500:	1800031e 	bne	r3,zero,805510 <__hi0bits+0x44>
  805504:	2109883a 	add	r4,r4,r4
  805508:	10800084 	addi	r2,r2,2
  80550c:	2109883a 	add	r4,r4,r4
  805510:	20000316 	blt	r4,zero,805520 <__hi0bits+0x54>
  805514:	2110002c 	andhi	r4,r4,16384
  805518:	2000041e 	bne	r4,zero,80552c <__hi0bits+0x60>
  80551c:	00800804 	movi	r2,32
  805520:	f800283a 	ret
  805524:	0005883a 	mov	r2,zero
  805528:	003fec06 	br	8054dc <__alt_data_end+0xff8054dc>
  80552c:	10800044 	addi	r2,r2,1
  805530:	f800283a 	ret

00805534 <__lo0bits>:
  805534:	20c00017 	ldw	r3,0(r4)
  805538:	188001cc 	andi	r2,r3,7
  80553c:	10000826 	beq	r2,zero,805560 <__lo0bits+0x2c>
  805540:	1880004c 	andi	r2,r3,1
  805544:	1000211e 	bne	r2,zero,8055cc <__lo0bits+0x98>
  805548:	1880008c 	andi	r2,r3,2
  80554c:	1000211e 	bne	r2,zero,8055d4 <__lo0bits+0xa0>
  805550:	1806d0ba 	srli	r3,r3,2
  805554:	00800084 	movi	r2,2
  805558:	20c00015 	stw	r3,0(r4)
  80555c:	f800283a 	ret
  805560:	18bfffcc 	andi	r2,r3,65535
  805564:	10001326 	beq	r2,zero,8055b4 <__lo0bits+0x80>
  805568:	0005883a 	mov	r2,zero
  80556c:	19403fcc 	andi	r5,r3,255
  805570:	2800021e 	bne	r5,zero,80557c <__lo0bits+0x48>
  805574:	1806d23a 	srli	r3,r3,8
  805578:	10800204 	addi	r2,r2,8
  80557c:	194003cc 	andi	r5,r3,15
  805580:	2800021e 	bne	r5,zero,80558c <__lo0bits+0x58>
  805584:	1806d13a 	srli	r3,r3,4
  805588:	10800104 	addi	r2,r2,4
  80558c:	194000cc 	andi	r5,r3,3
  805590:	2800021e 	bne	r5,zero,80559c <__lo0bits+0x68>
  805594:	1806d0ba 	srli	r3,r3,2
  805598:	10800084 	addi	r2,r2,2
  80559c:	1940004c 	andi	r5,r3,1
  8055a0:	2800081e 	bne	r5,zero,8055c4 <__lo0bits+0x90>
  8055a4:	1806d07a 	srli	r3,r3,1
  8055a8:	1800051e 	bne	r3,zero,8055c0 <__lo0bits+0x8c>
  8055ac:	00800804 	movi	r2,32
  8055b0:	f800283a 	ret
  8055b4:	1806d43a 	srli	r3,r3,16
  8055b8:	00800404 	movi	r2,16
  8055bc:	003feb06 	br	80556c <__alt_data_end+0xff80556c>
  8055c0:	10800044 	addi	r2,r2,1
  8055c4:	20c00015 	stw	r3,0(r4)
  8055c8:	f800283a 	ret
  8055cc:	0005883a 	mov	r2,zero
  8055d0:	f800283a 	ret
  8055d4:	1806d07a 	srli	r3,r3,1
  8055d8:	00800044 	movi	r2,1
  8055dc:	20c00015 	stw	r3,0(r4)
  8055e0:	f800283a 	ret

008055e4 <__i2b>:
  8055e4:	defffd04 	addi	sp,sp,-12
  8055e8:	dc000015 	stw	r16,0(sp)
  8055ec:	04000044 	movi	r16,1
  8055f0:	dc400115 	stw	r17,4(sp)
  8055f4:	2823883a 	mov	r17,r5
  8055f8:	800b883a 	mov	r5,r16
  8055fc:	dfc00215 	stw	ra,8(sp)
  805600:	08051b00 	call	8051b0 <_Balloc>
  805604:	14400515 	stw	r17,20(r2)
  805608:	14000415 	stw	r16,16(r2)
  80560c:	dfc00217 	ldw	ra,8(sp)
  805610:	dc400117 	ldw	r17,4(sp)
  805614:	dc000017 	ldw	r16,0(sp)
  805618:	dec00304 	addi	sp,sp,12
  80561c:	f800283a 	ret

00805620 <__multiply>:
  805620:	deffef04 	addi	sp,sp,-68
  805624:	dc400815 	stw	r17,32(sp)
  805628:	dc000715 	stw	r16,28(sp)
  80562c:	34400417 	ldw	r17,16(r6)
  805630:	2c000417 	ldw	r16,16(r5)
  805634:	dd800d15 	stw	r22,52(sp)
  805638:	dc800915 	stw	r18,36(sp)
  80563c:	dfc01015 	stw	ra,64(sp)
  805640:	df000f15 	stw	fp,60(sp)
  805644:	ddc00e15 	stw	r23,56(sp)
  805648:	dd400c15 	stw	r21,48(sp)
  80564c:	dd000b15 	stw	r20,44(sp)
  805650:	dcc00a15 	stw	r19,40(sp)
  805654:	2825883a 	mov	r18,r5
  805658:	302d883a 	mov	r22,r6
  80565c:	8440050e 	bge	r16,r17,805674 <__multiply+0x54>
  805660:	8007883a 	mov	r3,r16
  805664:	3025883a 	mov	r18,r6
  805668:	8821883a 	mov	r16,r17
  80566c:	282d883a 	mov	r22,r5
  805670:	1823883a 	mov	r17,r3
  805674:	90800217 	ldw	r2,8(r18)
  805678:	8447883a 	add	r3,r16,r17
  80567c:	d8c00215 	stw	r3,8(sp)
  805680:	91400117 	ldw	r5,4(r18)
  805684:	10c0010e 	bge	r2,r3,80568c <__multiply+0x6c>
  805688:	29400044 	addi	r5,r5,1
  80568c:	08051b00 	call	8051b0 <_Balloc>
  805690:	d8c00217 	ldw	r3,8(sp)
  805694:	d8800615 	stw	r2,24(sp)
  805698:	18eb883a 	add	r21,r3,r3
  80569c:	ad6b883a 	add	r21,r21,r21
  8056a0:	10c00504 	addi	r3,r2,20
  8056a4:	1d6b883a 	add	r21,r3,r21
  8056a8:	d8c00115 	stw	r3,4(sp)
  8056ac:	dd400315 	stw	r21,12(sp)
  8056b0:	1805883a 	mov	r2,r3
  8056b4:	1d40042e 	bgeu	r3,r21,8056c8 <__multiply+0xa8>
  8056b8:	d8c00317 	ldw	r3,12(sp)
  8056bc:	10000015 	stw	zero,0(r2)
  8056c0:	10800104 	addi	r2,r2,4
  8056c4:	10fffc36 	bltu	r2,r3,8056b8 <__alt_data_end+0xff8056b8>
  8056c8:	8c63883a 	add	r17,r17,r17
  8056cc:	b5800504 	addi	r22,r22,20
  8056d0:	8c63883a 	add	r17,r17,r17
  8056d4:	94800504 	addi	r18,r18,20
  8056d8:	8421883a 	add	r16,r16,r16
  8056dc:	b463883a 	add	r17,r22,r17
  8056e0:	8421883a 	add	r16,r16,r16
  8056e4:	dd800015 	stw	r22,0(sp)
  8056e8:	dc800415 	stw	r18,16(sp)
  8056ec:	dc400515 	stw	r17,20(sp)
  8056f0:	9429883a 	add	r20,r18,r16
  8056f4:	b4404f2e 	bgeu	r22,r17,805834 <__multiply+0x214>
  8056f8:	d8c00017 	ldw	r3,0(sp)
  8056fc:	1c800017 	ldw	r18,0(r3)
  805700:	947fffcc 	andi	r17,r18,65535
  805704:	88001e26 	beq	r17,zero,805780 <__multiply+0x160>
  805708:	dd800117 	ldw	r22,4(sp)
  80570c:	dd400417 	ldw	r21,16(sp)
  805710:	0027883a 	mov	r19,zero
  805714:	ac800017 	ldw	r18,0(r21)
  805718:	b4000017 	ldw	r16,0(r22)
  80571c:	880b883a 	mov	r5,r17
  805720:	913fffcc 	andi	r4,r18,65535
  805724:	0808ed00 	call	808ed0 <__mulsi3>
  805728:	9008d43a 	srli	r4,r18,16
  80572c:	84bfffcc 	andi	r18,r16,65535
  805730:	1485883a 	add	r2,r2,r18
  805734:	14e5883a 	add	r18,r2,r19
  805738:	8020d43a 	srli	r16,r16,16
  80573c:	9026d43a 	srli	r19,r18,16
  805740:	880b883a 	mov	r5,r17
  805744:	0808ed00 	call	808ed0 <__mulsi3>
  805748:	1405883a 	add	r2,r2,r16
  80574c:	14e1883a 	add	r16,r2,r19
  805750:	90ffffcc 	andi	r3,r18,65535
  805754:	8024943a 	slli	r18,r16,16
  805758:	ad400104 	addi	r21,r21,4
  80575c:	b005883a 	mov	r2,r22
  805760:	90c6b03a 	or	r3,r18,r3
  805764:	b0c00015 	stw	r3,0(r22)
  805768:	8026d43a 	srli	r19,r16,16
  80576c:	b5800104 	addi	r22,r22,4
  805770:	ad3fe836 	bltu	r21,r20,805714 <__alt_data_end+0xff805714>
  805774:	d8c00017 	ldw	r3,0(sp)
  805778:	14c00115 	stw	r19,4(r2)
  80577c:	1c800017 	ldw	r18,0(r3)
  805780:	9024d43a 	srli	r18,r18,16
  805784:	90002226 	beq	r18,zero,805810 <__multiply+0x1f0>
  805788:	d8c00117 	ldw	r3,4(sp)
  80578c:	dd800417 	ldw	r22,16(sp)
  805790:	002f883a 	mov	r23,zero
  805794:	1f000017 	ldw	fp,0(r3)
  805798:	1823883a 	mov	r17,r3
  80579c:	182b883a 	mov	r21,r3
  8057a0:	e021883a 	mov	r16,fp
  8057a4:	00000106 	br	8057ac <__multiply+0x18c>
  8057a8:	982b883a 	mov	r21,r19
  8057ac:	b100000b 	ldhu	r4,0(r22)
  8057b0:	8020d43a 	srli	r16,r16,16
  8057b4:	900b883a 	mov	r5,r18
  8057b8:	0808ed00 	call	808ed0 <__mulsi3>
  8057bc:	1405883a 	add	r2,r2,r16
  8057c0:	15ef883a 	add	r23,r2,r23
  8057c4:	b804943a 	slli	r2,r23,16
  8057c8:	e0ffffcc 	andi	r3,fp,65535
  8057cc:	8c400104 	addi	r17,r17,4
  8057d0:	10c6b03a 	or	r3,r2,r3
  8057d4:	88ffff15 	stw	r3,-4(r17)
  8057d8:	b5800104 	addi	r22,r22,4
  8057dc:	b13fff17 	ldw	r4,-4(r22)
  8057e0:	acc00104 	addi	r19,r21,4
  8057e4:	900b883a 	mov	r5,r18
  8057e8:	2008d43a 	srli	r4,r4,16
  8057ec:	9c000017 	ldw	r16,0(r19)
  8057f0:	0808ed00 	call	808ed0 <__mulsi3>
  8057f4:	b806d43a 	srli	r3,r23,16
  8057f8:	813fffcc 	andi	r4,r16,65535
  8057fc:	1105883a 	add	r2,r2,r4
  805800:	10f9883a 	add	fp,r2,r3
  805804:	e02ed43a 	srli	r23,fp,16
  805808:	b53fe736 	bltu	r22,r20,8057a8 <__alt_data_end+0xff8057a8>
  80580c:	af000115 	stw	fp,4(r21)
  805810:	d8c00017 	ldw	r3,0(sp)
  805814:	d9000517 	ldw	r4,20(sp)
  805818:	18c00104 	addi	r3,r3,4
  80581c:	d8c00015 	stw	r3,0(sp)
  805820:	d8c00117 	ldw	r3,4(sp)
  805824:	18c00104 	addi	r3,r3,4
  805828:	d8c00115 	stw	r3,4(sp)
  80582c:	d8c00017 	ldw	r3,0(sp)
  805830:	193fb136 	bltu	r3,r4,8056f8 <__alt_data_end+0xff8056f8>
  805834:	d8c00217 	ldw	r3,8(sp)
  805838:	00c00c0e 	bge	zero,r3,80586c <__multiply+0x24c>
  80583c:	d8c00317 	ldw	r3,12(sp)
  805840:	18bfff17 	ldw	r2,-4(r3)
  805844:	1d7fff04 	addi	r21,r3,-4
  805848:	10000326 	beq	r2,zero,805858 <__multiply+0x238>
  80584c:	00000706 	br	80586c <__multiply+0x24c>
  805850:	a8800017 	ldw	r2,0(r21)
  805854:	1000051e 	bne	r2,zero,80586c <__multiply+0x24c>
  805858:	d8c00217 	ldw	r3,8(sp)
  80585c:	ad7fff04 	addi	r21,r21,-4
  805860:	18ffffc4 	addi	r3,r3,-1
  805864:	d8c00215 	stw	r3,8(sp)
  805868:	183ff91e 	bne	r3,zero,805850 <__alt_data_end+0xff805850>
  80586c:	d8c00617 	ldw	r3,24(sp)
  805870:	d9000217 	ldw	r4,8(sp)
  805874:	1805883a 	mov	r2,r3
  805878:	19000415 	stw	r4,16(r3)
  80587c:	dfc01017 	ldw	ra,64(sp)
  805880:	df000f17 	ldw	fp,60(sp)
  805884:	ddc00e17 	ldw	r23,56(sp)
  805888:	dd800d17 	ldw	r22,52(sp)
  80588c:	dd400c17 	ldw	r21,48(sp)
  805890:	dd000b17 	ldw	r20,44(sp)
  805894:	dcc00a17 	ldw	r19,40(sp)
  805898:	dc800917 	ldw	r18,36(sp)
  80589c:	dc400817 	ldw	r17,32(sp)
  8058a0:	dc000717 	ldw	r16,28(sp)
  8058a4:	dec01104 	addi	sp,sp,68
  8058a8:	f800283a 	ret

008058ac <__pow5mult>:
  8058ac:	defffa04 	addi	sp,sp,-24
  8058b0:	dcc00315 	stw	r19,12(sp)
  8058b4:	dc000015 	stw	r16,0(sp)
  8058b8:	dfc00515 	stw	ra,20(sp)
  8058bc:	dd000415 	stw	r20,16(sp)
  8058c0:	dc800215 	stw	r18,8(sp)
  8058c4:	dc400115 	stw	r17,4(sp)
  8058c8:	308000cc 	andi	r2,r6,3
  8058cc:	3021883a 	mov	r16,r6
  8058d0:	2027883a 	mov	r19,r4
  8058d4:	10002f1e 	bne	r2,zero,805994 <__pow5mult+0xe8>
  8058d8:	2825883a 	mov	r18,r5
  8058dc:	8021d0ba 	srai	r16,r16,2
  8058e0:	80001a26 	beq	r16,zero,80594c <__pow5mult+0xa0>
  8058e4:	9c401217 	ldw	r17,72(r19)
  8058e8:	8800061e 	bne	r17,zero,805904 <__pow5mult+0x58>
  8058ec:	00003406 	br	8059c0 <__pow5mult+0x114>
  8058f0:	8021d07a 	srai	r16,r16,1
  8058f4:	80001526 	beq	r16,zero,80594c <__pow5mult+0xa0>
  8058f8:	88800017 	ldw	r2,0(r17)
  8058fc:	10001c26 	beq	r2,zero,805970 <__pow5mult+0xc4>
  805900:	1023883a 	mov	r17,r2
  805904:	8080004c 	andi	r2,r16,1
  805908:	103ff926 	beq	r2,zero,8058f0 <__alt_data_end+0xff8058f0>
  80590c:	880d883a 	mov	r6,r17
  805910:	900b883a 	mov	r5,r18
  805914:	9809883a 	mov	r4,r19
  805918:	08056200 	call	805620 <__multiply>
  80591c:	90001b26 	beq	r18,zero,80598c <__pow5mult+0xe0>
  805920:	91000117 	ldw	r4,4(r18)
  805924:	98c01317 	ldw	r3,76(r19)
  805928:	8021d07a 	srai	r16,r16,1
  80592c:	2109883a 	add	r4,r4,r4
  805930:	2109883a 	add	r4,r4,r4
  805934:	1907883a 	add	r3,r3,r4
  805938:	19000017 	ldw	r4,0(r3)
  80593c:	91000015 	stw	r4,0(r18)
  805940:	1c800015 	stw	r18,0(r3)
  805944:	1025883a 	mov	r18,r2
  805948:	803feb1e 	bne	r16,zero,8058f8 <__alt_data_end+0xff8058f8>
  80594c:	9005883a 	mov	r2,r18
  805950:	dfc00517 	ldw	ra,20(sp)
  805954:	dd000417 	ldw	r20,16(sp)
  805958:	dcc00317 	ldw	r19,12(sp)
  80595c:	dc800217 	ldw	r18,8(sp)
  805960:	dc400117 	ldw	r17,4(sp)
  805964:	dc000017 	ldw	r16,0(sp)
  805968:	dec00604 	addi	sp,sp,24
  80596c:	f800283a 	ret
  805970:	880d883a 	mov	r6,r17
  805974:	880b883a 	mov	r5,r17
  805978:	9809883a 	mov	r4,r19
  80597c:	08056200 	call	805620 <__multiply>
  805980:	88800015 	stw	r2,0(r17)
  805984:	10000015 	stw	zero,0(r2)
  805988:	003fdd06 	br	805900 <__alt_data_end+0xff805900>
  80598c:	1025883a 	mov	r18,r2
  805990:	003fd706 	br	8058f0 <__alt_data_end+0xff8058f0>
  805994:	10bfffc4 	addi	r2,r2,-1
  805998:	1085883a 	add	r2,r2,r2
  80599c:	00c02074 	movhi	r3,129
  8059a0:	18fe5b04 	addi	r3,r3,-1684
  8059a4:	1085883a 	add	r2,r2,r2
  8059a8:	1885883a 	add	r2,r3,r2
  8059ac:	11800017 	ldw	r6,0(r2)
  8059b0:	000f883a 	mov	r7,zero
  8059b4:	08052800 	call	805280 <__multadd>
  8059b8:	1025883a 	mov	r18,r2
  8059bc:	003fc706 	br	8058dc <__alt_data_end+0xff8058dc>
  8059c0:	05000044 	movi	r20,1
  8059c4:	a00b883a 	mov	r5,r20
  8059c8:	9809883a 	mov	r4,r19
  8059cc:	08051b00 	call	8051b0 <_Balloc>
  8059d0:	1023883a 	mov	r17,r2
  8059d4:	00809c44 	movi	r2,625
  8059d8:	88800515 	stw	r2,20(r17)
  8059dc:	8d000415 	stw	r20,16(r17)
  8059e0:	9c401215 	stw	r17,72(r19)
  8059e4:	88000015 	stw	zero,0(r17)
  8059e8:	003fc606 	br	805904 <__alt_data_end+0xff805904>

008059ec <__lshift>:
  8059ec:	defff904 	addi	sp,sp,-28
  8059f0:	dd400515 	stw	r21,20(sp)
  8059f4:	dcc00315 	stw	r19,12(sp)
  8059f8:	302bd17a 	srai	r21,r6,5
  8059fc:	2cc00417 	ldw	r19,16(r5)
  805a00:	28800217 	ldw	r2,8(r5)
  805a04:	dd000415 	stw	r20,16(sp)
  805a08:	ace7883a 	add	r19,r21,r19
  805a0c:	dc800215 	stw	r18,8(sp)
  805a10:	dc400115 	stw	r17,4(sp)
  805a14:	dc000015 	stw	r16,0(sp)
  805a18:	dfc00615 	stw	ra,24(sp)
  805a1c:	9c000044 	addi	r16,r19,1
  805a20:	2823883a 	mov	r17,r5
  805a24:	3029883a 	mov	r20,r6
  805a28:	2025883a 	mov	r18,r4
  805a2c:	29400117 	ldw	r5,4(r5)
  805a30:	1400030e 	bge	r2,r16,805a40 <__lshift+0x54>
  805a34:	1085883a 	add	r2,r2,r2
  805a38:	29400044 	addi	r5,r5,1
  805a3c:	143ffd16 	blt	r2,r16,805a34 <__alt_data_end+0xff805a34>
  805a40:	9009883a 	mov	r4,r18
  805a44:	08051b00 	call	8051b0 <_Balloc>
  805a48:	10c00504 	addi	r3,r2,20
  805a4c:	0540070e 	bge	zero,r21,805a6c <__lshift+0x80>
  805a50:	ad6b883a 	add	r21,r21,r21
  805a54:	ad6b883a 	add	r21,r21,r21
  805a58:	1809883a 	mov	r4,r3
  805a5c:	1d47883a 	add	r3,r3,r21
  805a60:	20000015 	stw	zero,0(r4)
  805a64:	21000104 	addi	r4,r4,4
  805a68:	193ffd1e 	bne	r3,r4,805a60 <__alt_data_end+0xff805a60>
  805a6c:	8a000417 	ldw	r8,16(r17)
  805a70:	89000504 	addi	r4,r17,20
  805a74:	a18007cc 	andi	r6,r20,31
  805a78:	4211883a 	add	r8,r8,r8
  805a7c:	4211883a 	add	r8,r8,r8
  805a80:	2211883a 	add	r8,r4,r8
  805a84:	30002326 	beq	r6,zero,805b14 <__lshift+0x128>
  805a88:	02400804 	movi	r9,32
  805a8c:	4993c83a 	sub	r9,r9,r6
  805a90:	000b883a 	mov	r5,zero
  805a94:	21c00017 	ldw	r7,0(r4)
  805a98:	1815883a 	mov	r10,r3
  805a9c:	18c00104 	addi	r3,r3,4
  805aa0:	398e983a 	sll	r7,r7,r6
  805aa4:	21000104 	addi	r4,r4,4
  805aa8:	394ab03a 	or	r5,r7,r5
  805aac:	197fff15 	stw	r5,-4(r3)
  805ab0:	217fff17 	ldw	r5,-4(r4)
  805ab4:	2a4ad83a 	srl	r5,r5,r9
  805ab8:	223ff636 	bltu	r4,r8,805a94 <__alt_data_end+0xff805a94>
  805abc:	51400115 	stw	r5,4(r10)
  805ac0:	28001a1e 	bne	r5,zero,805b2c <__lshift+0x140>
  805ac4:	843fffc4 	addi	r16,r16,-1
  805ac8:	14000415 	stw	r16,16(r2)
  805acc:	88000826 	beq	r17,zero,805af0 <__lshift+0x104>
  805ad0:	89000117 	ldw	r4,4(r17)
  805ad4:	90c01317 	ldw	r3,76(r18)
  805ad8:	2109883a 	add	r4,r4,r4
  805adc:	2109883a 	add	r4,r4,r4
  805ae0:	1907883a 	add	r3,r3,r4
  805ae4:	19000017 	ldw	r4,0(r3)
  805ae8:	89000015 	stw	r4,0(r17)
  805aec:	1c400015 	stw	r17,0(r3)
  805af0:	dfc00617 	ldw	ra,24(sp)
  805af4:	dd400517 	ldw	r21,20(sp)
  805af8:	dd000417 	ldw	r20,16(sp)
  805afc:	dcc00317 	ldw	r19,12(sp)
  805b00:	dc800217 	ldw	r18,8(sp)
  805b04:	dc400117 	ldw	r17,4(sp)
  805b08:	dc000017 	ldw	r16,0(sp)
  805b0c:	dec00704 	addi	sp,sp,28
  805b10:	f800283a 	ret
  805b14:	21400017 	ldw	r5,0(r4)
  805b18:	18c00104 	addi	r3,r3,4
  805b1c:	21000104 	addi	r4,r4,4
  805b20:	197fff15 	stw	r5,-4(r3)
  805b24:	223ffb36 	bltu	r4,r8,805b14 <__alt_data_end+0xff805b14>
  805b28:	003fe606 	br	805ac4 <__alt_data_end+0xff805ac4>
  805b2c:	9c000084 	addi	r16,r19,2
  805b30:	003fe406 	br	805ac4 <__alt_data_end+0xff805ac4>

00805b34 <__mcmp>:
  805b34:	20800417 	ldw	r2,16(r4)
  805b38:	28c00417 	ldw	r3,16(r5)
  805b3c:	10c5c83a 	sub	r2,r2,r3
  805b40:	1000111e 	bne	r2,zero,805b88 <__mcmp+0x54>
  805b44:	18c7883a 	add	r3,r3,r3
  805b48:	18c7883a 	add	r3,r3,r3
  805b4c:	21000504 	addi	r4,r4,20
  805b50:	29400504 	addi	r5,r5,20
  805b54:	20c5883a 	add	r2,r4,r3
  805b58:	28cb883a 	add	r5,r5,r3
  805b5c:	00000106 	br	805b64 <__mcmp+0x30>
  805b60:	20800a2e 	bgeu	r4,r2,805b8c <__mcmp+0x58>
  805b64:	10bfff04 	addi	r2,r2,-4
  805b68:	297fff04 	addi	r5,r5,-4
  805b6c:	11800017 	ldw	r6,0(r2)
  805b70:	28c00017 	ldw	r3,0(r5)
  805b74:	30fffa26 	beq	r6,r3,805b60 <__alt_data_end+0xff805b60>
  805b78:	30c00236 	bltu	r6,r3,805b84 <__mcmp+0x50>
  805b7c:	00800044 	movi	r2,1
  805b80:	f800283a 	ret
  805b84:	00bfffc4 	movi	r2,-1
  805b88:	f800283a 	ret
  805b8c:	0005883a 	mov	r2,zero
  805b90:	f800283a 	ret

00805b94 <__mdiff>:
  805b94:	28c00417 	ldw	r3,16(r5)
  805b98:	30800417 	ldw	r2,16(r6)
  805b9c:	defffa04 	addi	sp,sp,-24
  805ba0:	dcc00315 	stw	r19,12(sp)
  805ba4:	dc800215 	stw	r18,8(sp)
  805ba8:	dfc00515 	stw	ra,20(sp)
  805bac:	dd000415 	stw	r20,16(sp)
  805bb0:	dc400115 	stw	r17,4(sp)
  805bb4:	dc000015 	stw	r16,0(sp)
  805bb8:	1887c83a 	sub	r3,r3,r2
  805bbc:	2825883a 	mov	r18,r5
  805bc0:	3027883a 	mov	r19,r6
  805bc4:	1800141e 	bne	r3,zero,805c18 <__mdiff+0x84>
  805bc8:	1085883a 	add	r2,r2,r2
  805bcc:	1085883a 	add	r2,r2,r2
  805bd0:	2a000504 	addi	r8,r5,20
  805bd4:	34000504 	addi	r16,r6,20
  805bd8:	4087883a 	add	r3,r8,r2
  805bdc:	8085883a 	add	r2,r16,r2
  805be0:	00000106 	br	805be8 <__mdiff+0x54>
  805be4:	40c0592e 	bgeu	r8,r3,805d4c <__mdiff+0x1b8>
  805be8:	18ffff04 	addi	r3,r3,-4
  805bec:	10bfff04 	addi	r2,r2,-4
  805bf0:	19c00017 	ldw	r7,0(r3)
  805bf4:	11400017 	ldw	r5,0(r2)
  805bf8:	397ffa26 	beq	r7,r5,805be4 <__alt_data_end+0xff805be4>
  805bfc:	3940592e 	bgeu	r7,r5,805d64 <__mdiff+0x1d0>
  805c00:	9005883a 	mov	r2,r18
  805c04:	4023883a 	mov	r17,r8
  805c08:	9825883a 	mov	r18,r19
  805c0c:	05000044 	movi	r20,1
  805c10:	1027883a 	mov	r19,r2
  805c14:	00000406 	br	805c28 <__mdiff+0x94>
  805c18:	18005616 	blt	r3,zero,805d74 <__mdiff+0x1e0>
  805c1c:	34400504 	addi	r17,r6,20
  805c20:	2c000504 	addi	r16,r5,20
  805c24:	0029883a 	mov	r20,zero
  805c28:	91400117 	ldw	r5,4(r18)
  805c2c:	08051b00 	call	8051b0 <_Balloc>
  805c30:	92400417 	ldw	r9,16(r18)
  805c34:	9b000417 	ldw	r12,16(r19)
  805c38:	12c00504 	addi	r11,r2,20
  805c3c:	4a51883a 	add	r8,r9,r9
  805c40:	6319883a 	add	r12,r12,r12
  805c44:	4211883a 	add	r8,r8,r8
  805c48:	6319883a 	add	r12,r12,r12
  805c4c:	15000315 	stw	r20,12(r2)
  805c50:	8211883a 	add	r8,r16,r8
  805c54:	8b19883a 	add	r12,r17,r12
  805c58:	0007883a 	mov	r3,zero
  805c5c:	81400017 	ldw	r5,0(r16)
  805c60:	89c00017 	ldw	r7,0(r17)
  805c64:	59800104 	addi	r6,r11,4
  805c68:	293fffcc 	andi	r4,r5,65535
  805c6c:	20c7883a 	add	r3,r4,r3
  805c70:	393fffcc 	andi	r4,r7,65535
  805c74:	1909c83a 	sub	r4,r3,r4
  805c78:	280ad43a 	srli	r5,r5,16
  805c7c:	380ed43a 	srli	r7,r7,16
  805c80:	2007d43a 	srai	r3,r4,16
  805c84:	213fffcc 	andi	r4,r4,65535
  805c88:	29cbc83a 	sub	r5,r5,r7
  805c8c:	28c7883a 	add	r3,r5,r3
  805c90:	180a943a 	slli	r5,r3,16
  805c94:	8c400104 	addi	r17,r17,4
  805c98:	84000104 	addi	r16,r16,4
  805c9c:	2908b03a 	or	r4,r5,r4
  805ca0:	59000015 	stw	r4,0(r11)
  805ca4:	1807d43a 	srai	r3,r3,16
  805ca8:	3015883a 	mov	r10,r6
  805cac:	3017883a 	mov	r11,r6
  805cb0:	8b3fea36 	bltu	r17,r12,805c5c <__alt_data_end+0xff805c5c>
  805cb4:	8200162e 	bgeu	r16,r8,805d10 <__mdiff+0x17c>
  805cb8:	8017883a 	mov	r11,r16
  805cbc:	59400017 	ldw	r5,0(r11)
  805cc0:	31800104 	addi	r6,r6,4
  805cc4:	5ac00104 	addi	r11,r11,4
  805cc8:	293fffcc 	andi	r4,r5,65535
  805ccc:	20c7883a 	add	r3,r4,r3
  805cd0:	280ed43a 	srli	r7,r5,16
  805cd4:	180bd43a 	srai	r5,r3,16
  805cd8:	193fffcc 	andi	r4,r3,65535
  805cdc:	3947883a 	add	r3,r7,r5
  805ce0:	180a943a 	slli	r5,r3,16
  805ce4:	1807d43a 	srai	r3,r3,16
  805ce8:	2908b03a 	or	r4,r5,r4
  805cec:	313fff15 	stw	r4,-4(r6)
  805cf0:	5a3ff236 	bltu	r11,r8,805cbc <__alt_data_end+0xff805cbc>
  805cf4:	0406303a 	nor	r3,zero,r16
  805cf8:	1a07883a 	add	r3,r3,r8
  805cfc:	1806d0ba 	srli	r3,r3,2
  805d00:	18c00044 	addi	r3,r3,1
  805d04:	18c7883a 	add	r3,r3,r3
  805d08:	18c7883a 	add	r3,r3,r3
  805d0c:	50d5883a 	add	r10,r10,r3
  805d10:	50ffff04 	addi	r3,r10,-4
  805d14:	2000041e 	bne	r4,zero,805d28 <__mdiff+0x194>
  805d18:	18ffff04 	addi	r3,r3,-4
  805d1c:	19000017 	ldw	r4,0(r3)
  805d20:	4a7fffc4 	addi	r9,r9,-1
  805d24:	203ffc26 	beq	r4,zero,805d18 <__alt_data_end+0xff805d18>
  805d28:	12400415 	stw	r9,16(r2)
  805d2c:	dfc00517 	ldw	ra,20(sp)
  805d30:	dd000417 	ldw	r20,16(sp)
  805d34:	dcc00317 	ldw	r19,12(sp)
  805d38:	dc800217 	ldw	r18,8(sp)
  805d3c:	dc400117 	ldw	r17,4(sp)
  805d40:	dc000017 	ldw	r16,0(sp)
  805d44:	dec00604 	addi	sp,sp,24
  805d48:	f800283a 	ret
  805d4c:	000b883a 	mov	r5,zero
  805d50:	08051b00 	call	8051b0 <_Balloc>
  805d54:	00c00044 	movi	r3,1
  805d58:	10c00415 	stw	r3,16(r2)
  805d5c:	10000515 	stw	zero,20(r2)
  805d60:	003ff206 	br	805d2c <__alt_data_end+0xff805d2c>
  805d64:	8023883a 	mov	r17,r16
  805d68:	0029883a 	mov	r20,zero
  805d6c:	4021883a 	mov	r16,r8
  805d70:	003fad06 	br	805c28 <__alt_data_end+0xff805c28>
  805d74:	9005883a 	mov	r2,r18
  805d78:	94400504 	addi	r17,r18,20
  805d7c:	9c000504 	addi	r16,r19,20
  805d80:	9825883a 	mov	r18,r19
  805d84:	05000044 	movi	r20,1
  805d88:	1027883a 	mov	r19,r2
  805d8c:	003fa606 	br	805c28 <__alt_data_end+0xff805c28>

00805d90 <__ulp>:
  805d90:	295ffc2c 	andhi	r5,r5,32752
  805d94:	00bf3034 	movhi	r2,64704
  805d98:	2887883a 	add	r3,r5,r2
  805d9c:	00c0020e 	bge	zero,r3,805da8 <__ulp+0x18>
  805da0:	0005883a 	mov	r2,zero
  805da4:	f800283a 	ret
  805da8:	00c7c83a 	sub	r3,zero,r3
  805dac:	1807d53a 	srai	r3,r3,20
  805db0:	008004c4 	movi	r2,19
  805db4:	10c00b0e 	bge	r2,r3,805de4 <__ulp+0x54>
  805db8:	18bffb04 	addi	r2,r3,-20
  805dbc:	01000784 	movi	r4,30
  805dc0:	0007883a 	mov	r3,zero
  805dc4:	20800516 	blt	r4,r2,805ddc <__ulp+0x4c>
  805dc8:	010007c4 	movi	r4,31
  805dcc:	2089c83a 	sub	r4,r4,r2
  805dd0:	00800044 	movi	r2,1
  805dd4:	1104983a 	sll	r2,r2,r4
  805dd8:	f800283a 	ret
  805ddc:	00800044 	movi	r2,1
  805de0:	f800283a 	ret
  805de4:	01400234 	movhi	r5,8
  805de8:	28c7d83a 	sra	r3,r5,r3
  805dec:	0005883a 	mov	r2,zero
  805df0:	f800283a 	ret

00805df4 <__b2d>:
  805df4:	defffa04 	addi	sp,sp,-24
  805df8:	dc000015 	stw	r16,0(sp)
  805dfc:	24000417 	ldw	r16,16(r4)
  805e00:	dc400115 	stw	r17,4(sp)
  805e04:	24400504 	addi	r17,r4,20
  805e08:	8421883a 	add	r16,r16,r16
  805e0c:	8421883a 	add	r16,r16,r16
  805e10:	8c21883a 	add	r16,r17,r16
  805e14:	dc800215 	stw	r18,8(sp)
  805e18:	84bfff17 	ldw	r18,-4(r16)
  805e1c:	dd000415 	stw	r20,16(sp)
  805e20:	dcc00315 	stw	r19,12(sp)
  805e24:	9009883a 	mov	r4,r18
  805e28:	2829883a 	mov	r20,r5
  805e2c:	dfc00515 	stw	ra,20(sp)
  805e30:	08054cc0 	call	8054cc <__hi0bits>
  805e34:	00c00804 	movi	r3,32
  805e38:	1889c83a 	sub	r4,r3,r2
  805e3c:	a1000015 	stw	r4,0(r20)
  805e40:	01000284 	movi	r4,10
  805e44:	84ffff04 	addi	r19,r16,-4
  805e48:	20801216 	blt	r4,r2,805e94 <__b2d+0xa0>
  805e4c:	018002c4 	movi	r6,11
  805e50:	308dc83a 	sub	r6,r6,r2
  805e54:	9186d83a 	srl	r3,r18,r6
  805e58:	18cffc34 	orhi	r3,r3,16368
  805e5c:	8cc0212e 	bgeu	r17,r19,805ee4 <__b2d+0xf0>
  805e60:	813ffe17 	ldw	r4,-8(r16)
  805e64:	218cd83a 	srl	r6,r4,r6
  805e68:	10800544 	addi	r2,r2,21
  805e6c:	9084983a 	sll	r2,r18,r2
  805e70:	1184b03a 	or	r2,r2,r6
  805e74:	dfc00517 	ldw	ra,20(sp)
  805e78:	dd000417 	ldw	r20,16(sp)
  805e7c:	dcc00317 	ldw	r19,12(sp)
  805e80:	dc800217 	ldw	r18,8(sp)
  805e84:	dc400117 	ldw	r17,4(sp)
  805e88:	dc000017 	ldw	r16,0(sp)
  805e8c:	dec00604 	addi	sp,sp,24
  805e90:	f800283a 	ret
  805e94:	8cc00f2e 	bgeu	r17,r19,805ed4 <__b2d+0xe0>
  805e98:	117ffd44 	addi	r5,r2,-11
  805e9c:	80bffe17 	ldw	r2,-8(r16)
  805ea0:	28000e26 	beq	r5,zero,805edc <__b2d+0xe8>
  805ea4:	1949c83a 	sub	r4,r3,r5
  805ea8:	9164983a 	sll	r18,r18,r5
  805eac:	1106d83a 	srl	r3,r2,r4
  805eb0:	81bffe04 	addi	r6,r16,-8
  805eb4:	948ffc34 	orhi	r18,r18,16368
  805eb8:	90c6b03a 	or	r3,r18,r3
  805ebc:	89800e2e 	bgeu	r17,r6,805ef8 <__b2d+0x104>
  805ec0:	81bffd17 	ldw	r6,-12(r16)
  805ec4:	1144983a 	sll	r2,r2,r5
  805ec8:	310ad83a 	srl	r5,r6,r4
  805ecc:	2884b03a 	or	r2,r5,r2
  805ed0:	003fe806 	br	805e74 <__alt_data_end+0xff805e74>
  805ed4:	10bffd44 	addi	r2,r2,-11
  805ed8:	1000041e 	bne	r2,zero,805eec <__b2d+0xf8>
  805edc:	90cffc34 	orhi	r3,r18,16368
  805ee0:	003fe406 	br	805e74 <__alt_data_end+0xff805e74>
  805ee4:	000d883a 	mov	r6,zero
  805ee8:	003fdf06 	br	805e68 <__alt_data_end+0xff805e68>
  805eec:	90a4983a 	sll	r18,r18,r2
  805ef0:	0005883a 	mov	r2,zero
  805ef4:	003ff906 	br	805edc <__alt_data_end+0xff805edc>
  805ef8:	1144983a 	sll	r2,r2,r5
  805efc:	003fdd06 	br	805e74 <__alt_data_end+0xff805e74>

00805f00 <__d2b>:
  805f00:	defff804 	addi	sp,sp,-32
  805f04:	dc000215 	stw	r16,8(sp)
  805f08:	3021883a 	mov	r16,r6
  805f0c:	dc400315 	stw	r17,12(sp)
  805f10:	8022907a 	slli	r17,r16,1
  805f14:	dd000615 	stw	r20,24(sp)
  805f18:	2829883a 	mov	r20,r5
  805f1c:	01400044 	movi	r5,1
  805f20:	dcc00515 	stw	r19,20(sp)
  805f24:	dc800415 	stw	r18,16(sp)
  805f28:	dfc00715 	stw	ra,28(sp)
  805f2c:	3825883a 	mov	r18,r7
  805f30:	8822d57a 	srli	r17,r17,21
  805f34:	08051b00 	call	8051b0 <_Balloc>
  805f38:	1027883a 	mov	r19,r2
  805f3c:	00800434 	movhi	r2,16
  805f40:	10bfffc4 	addi	r2,r2,-1
  805f44:	808c703a 	and	r6,r16,r2
  805f48:	88000126 	beq	r17,zero,805f50 <__d2b+0x50>
  805f4c:	31800434 	orhi	r6,r6,16
  805f50:	d9800015 	stw	r6,0(sp)
  805f54:	a0002426 	beq	r20,zero,805fe8 <__d2b+0xe8>
  805f58:	d9000104 	addi	r4,sp,4
  805f5c:	dd000115 	stw	r20,4(sp)
  805f60:	08055340 	call	805534 <__lo0bits>
  805f64:	d8c00017 	ldw	r3,0(sp)
  805f68:	10002f1e 	bne	r2,zero,806028 <__d2b+0x128>
  805f6c:	d9000117 	ldw	r4,4(sp)
  805f70:	99000515 	stw	r4,20(r19)
  805f74:	1821003a 	cmpeq	r16,r3,zero
  805f78:	01000084 	movi	r4,2
  805f7c:	2421c83a 	sub	r16,r4,r16
  805f80:	98c00615 	stw	r3,24(r19)
  805f84:	9c000415 	stw	r16,16(r19)
  805f88:	88001f1e 	bne	r17,zero,806008 <__d2b+0x108>
  805f8c:	10bef384 	addi	r2,r2,-1074
  805f90:	90800015 	stw	r2,0(r18)
  805f94:	00900034 	movhi	r2,16384
  805f98:	10bfffc4 	addi	r2,r2,-1
  805f9c:	8085883a 	add	r2,r16,r2
  805fa0:	1085883a 	add	r2,r2,r2
  805fa4:	1085883a 	add	r2,r2,r2
  805fa8:	9885883a 	add	r2,r19,r2
  805fac:	11000517 	ldw	r4,20(r2)
  805fb0:	8020917a 	slli	r16,r16,5
  805fb4:	08054cc0 	call	8054cc <__hi0bits>
  805fb8:	d8c00817 	ldw	r3,32(sp)
  805fbc:	8085c83a 	sub	r2,r16,r2
  805fc0:	18800015 	stw	r2,0(r3)
  805fc4:	9805883a 	mov	r2,r19
  805fc8:	dfc00717 	ldw	ra,28(sp)
  805fcc:	dd000617 	ldw	r20,24(sp)
  805fd0:	dcc00517 	ldw	r19,20(sp)
  805fd4:	dc800417 	ldw	r18,16(sp)
  805fd8:	dc400317 	ldw	r17,12(sp)
  805fdc:	dc000217 	ldw	r16,8(sp)
  805fe0:	dec00804 	addi	sp,sp,32
  805fe4:	f800283a 	ret
  805fe8:	d809883a 	mov	r4,sp
  805fec:	08055340 	call	805534 <__lo0bits>
  805ff0:	d8c00017 	ldw	r3,0(sp)
  805ff4:	04000044 	movi	r16,1
  805ff8:	9c000415 	stw	r16,16(r19)
  805ffc:	98c00515 	stw	r3,20(r19)
  806000:	10800804 	addi	r2,r2,32
  806004:	883fe126 	beq	r17,zero,805f8c <__alt_data_end+0xff805f8c>
  806008:	00c00d44 	movi	r3,53
  80600c:	8c7ef344 	addi	r17,r17,-1075
  806010:	88a3883a 	add	r17,r17,r2
  806014:	1885c83a 	sub	r2,r3,r2
  806018:	d8c00817 	ldw	r3,32(sp)
  80601c:	94400015 	stw	r17,0(r18)
  806020:	18800015 	stw	r2,0(r3)
  806024:	003fe706 	br	805fc4 <__alt_data_end+0xff805fc4>
  806028:	01000804 	movi	r4,32
  80602c:	2089c83a 	sub	r4,r4,r2
  806030:	1908983a 	sll	r4,r3,r4
  806034:	d9400117 	ldw	r5,4(sp)
  806038:	1886d83a 	srl	r3,r3,r2
  80603c:	2148b03a 	or	r4,r4,r5
  806040:	99000515 	stw	r4,20(r19)
  806044:	d8c00015 	stw	r3,0(sp)
  806048:	003fca06 	br	805f74 <__alt_data_end+0xff805f74>

0080604c <__ratio>:
  80604c:	defff904 	addi	sp,sp,-28
  806050:	dc400315 	stw	r17,12(sp)
  806054:	2823883a 	mov	r17,r5
  806058:	d9400104 	addi	r5,sp,4
  80605c:	dfc00615 	stw	ra,24(sp)
  806060:	dcc00515 	stw	r19,20(sp)
  806064:	dc800415 	stw	r18,16(sp)
  806068:	2027883a 	mov	r19,r4
  80606c:	dc000215 	stw	r16,8(sp)
  806070:	0805df40 	call	805df4 <__b2d>
  806074:	d80b883a 	mov	r5,sp
  806078:	8809883a 	mov	r4,r17
  80607c:	1025883a 	mov	r18,r2
  806080:	1821883a 	mov	r16,r3
  806084:	0805df40 	call	805df4 <__b2d>
  806088:	8a000417 	ldw	r8,16(r17)
  80608c:	99000417 	ldw	r4,16(r19)
  806090:	d9400117 	ldw	r5,4(sp)
  806094:	2209c83a 	sub	r4,r4,r8
  806098:	2010917a 	slli	r8,r4,5
  80609c:	d9000017 	ldw	r4,0(sp)
  8060a0:	2909c83a 	sub	r4,r5,r4
  8060a4:	4109883a 	add	r4,r8,r4
  8060a8:	01000e0e 	bge	zero,r4,8060e4 <__ratio+0x98>
  8060ac:	2008953a 	slli	r4,r4,20
  8060b0:	2421883a 	add	r16,r4,r16
  8060b4:	100d883a 	mov	r6,r2
  8060b8:	180f883a 	mov	r7,r3
  8060bc:	9009883a 	mov	r4,r18
  8060c0:	800b883a 	mov	r5,r16
  8060c4:	08097a40 	call	8097a4 <__divdf3>
  8060c8:	dfc00617 	ldw	ra,24(sp)
  8060cc:	dcc00517 	ldw	r19,20(sp)
  8060d0:	dc800417 	ldw	r18,16(sp)
  8060d4:	dc400317 	ldw	r17,12(sp)
  8060d8:	dc000217 	ldw	r16,8(sp)
  8060dc:	dec00704 	addi	sp,sp,28
  8060e0:	f800283a 	ret
  8060e4:	2008953a 	slli	r4,r4,20
  8060e8:	1907c83a 	sub	r3,r3,r4
  8060ec:	003ff106 	br	8060b4 <__alt_data_end+0xff8060b4>

008060f0 <_mprec_log10>:
  8060f0:	defffe04 	addi	sp,sp,-8
  8060f4:	dc000015 	stw	r16,0(sp)
  8060f8:	dfc00115 	stw	ra,4(sp)
  8060fc:	008005c4 	movi	r2,23
  806100:	2021883a 	mov	r16,r4
  806104:	11000d0e 	bge	r2,r4,80613c <_mprec_log10+0x4c>
  806108:	0005883a 	mov	r2,zero
  80610c:	00cffc34 	movhi	r3,16368
  806110:	843fffc4 	addi	r16,r16,-1
  806114:	000d883a 	mov	r6,zero
  806118:	01d00934 	movhi	r7,16420
  80611c:	1009883a 	mov	r4,r2
  806120:	180b883a 	mov	r5,r3
  806124:	080a3cc0 	call	80a3cc <__muldf3>
  806128:	803ff91e 	bne	r16,zero,806110 <__alt_data_end+0xff806110>
  80612c:	dfc00117 	ldw	ra,4(sp)
  806130:	dc000017 	ldw	r16,0(sp)
  806134:	dec00204 	addi	sp,sp,8
  806138:	f800283a 	ret
  80613c:	202090fa 	slli	r16,r4,3
  806140:	00802074 	movhi	r2,129
  806144:	10be7204 	addi	r2,r2,-1592
  806148:	1421883a 	add	r16,r2,r16
  80614c:	80800017 	ldw	r2,0(r16)
  806150:	80c00117 	ldw	r3,4(r16)
  806154:	dfc00117 	ldw	ra,4(sp)
  806158:	dc000017 	ldw	r16,0(sp)
  80615c:	dec00204 	addi	sp,sp,8
  806160:	f800283a 	ret

00806164 <__copybits>:
  806164:	297fffc4 	addi	r5,r5,-1
  806168:	280fd17a 	srai	r7,r5,5
  80616c:	30c00417 	ldw	r3,16(r6)
  806170:	30800504 	addi	r2,r6,20
  806174:	39c00044 	addi	r7,r7,1
  806178:	18c7883a 	add	r3,r3,r3
  80617c:	39cf883a 	add	r7,r7,r7
  806180:	18c7883a 	add	r3,r3,r3
  806184:	39cf883a 	add	r7,r7,r7
  806188:	10c7883a 	add	r3,r2,r3
  80618c:	21cf883a 	add	r7,r4,r7
  806190:	10c00d2e 	bgeu	r2,r3,8061c8 <__copybits+0x64>
  806194:	200b883a 	mov	r5,r4
  806198:	12000017 	ldw	r8,0(r2)
  80619c:	29400104 	addi	r5,r5,4
  8061a0:	10800104 	addi	r2,r2,4
  8061a4:	2a3fff15 	stw	r8,-4(r5)
  8061a8:	10fffb36 	bltu	r2,r3,806198 <__alt_data_end+0xff806198>
  8061ac:	1985c83a 	sub	r2,r3,r6
  8061b0:	10bffac4 	addi	r2,r2,-21
  8061b4:	1004d0ba 	srli	r2,r2,2
  8061b8:	10800044 	addi	r2,r2,1
  8061bc:	1085883a 	add	r2,r2,r2
  8061c0:	1085883a 	add	r2,r2,r2
  8061c4:	2089883a 	add	r4,r4,r2
  8061c8:	21c0032e 	bgeu	r4,r7,8061d8 <__copybits+0x74>
  8061cc:	20000015 	stw	zero,0(r4)
  8061d0:	21000104 	addi	r4,r4,4
  8061d4:	21fffd36 	bltu	r4,r7,8061cc <__alt_data_end+0xff8061cc>
  8061d8:	f800283a 	ret

008061dc <__any_on>:
  8061dc:	20c00417 	ldw	r3,16(r4)
  8061e0:	2805d17a 	srai	r2,r5,5
  8061e4:	21000504 	addi	r4,r4,20
  8061e8:	18800d0e 	bge	r3,r2,806220 <__any_on+0x44>
  8061ec:	18c7883a 	add	r3,r3,r3
  8061f0:	18c7883a 	add	r3,r3,r3
  8061f4:	20c7883a 	add	r3,r4,r3
  8061f8:	20c0192e 	bgeu	r4,r3,806260 <__any_on+0x84>
  8061fc:	18bfff17 	ldw	r2,-4(r3)
  806200:	18ffff04 	addi	r3,r3,-4
  806204:	1000041e 	bne	r2,zero,806218 <__any_on+0x3c>
  806208:	20c0142e 	bgeu	r4,r3,80625c <__any_on+0x80>
  80620c:	18ffff04 	addi	r3,r3,-4
  806210:	19400017 	ldw	r5,0(r3)
  806214:	283ffc26 	beq	r5,zero,806208 <__alt_data_end+0xff806208>
  806218:	00800044 	movi	r2,1
  80621c:	f800283a 	ret
  806220:	10c00a0e 	bge	r2,r3,80624c <__any_on+0x70>
  806224:	1085883a 	add	r2,r2,r2
  806228:	1085883a 	add	r2,r2,r2
  80622c:	294007cc 	andi	r5,r5,31
  806230:	2087883a 	add	r3,r4,r2
  806234:	283ff026 	beq	r5,zero,8061f8 <__alt_data_end+0xff8061f8>
  806238:	19800017 	ldw	r6,0(r3)
  80623c:	3144d83a 	srl	r2,r6,r5
  806240:	114a983a 	sll	r5,r2,r5
  806244:	317ff41e 	bne	r6,r5,806218 <__alt_data_end+0xff806218>
  806248:	003feb06 	br	8061f8 <__alt_data_end+0xff8061f8>
  80624c:	1085883a 	add	r2,r2,r2
  806250:	1085883a 	add	r2,r2,r2
  806254:	2087883a 	add	r3,r4,r2
  806258:	003fe706 	br	8061f8 <__alt_data_end+0xff8061f8>
  80625c:	f800283a 	ret
  806260:	0005883a 	mov	r2,zero
  806264:	f800283a 	ret

00806268 <__fpclassifyd>:
  806268:	00a00034 	movhi	r2,32768
  80626c:	10bfffc4 	addi	r2,r2,-1
  806270:	2884703a 	and	r2,r5,r2
  806274:	10000726 	beq	r2,zero,806294 <__fpclassifyd+0x2c>
  806278:	00fffc34 	movhi	r3,65520
  80627c:	019ff834 	movhi	r6,32736
  806280:	28c7883a 	add	r3,r5,r3
  806284:	31bfffc4 	addi	r6,r6,-1
  806288:	30c00536 	bltu	r6,r3,8062a0 <__fpclassifyd+0x38>
  80628c:	00800104 	movi	r2,4
  806290:	f800283a 	ret
  806294:	2000021e 	bne	r4,zero,8062a0 <__fpclassifyd+0x38>
  806298:	00800084 	movi	r2,2
  80629c:	f800283a 	ret
  8062a0:	00dffc34 	movhi	r3,32752
  8062a4:	019ff834 	movhi	r6,32736
  8062a8:	28cb883a 	add	r5,r5,r3
  8062ac:	31bfffc4 	addi	r6,r6,-1
  8062b0:	317ff62e 	bgeu	r6,r5,80628c <__alt_data_end+0xff80628c>
  8062b4:	01400434 	movhi	r5,16
  8062b8:	297fffc4 	addi	r5,r5,-1
  8062bc:	28800236 	bltu	r5,r2,8062c8 <__fpclassifyd+0x60>
  8062c0:	008000c4 	movi	r2,3
  8062c4:	f800283a 	ret
  8062c8:	10c00226 	beq	r2,r3,8062d4 <__fpclassifyd+0x6c>
  8062cc:	0005883a 	mov	r2,zero
  8062d0:	f800283a 	ret
  8062d4:	2005003a 	cmpeq	r2,r4,zero
  8062d8:	f800283a 	ret

008062dc <strcmp>:
  8062dc:	2144b03a 	or	r2,r4,r5
  8062e0:	108000cc 	andi	r2,r2,3
  8062e4:	1000171e 	bne	r2,zero,806344 <strcmp+0x68>
  8062e8:	20800017 	ldw	r2,0(r4)
  8062ec:	28c00017 	ldw	r3,0(r5)
  8062f0:	10c0141e 	bne	r2,r3,806344 <strcmp+0x68>
  8062f4:	027fbff4 	movhi	r9,65279
  8062f8:	4a7fbfc4 	addi	r9,r9,-257
  8062fc:	0086303a 	nor	r3,zero,r2
  806300:	02202074 	movhi	r8,32897
  806304:	1245883a 	add	r2,r2,r9
  806308:	42202004 	addi	r8,r8,-32640
  80630c:	10c4703a 	and	r2,r2,r3
  806310:	1204703a 	and	r2,r2,r8
  806314:	10000226 	beq	r2,zero,806320 <strcmp+0x44>
  806318:	00002306 	br	8063a8 <strcmp+0xcc>
  80631c:	1000221e 	bne	r2,zero,8063a8 <strcmp+0xcc>
  806320:	21000104 	addi	r4,r4,4
  806324:	20c00017 	ldw	r3,0(r4)
  806328:	29400104 	addi	r5,r5,4
  80632c:	29800017 	ldw	r6,0(r5)
  806330:	1a4f883a 	add	r7,r3,r9
  806334:	00c4303a 	nor	r2,zero,r3
  806338:	3884703a 	and	r2,r7,r2
  80633c:	1204703a 	and	r2,r2,r8
  806340:	19bff626 	beq	r3,r6,80631c <__alt_data_end+0xff80631c>
  806344:	20800003 	ldbu	r2,0(r4)
  806348:	10c03fcc 	andi	r3,r2,255
  80634c:	18c0201c 	xori	r3,r3,128
  806350:	18ffe004 	addi	r3,r3,-128
  806354:	18000c26 	beq	r3,zero,806388 <strcmp+0xac>
  806358:	29800007 	ldb	r6,0(r5)
  80635c:	19800326 	beq	r3,r6,80636c <strcmp+0x90>
  806360:	00001306 	br	8063b0 <strcmp+0xd4>
  806364:	29800007 	ldb	r6,0(r5)
  806368:	11800b1e 	bne	r2,r6,806398 <strcmp+0xbc>
  80636c:	21000044 	addi	r4,r4,1
  806370:	20c00003 	ldbu	r3,0(r4)
  806374:	29400044 	addi	r5,r5,1
  806378:	18803fcc 	andi	r2,r3,255
  80637c:	1080201c 	xori	r2,r2,128
  806380:	10bfe004 	addi	r2,r2,-128
  806384:	103ff71e 	bne	r2,zero,806364 <__alt_data_end+0xff806364>
  806388:	0007883a 	mov	r3,zero
  80638c:	28800003 	ldbu	r2,0(r5)
  806390:	1885c83a 	sub	r2,r3,r2
  806394:	f800283a 	ret
  806398:	28800003 	ldbu	r2,0(r5)
  80639c:	18c03fcc 	andi	r3,r3,255
  8063a0:	1885c83a 	sub	r2,r3,r2
  8063a4:	f800283a 	ret
  8063a8:	0005883a 	mov	r2,zero
  8063ac:	f800283a 	ret
  8063b0:	10c03fcc 	andi	r3,r2,255
  8063b4:	003ff506 	br	80638c <__alt_data_end+0xff80638c>

008063b8 <strlen>:
  8063b8:	208000cc 	andi	r2,r4,3
  8063bc:	10002026 	beq	r2,zero,806440 <strlen+0x88>
  8063c0:	20800007 	ldb	r2,0(r4)
  8063c4:	10002026 	beq	r2,zero,806448 <strlen+0x90>
  8063c8:	2005883a 	mov	r2,r4
  8063cc:	00000206 	br	8063d8 <strlen+0x20>
  8063d0:	10c00007 	ldb	r3,0(r2)
  8063d4:	18001826 	beq	r3,zero,806438 <strlen+0x80>
  8063d8:	10800044 	addi	r2,r2,1
  8063dc:	10c000cc 	andi	r3,r2,3
  8063e0:	183ffb1e 	bne	r3,zero,8063d0 <__alt_data_end+0xff8063d0>
  8063e4:	10c00017 	ldw	r3,0(r2)
  8063e8:	01ffbff4 	movhi	r7,65279
  8063ec:	39ffbfc4 	addi	r7,r7,-257
  8063f0:	00ca303a 	nor	r5,zero,r3
  8063f4:	01a02074 	movhi	r6,32897
  8063f8:	19c7883a 	add	r3,r3,r7
  8063fc:	31a02004 	addi	r6,r6,-32640
  806400:	1946703a 	and	r3,r3,r5
  806404:	1986703a 	and	r3,r3,r6
  806408:	1800091e 	bne	r3,zero,806430 <strlen+0x78>
  80640c:	10800104 	addi	r2,r2,4
  806410:	10c00017 	ldw	r3,0(r2)
  806414:	19cb883a 	add	r5,r3,r7
  806418:	00c6303a 	nor	r3,zero,r3
  80641c:	28c6703a 	and	r3,r5,r3
  806420:	1986703a 	and	r3,r3,r6
  806424:	183ff926 	beq	r3,zero,80640c <__alt_data_end+0xff80640c>
  806428:	00000106 	br	806430 <strlen+0x78>
  80642c:	10800044 	addi	r2,r2,1
  806430:	10c00007 	ldb	r3,0(r2)
  806434:	183ffd1e 	bne	r3,zero,80642c <__alt_data_end+0xff80642c>
  806438:	1105c83a 	sub	r2,r2,r4
  80643c:	f800283a 	ret
  806440:	2005883a 	mov	r2,r4
  806444:	003fe706 	br	8063e4 <__alt_data_end+0xff8063e4>
  806448:	0005883a 	mov	r2,zero
  80644c:	f800283a 	ret

00806450 <__ssprint_r>:
  806450:	30800217 	ldw	r2,8(r6)
  806454:	defff604 	addi	sp,sp,-40
  806458:	dc800215 	stw	r18,8(sp)
  80645c:	dfc00915 	stw	ra,36(sp)
  806460:	df000815 	stw	fp,32(sp)
  806464:	ddc00715 	stw	r23,28(sp)
  806468:	dd800615 	stw	r22,24(sp)
  80646c:	dd400515 	stw	r21,20(sp)
  806470:	dd000415 	stw	r20,16(sp)
  806474:	dcc00315 	stw	r19,12(sp)
  806478:	dc400115 	stw	r17,4(sp)
  80647c:	dc000015 	stw	r16,0(sp)
  806480:	3025883a 	mov	r18,r6
  806484:	10005826 	beq	r2,zero,8065e8 <__ssprint_r+0x198>
  806488:	2027883a 	mov	r19,r4
  80648c:	35c00017 	ldw	r23,0(r6)
  806490:	29000017 	ldw	r4,0(r5)
  806494:	28800217 	ldw	r2,8(r5)
  806498:	2823883a 	mov	r17,r5
  80649c:	0039883a 	mov	fp,zero
  8064a0:	0021883a 	mov	r16,zero
  8064a4:	80003926 	beq	r16,zero,80658c <__ssprint_r+0x13c>
  8064a8:	102b883a 	mov	r21,r2
  8064ac:	102d883a 	mov	r22,r2
  8064b0:	80803a36 	bltu	r16,r2,80659c <__ssprint_r+0x14c>
  8064b4:	88c0030b 	ldhu	r3,12(r17)
  8064b8:	1881200c 	andi	r2,r3,1152
  8064bc:	10002626 	beq	r2,zero,806558 <__ssprint_r+0x108>
  8064c0:	88800517 	ldw	r2,20(r17)
  8064c4:	89400417 	ldw	r5,16(r17)
  8064c8:	81800044 	addi	r6,r16,1
  8064cc:	108f883a 	add	r7,r2,r2
  8064d0:	3885883a 	add	r2,r7,r2
  8064d4:	100ed7fa 	srli	r7,r2,31
  8064d8:	216dc83a 	sub	r22,r4,r5
  8064dc:	3589883a 	add	r4,r6,r22
  8064e0:	3885883a 	add	r2,r7,r2
  8064e4:	102bd07a 	srai	r21,r2,1
  8064e8:	a80d883a 	mov	r6,r21
  8064ec:	a900022e 	bgeu	r21,r4,8064f8 <__ssprint_r+0xa8>
  8064f0:	202b883a 	mov	r21,r4
  8064f4:	200d883a 	mov	r6,r4
  8064f8:	18c1000c 	andi	r3,r3,1024
  8064fc:	18002a26 	beq	r3,zero,8065a8 <__ssprint_r+0x158>
  806500:	300b883a 	mov	r5,r6
  806504:	9809883a 	mov	r4,r19
  806508:	08005800 	call	800580 <_malloc_r>
  80650c:	1029883a 	mov	r20,r2
  806510:	10002c26 	beq	r2,zero,8065c4 <__ssprint_r+0x174>
  806514:	89400417 	ldw	r5,16(r17)
  806518:	b00d883a 	mov	r6,r22
  80651c:	1009883a 	mov	r4,r2
  806520:	08050680 	call	805068 <memcpy>
  806524:	8880030b 	ldhu	r2,12(r17)
  806528:	00fedfc4 	movi	r3,-1153
  80652c:	10c4703a 	and	r2,r2,r3
  806530:	10802014 	ori	r2,r2,128
  806534:	8880030d 	sth	r2,12(r17)
  806538:	a589883a 	add	r4,r20,r22
  80653c:	adadc83a 	sub	r22,r21,r22
  806540:	8d400515 	stw	r21,20(r17)
  806544:	8d800215 	stw	r22,8(r17)
  806548:	8d000415 	stw	r20,16(r17)
  80654c:	89000015 	stw	r4,0(r17)
  806550:	802b883a 	mov	r21,r16
  806554:	802d883a 	mov	r22,r16
  806558:	b00d883a 	mov	r6,r22
  80655c:	e00b883a 	mov	r5,fp
  806560:	0807a9c0 	call	807a9c <memmove>
  806564:	88800217 	ldw	r2,8(r17)
  806568:	89000017 	ldw	r4,0(r17)
  80656c:	90c00217 	ldw	r3,8(r18)
  806570:	1545c83a 	sub	r2,r2,r21
  806574:	2589883a 	add	r4,r4,r22
  806578:	88800215 	stw	r2,8(r17)
  80657c:	89000015 	stw	r4,0(r17)
  806580:	1c21c83a 	sub	r16,r3,r16
  806584:	94000215 	stw	r16,8(r18)
  806588:	80001726 	beq	r16,zero,8065e8 <__ssprint_r+0x198>
  80658c:	bf000017 	ldw	fp,0(r23)
  806590:	bc000117 	ldw	r16,4(r23)
  806594:	bdc00204 	addi	r23,r23,8
  806598:	003fc206 	br	8064a4 <__alt_data_end+0xff8064a4>
  80659c:	802b883a 	mov	r21,r16
  8065a0:	802d883a 	mov	r22,r16
  8065a4:	003fec06 	br	806558 <__alt_data_end+0xff806558>
  8065a8:	9809883a 	mov	r4,r19
  8065ac:	0807bf80 	call	807bf8 <_realloc_r>
  8065b0:	1029883a 	mov	r20,r2
  8065b4:	103fe01e 	bne	r2,zero,806538 <__alt_data_end+0xff806538>
  8065b8:	89400417 	ldw	r5,16(r17)
  8065bc:	9809883a 	mov	r4,r19
  8065c0:	0804b980 	call	804b98 <_free_r>
  8065c4:	88c0030b 	ldhu	r3,12(r17)
  8065c8:	00800304 	movi	r2,12
  8065cc:	98800015 	stw	r2,0(r19)
  8065d0:	18c01014 	ori	r3,r3,64
  8065d4:	88c0030d 	sth	r3,12(r17)
  8065d8:	00bfffc4 	movi	r2,-1
  8065dc:	90000215 	stw	zero,8(r18)
  8065e0:	90000115 	stw	zero,4(r18)
  8065e4:	00000206 	br	8065f0 <__ssprint_r+0x1a0>
  8065e8:	90000115 	stw	zero,4(r18)
  8065ec:	0005883a 	mov	r2,zero
  8065f0:	dfc00917 	ldw	ra,36(sp)
  8065f4:	df000817 	ldw	fp,32(sp)
  8065f8:	ddc00717 	ldw	r23,28(sp)
  8065fc:	dd800617 	ldw	r22,24(sp)
  806600:	dd400517 	ldw	r21,20(sp)
  806604:	dd000417 	ldw	r20,16(sp)
  806608:	dcc00317 	ldw	r19,12(sp)
  80660c:	dc800217 	ldw	r18,8(sp)
  806610:	dc400117 	ldw	r17,4(sp)
  806614:	dc000017 	ldw	r16,0(sp)
  806618:	dec00a04 	addi	sp,sp,40
  80661c:	f800283a 	ret

00806620 <___svfiprintf_internal_r>:
  806620:	2880030b 	ldhu	r2,12(r5)
  806624:	deffc804 	addi	sp,sp,-224
  806628:	dcc03115 	stw	r19,196(sp)
  80662c:	dfc03715 	stw	ra,220(sp)
  806630:	df003615 	stw	fp,216(sp)
  806634:	ddc03515 	stw	r23,212(sp)
  806638:	dd803415 	stw	r22,208(sp)
  80663c:	dd403315 	stw	r21,204(sp)
  806640:	dd003215 	stw	r20,200(sp)
  806644:	dc803015 	stw	r18,192(sp)
  806648:	dc402f15 	stw	r17,188(sp)
  80664c:	dc002e15 	stw	r16,184(sp)
  806650:	d9402315 	stw	r5,140(sp)
  806654:	d9002715 	stw	r4,156(sp)
  806658:	1080200c 	andi	r2,r2,128
  80665c:	d9c02415 	stw	r7,144(sp)
  806660:	3027883a 	mov	r19,r6
  806664:	10000226 	beq	r2,zero,806670 <___svfiprintf_internal_r+0x50>
  806668:	28800417 	ldw	r2,16(r5)
  80666c:	10046d26 	beq	r2,zero,807824 <___svfiprintf_internal_r+0x1204>
  806670:	d8801a04 	addi	r2,sp,104
  806674:	d8c019c4 	addi	r3,sp,103
  806678:	05802074 	movhi	r22,129
  80667c:	10c9c83a 	sub	r4,r2,r3
  806680:	b5bea404 	addi	r22,r22,-1392
  806684:	d8801e15 	stw	r2,120(sp)
  806688:	d8c01f15 	stw	r3,124(sp)
  80668c:	dec01a15 	stw	sp,104(sp)
  806690:	d8001c15 	stw	zero,112(sp)
  806694:	d8001b15 	stw	zero,108(sp)
  806698:	d811883a 	mov	r8,sp
  80669c:	d8002915 	stw	zero,164(sp)
  8066a0:	d8002615 	stw	zero,152(sp)
  8066a4:	d9002c15 	stw	r4,176(sp)
  8066a8:	98800007 	ldb	r2,0(r19)
  8066ac:	10031426 	beq	r2,zero,807300 <___svfiprintf_internal_r+0xce0>
  8066b0:	00c00944 	movi	r3,37
  8066b4:	9825883a 	mov	r18,r19
  8066b8:	10c0021e 	bne	r2,r3,8066c4 <___svfiprintf_internal_r+0xa4>
  8066bc:	00001406 	br	806710 <___svfiprintf_internal_r+0xf0>
  8066c0:	10c00326 	beq	r2,r3,8066d0 <___svfiprintf_internal_r+0xb0>
  8066c4:	94800044 	addi	r18,r18,1
  8066c8:	90800007 	ldb	r2,0(r18)
  8066cc:	103ffc1e 	bne	r2,zero,8066c0 <__alt_data_end+0xff8066c0>
  8066d0:	94e1c83a 	sub	r16,r18,r19
  8066d4:	80000e26 	beq	r16,zero,806710 <___svfiprintf_internal_r+0xf0>
  8066d8:	d8c01c17 	ldw	r3,112(sp)
  8066dc:	d8801b17 	ldw	r2,108(sp)
  8066e0:	44c00015 	stw	r19,0(r8)
  8066e4:	1c07883a 	add	r3,r3,r16
  8066e8:	10800044 	addi	r2,r2,1
  8066ec:	d8c01c15 	stw	r3,112(sp)
  8066f0:	44000115 	stw	r16,4(r8)
  8066f4:	d8801b15 	stw	r2,108(sp)
  8066f8:	00c001c4 	movi	r3,7
  8066fc:	18835c16 	blt	r3,r2,807470 <___svfiprintf_internal_r+0xe50>
  806700:	42000204 	addi	r8,r8,8
  806704:	d9402617 	ldw	r5,152(sp)
  806708:	2c0b883a 	add	r5,r5,r16
  80670c:	d9402615 	stw	r5,152(sp)
  806710:	90800007 	ldb	r2,0(r18)
  806714:	1002fc26 	beq	r2,zero,807308 <___svfiprintf_internal_r+0xce8>
  806718:	0023883a 	mov	r17,zero
  80671c:	00bfffc4 	movi	r2,-1
  806720:	0021883a 	mov	r16,zero
  806724:	94c00044 	addi	r19,r18,1
  806728:	90c00047 	ldb	r3,1(r18)
  80672c:	dc402105 	stb	r17,132(sp)
  806730:	d8001d85 	stb	zero,118(sp)
  806734:	002b883a 	mov	r21,zero
  806738:	d8802015 	stw	r2,128(sp)
  80673c:	d8002515 	stw	zero,148(sp)
  806740:	04801604 	movi	r18,88
  806744:	05000244 	movi	r20,9
  806748:	402f883a 	mov	r23,r8
  80674c:	8023883a 	mov	r17,r16
  806750:	9cc00044 	addi	r19,r19,1
  806754:	18bff804 	addi	r2,r3,-32
  806758:	9081fb36 	bltu	r18,r2,806f48 <___svfiprintf_internal_r+0x928>
  80675c:	100490ba 	slli	r2,r2,2
  806760:	01002034 	movhi	r4,128
  806764:	2119dd04 	addi	r4,r4,26484
  806768:	1105883a 	add	r2,r2,r4
  80676c:	10800017 	ldw	r2,0(r2)
  806770:	1000683a 	jmp	r2
  806774:	00806974 	movhi	r2,421
  806778:	00806f48 	cmpgei	r2,zero,445
  80677c:	00806f48 	cmpgei	r2,zero,445
  806780:	00806968 	cmpgeui	r2,zero,421
  806784:	00806f48 	cmpgei	r2,zero,445
  806788:	00806f48 	cmpgei	r2,zero,445
  80678c:	00806f48 	cmpgei	r2,zero,445
  806790:	00806f48 	cmpgei	r2,zero,445
  806794:	00806f48 	cmpgei	r2,zero,445
  806798:	00806f48 	cmpgei	r2,zero,445
  80679c:	008068d8 	cmpnei	r2,zero,419
  8067a0:	00806ad4 	movui	r2,427
  8067a4:	00806f48 	cmpgei	r2,zero,445
  8067a8:	00806900 	call	80690 <__alt_mem_sdram-0x77f970>
  8067ac:	00806f84 	movi	r2,446
  8067b0:	00806f48 	cmpgei	r2,zero,445
  8067b4:	00806f78 	rdprs	r2,zero,445
  8067b8:	00806f0c 	andi	r2,zero,444
  8067bc:	00806f0c 	andi	r2,zero,444
  8067c0:	00806f0c 	andi	r2,zero,444
  8067c4:	00806f0c 	andi	r2,zero,444
  8067c8:	00806f0c 	andi	r2,zero,444
  8067cc:	00806f0c 	andi	r2,zero,444
  8067d0:	00806f0c 	andi	r2,zero,444
  8067d4:	00806f0c 	andi	r2,zero,444
  8067d8:	00806f0c 	andi	r2,zero,444
  8067dc:	00806f48 	cmpgei	r2,zero,445
  8067e0:	00806f48 	cmpgei	r2,zero,445
  8067e4:	00806f48 	cmpgei	r2,zero,445
  8067e8:	00806f48 	cmpgei	r2,zero,445
  8067ec:	00806f48 	cmpgei	r2,zero,445
  8067f0:	00806f48 	cmpgei	r2,zero,445
  8067f4:	00806f48 	cmpgei	r2,zero,445
  8067f8:	00806f48 	cmpgei	r2,zero,445
  8067fc:	00806f48 	cmpgei	r2,zero,445
  806800:	00806f48 	cmpgei	r2,zero,445
  806804:	00806e90 	cmplti	r2,zero,442
  806808:	00806f48 	cmpgei	r2,zero,445
  80680c:	00806f48 	cmpgei	r2,zero,445
  806810:	00806f48 	cmpgei	r2,zero,445
  806814:	00806f48 	cmpgei	r2,zero,445
  806818:	00806f48 	cmpgei	r2,zero,445
  80681c:	00806f48 	cmpgei	r2,zero,445
  806820:	00806f48 	cmpgei	r2,zero,445
  806824:	00806f48 	cmpgei	r2,zero,445
  806828:	00806f48 	cmpgei	r2,zero,445
  80682c:	00806f48 	cmpgei	r2,zero,445
  806830:	00807040 	call	80704 <__alt_mem_sdram-0x77f8fc>
  806834:	00806f48 	cmpgei	r2,zero,445
  806838:	00806f48 	cmpgei	r2,zero,445
  80683c:	00806f48 	cmpgei	r2,zero,445
  806840:	00806f48 	cmpgei	r2,zero,445
  806844:	00806f48 	cmpgei	r2,zero,445
  806848:	00806fcc 	andi	r2,zero,447
  80684c:	00806f48 	cmpgei	r2,zero,445
  806850:	00806f48 	cmpgei	r2,zero,445
  806854:	00806ccc 	andi	r2,zero,435
  806858:	00806f48 	cmpgei	r2,zero,445
  80685c:	00806f48 	cmpgei	r2,zero,445
  806860:	00806f48 	cmpgei	r2,zero,445
  806864:	00806f48 	cmpgei	r2,zero,445
  806868:	00806f48 	cmpgei	r2,zero,445
  80686c:	00806f48 	cmpgei	r2,zero,445
  806870:	00806f48 	cmpgei	r2,zero,445
  806874:	00806f48 	cmpgei	r2,zero,445
  806878:	00806f48 	cmpgei	r2,zero,445
  80687c:	00806f48 	cmpgei	r2,zero,445
  806880:	00806b98 	cmpnei	r2,zero,430
  806884:	00806d7c 	xorhi	r2,zero,437
  806888:	00806f48 	cmpgei	r2,zero,445
  80688c:	00806f48 	cmpgei	r2,zero,445
  806890:	00806f48 	cmpgei	r2,zero,445
  806894:	00806d70 	cmpltui	r2,zero,437
  806898:	00806d7c 	xorhi	r2,zero,437
  80689c:	00806f48 	cmpgei	r2,zero,445
  8068a0:	00806f48 	cmpgei	r2,zero,445
  8068a4:	00806d5c 	xori	r2,zero,437
  8068a8:	00806f48 	cmpgei	r2,zero,445
  8068ac:	00806d1c 	xori	r2,zero,436
  8068b0:	00806ae8 	cmpgeui	r2,zero,427
  8068b4:	0080690c 	andi	r2,zero,420
  8068b8:	00806e84 	movi	r2,442
  8068bc:	00806f48 	cmpgei	r2,zero,445
  8068c0:	00806e30 	cmpltui	r2,zero,440
  8068c4:	00806f48 	cmpgei	r2,zero,445
  8068c8:	00806a4c 	andi	r2,zero,425
  8068cc:	00806f48 	cmpgei	r2,zero,445
  8068d0:	00806f48 	cmpgei	r2,zero,445
  8068d4:	00806998 	cmpnei	r2,zero,422
  8068d8:	d9002417 	ldw	r4,144(sp)
  8068dc:	d9402417 	ldw	r5,144(sp)
  8068e0:	21000017 	ldw	r4,0(r4)
  8068e4:	28800104 	addi	r2,r5,4
  8068e8:	d9002515 	stw	r4,148(sp)
  8068ec:	20032b0e 	bge	r4,zero,80759c <___svfiprintf_internal_r+0xf7c>
  8068f0:	d8c02517 	ldw	r3,148(sp)
  8068f4:	d8802415 	stw	r2,144(sp)
  8068f8:	00c7c83a 	sub	r3,zero,r3
  8068fc:	d8c02515 	stw	r3,148(sp)
  806900:	8c400114 	ori	r17,r17,4
  806904:	98c00007 	ldb	r3,0(r19)
  806908:	003f9106 	br	806750 <__alt_data_end+0xff806750>
  80690c:	00800c04 	movi	r2,48
  806910:	d9402417 	ldw	r5,144(sp)
  806914:	d9002017 	ldw	r4,128(sp)
  806918:	d8801d05 	stb	r2,116(sp)
  80691c:	00801e04 	movi	r2,120
  806920:	d8801d45 	stb	r2,117(sp)
  806924:	d8001d85 	stb	zero,118(sp)
  806928:	b811883a 	mov	r8,r23
  80692c:	28c00104 	addi	r3,r5,4
  806930:	2c800017 	ldw	r18,0(r5)
  806934:	0029883a 	mov	r20,zero
  806938:	88800094 	ori	r2,r17,2
  80693c:	20036316 	blt	r4,zero,8076cc <___svfiprintf_internal_r+0x10ac>
  806940:	00bfdfc4 	movi	r2,-129
  806944:	88a0703a 	and	r16,r17,r2
  806948:	d8c02415 	stw	r3,144(sp)
  80694c:	84000094 	ori	r16,r16,2
  806950:	90031c26 	beq	r18,zero,8075c4 <___svfiprintf_internal_r+0xfa4>
  806954:	01402074 	movhi	r5,129
  806958:	297e4404 	addi	r5,r5,-1776
  80695c:	002b883a 	mov	r21,zero
  806960:	d9402915 	stw	r5,164(sp)
  806964:	00002906 	br	806a0c <___svfiprintf_internal_r+0x3ec>
  806968:	8c400054 	ori	r17,r17,1
  80696c:	98c00007 	ldb	r3,0(r19)
  806970:	003f7706 	br	806750 <__alt_data_end+0xff806750>
  806974:	a8803fcc 	andi	r2,r21,255
  806978:	1080201c 	xori	r2,r2,128
  80697c:	10bfe004 	addi	r2,r2,-128
  806980:	10032a1e 	bne	r2,zero,80762c <___svfiprintf_internal_r+0x100c>
  806984:	00c00044 	movi	r3,1
  806988:	d8c02105 	stb	r3,132(sp)
  80698c:	05400804 	movi	r21,32
  806990:	98c00007 	ldb	r3,0(r19)
  806994:	003f6e06 	br	806750 <__alt_data_end+0xff806750>
  806998:	8821883a 	mov	r16,r17
  80699c:	dc402103 	ldbu	r17,132(sp)
  8069a0:	b811883a 	mov	r8,r23
  8069a4:	8c403fcc 	andi	r17,r17,255
  8069a8:	8803f01e 	bne	r17,zero,80796c <___svfiprintf_internal_r+0x134c>
  8069ac:	00802074 	movhi	r2,129
  8069b0:	10be4404 	addi	r2,r2,-1776
  8069b4:	d8802915 	stw	r2,164(sp)
  8069b8:	8080080c 	andi	r2,r16,32
  8069bc:	1000cd26 	beq	r2,zero,806cf4 <___svfiprintf_internal_r+0x6d4>
  8069c0:	d9002417 	ldw	r4,144(sp)
  8069c4:	24800017 	ldw	r18,0(r4)
  8069c8:	25000117 	ldw	r20,4(r4)
  8069cc:	21000204 	addi	r4,r4,8
  8069d0:	d9002415 	stw	r4,144(sp)
  8069d4:	8080004c 	andi	r2,r16,1
  8069d8:	1002c726 	beq	r2,zero,8074f8 <___svfiprintf_internal_r+0xed8>
  8069dc:	9504b03a 	or	r2,r18,r20
  8069e0:	1003061e 	bne	r2,zero,8075fc <___svfiprintf_internal_r+0xfdc>
  8069e4:	d9002017 	ldw	r4,128(sp)
  8069e8:	d8001d85 	stb	zero,118(sp)
  8069ec:	20033e16 	blt	r4,zero,8076e8 <___svfiprintf_internal_r+0x10c8>
  8069f0:	00bfdfc4 	movi	r2,-129
  8069f4:	80a0703a 	and	r16,r16,r2
  8069f8:	d9402017 	ldw	r5,128(sp)
  8069fc:	002b883a 	mov	r21,zero
  806a00:	28002826 	beq	r5,zero,806aa4 <___svfiprintf_internal_r+0x484>
  806a04:	0025883a 	mov	r18,zero
  806a08:	0029883a 	mov	r20,zero
  806a0c:	d9002917 	ldw	r4,164(sp)
  806a10:	dc401a04 	addi	r17,sp,104
  806a14:	908003cc 	andi	r2,r18,15
  806a18:	a006973a 	slli	r3,r20,28
  806a1c:	2085883a 	add	r2,r4,r2
  806a20:	9024d13a 	srli	r18,r18,4
  806a24:	10800003 	ldbu	r2,0(r2)
  806a28:	a028d13a 	srli	r20,r20,4
  806a2c:	8c7fffc4 	addi	r17,r17,-1
  806a30:	1ca4b03a 	or	r18,r3,r18
  806a34:	88800005 	stb	r2,0(r17)
  806a38:	9504b03a 	or	r2,r18,r20
  806a3c:	103ff51e 	bne	r2,zero,806a14 <__alt_data_end+0xff806a14>
  806a40:	d8801e17 	ldw	r2,120(sp)
  806a44:	1469c83a 	sub	r20,r2,r17
  806a48:	00001906 	br	806ab0 <___svfiprintf_internal_r+0x490>
  806a4c:	8821883a 	mov	r16,r17
  806a50:	dc402103 	ldbu	r17,132(sp)
  806a54:	b811883a 	mov	r8,r23
  806a58:	8c403fcc 	andi	r17,r17,255
  806a5c:	8803d01e 	bne	r17,zero,8079a0 <___svfiprintf_internal_r+0x1380>
  806a60:	8080080c 	andi	r2,r16,32
  806a64:	10016126 	beq	r2,zero,806fec <___svfiprintf_internal_r+0x9cc>
  806a68:	d9002417 	ldw	r4,144(sp)
  806a6c:	d9402017 	ldw	r5,128(sp)
  806a70:	d8001d85 	stb	zero,118(sp)
  806a74:	20c00204 	addi	r3,r4,8
  806a78:	24800017 	ldw	r18,0(r4)
  806a7c:	25000117 	ldw	r20,4(r4)
  806a80:	28030f16 	blt	r5,zero,8076c0 <___svfiprintf_internal_r+0x10a0>
  806a84:	013fdfc4 	movi	r4,-129
  806a88:	9504b03a 	or	r2,r18,r20
  806a8c:	d8c02415 	stw	r3,144(sp)
  806a90:	8120703a 	and	r16,r16,r4
  806a94:	002b883a 	mov	r21,zero
  806a98:	1000cd1e 	bne	r2,zero,806dd0 <___svfiprintf_internal_r+0x7b0>
  806a9c:	d8c02017 	ldw	r3,128(sp)
  806aa0:	1803141e 	bne	r3,zero,8076f4 <___svfiprintf_internal_r+0x10d4>
  806aa4:	d8002015 	stw	zero,128(sp)
  806aa8:	0029883a 	mov	r20,zero
  806aac:	dc401a04 	addi	r17,sp,104
  806ab0:	dc802017 	ldw	r18,128(sp)
  806ab4:	9500010e 	bge	r18,r20,806abc <___svfiprintf_internal_r+0x49c>
  806ab8:	a025883a 	mov	r18,r20
  806abc:	ad403fcc 	andi	r21,r21,255
  806ac0:	ad40201c 	xori	r21,r21,128
  806ac4:	ad7fe004 	addi	r21,r21,-128
  806ac8:	a8003f26 	beq	r21,zero,806bc8 <___svfiprintf_internal_r+0x5a8>
  806acc:	94800044 	addi	r18,r18,1
  806ad0:	00003d06 	br	806bc8 <___svfiprintf_internal_r+0x5a8>
  806ad4:	00c00044 	movi	r3,1
  806ad8:	d8c02105 	stb	r3,132(sp)
  806adc:	05400ac4 	movi	r21,43
  806ae0:	98c00007 	ldb	r3,0(r19)
  806ae4:	003f1a06 	br	806750 <__alt_data_end+0xff806750>
  806ae8:	8821883a 	mov	r16,r17
  806aec:	dc402103 	ldbu	r17,132(sp)
  806af0:	b811883a 	mov	r8,r23
  806af4:	8c403fcc 	andi	r17,r17,255
  806af8:	8803a71e 	bne	r17,zero,807998 <___svfiprintf_internal_r+0x1378>
  806afc:	8080080c 	andi	r2,r16,32
  806b00:	10015726 	beq	r2,zero,807060 <___svfiprintf_internal_r+0xa40>
  806b04:	d8c02417 	ldw	r3,144(sp)
  806b08:	d9002017 	ldw	r4,128(sp)
  806b0c:	d8001d85 	stb	zero,118(sp)
  806b10:	18800204 	addi	r2,r3,8
  806b14:	1c800017 	ldw	r18,0(r3)
  806b18:	1d000117 	ldw	r20,4(r3)
  806b1c:	2002db16 	blt	r4,zero,80768c <___svfiprintf_internal_r+0x106c>
  806b20:	013fdfc4 	movi	r4,-129
  806b24:	9506b03a 	or	r3,r18,r20
  806b28:	d8802415 	stw	r2,144(sp)
  806b2c:	8120703a 	and	r16,r16,r4
  806b30:	18015826 	beq	r3,zero,807094 <___svfiprintf_internal_r+0xa74>
  806b34:	002b883a 	mov	r21,zero
  806b38:	dc401a04 	addi	r17,sp,104
  806b3c:	9006d0fa 	srli	r3,r18,3
  806b40:	a008977a 	slli	r4,r20,29
  806b44:	a028d0fa 	srli	r20,r20,3
  806b48:	948001cc 	andi	r18,r18,7
  806b4c:	90800c04 	addi	r2,r18,48
  806b50:	8c7fffc4 	addi	r17,r17,-1
  806b54:	20e4b03a 	or	r18,r4,r3
  806b58:	88800005 	stb	r2,0(r17)
  806b5c:	9506b03a 	or	r3,r18,r20
  806b60:	183ff61e 	bne	r3,zero,806b3c <__alt_data_end+0xff806b3c>
  806b64:	80c0004c 	andi	r3,r16,1
  806b68:	18028926 	beq	r3,zero,807590 <___svfiprintf_internal_r+0xf70>
  806b6c:	10803fcc 	andi	r2,r2,255
  806b70:	1080201c 	xori	r2,r2,128
  806b74:	10bfe004 	addi	r2,r2,-128
  806b78:	00c00c04 	movi	r3,48
  806b7c:	10ffb026 	beq	r2,r3,806a40 <__alt_data_end+0xff806a40>
  806b80:	88ffffc5 	stb	r3,-1(r17)
  806b84:	d8c01e17 	ldw	r3,120(sp)
  806b88:	88bfffc4 	addi	r2,r17,-1
  806b8c:	1023883a 	mov	r17,r2
  806b90:	18a9c83a 	sub	r20,r3,r2
  806b94:	003fc606 	br	806ab0 <__alt_data_end+0xff806ab0>
  806b98:	d8c02417 	ldw	r3,144(sp)
  806b9c:	04800044 	movi	r18,1
  806ba0:	8821883a 	mov	r16,r17
  806ba4:	18800017 	ldw	r2,0(r3)
  806ba8:	18c00104 	addi	r3,r3,4
  806bac:	b811883a 	mov	r8,r23
  806bb0:	d8001d85 	stb	zero,118(sp)
  806bb4:	d8801005 	stb	r2,64(sp)
  806bb8:	d8c02415 	stw	r3,144(sp)
  806bbc:	9029883a 	mov	r20,r18
  806bc0:	dc401004 	addi	r17,sp,64
  806bc4:	d8002015 	stw	zero,128(sp)
  806bc8:	80c0008c 	andi	r3,r16,2
  806bcc:	d8c02115 	stw	r3,132(sp)
  806bd0:	18000126 	beq	r3,zero,806bd8 <___svfiprintf_internal_r+0x5b8>
  806bd4:	94800084 	addi	r18,r18,2
  806bd8:	80c0210c 	andi	r3,r16,132
  806bdc:	d8c02215 	stw	r3,136(sp)
  806be0:	1801321e 	bne	r3,zero,8070ac <___svfiprintf_internal_r+0xa8c>
  806be4:	d9002517 	ldw	r4,148(sp)
  806be8:	24b9c83a 	sub	fp,r4,r18
  806bec:	07012f0e 	bge	zero,fp,8070ac <___svfiprintf_internal_r+0xa8c>
  806bf0:	02400404 	movi	r9,16
  806bf4:	d8c01c17 	ldw	r3,112(sp)
  806bf8:	d8801b17 	ldw	r2,108(sp)
  806bfc:	4f03250e 	bge	r9,fp,807894 <___svfiprintf_internal_r+0x1274>
  806c00:	01002074 	movhi	r4,129
  806c04:	213ea804 	addi	r4,r4,-1376
  806c08:	dc002a15 	stw	r16,168(sp)
  806c0c:	dc402b15 	stw	r17,172(sp)
  806c10:	d9002815 	stw	r4,160(sp)
  806c14:	e023883a 	mov	r17,fp
  806c18:	482f883a 	mov	r23,r9
  806c1c:	9839883a 	mov	fp,r19
  806c20:	054001c4 	movi	r21,7
  806c24:	9027883a 	mov	r19,r18
  806c28:	dc002717 	ldw	r16,156(sp)
  806c2c:	dc802317 	ldw	r18,140(sp)
  806c30:	00000306 	br	806c40 <___svfiprintf_internal_r+0x620>
  806c34:	8c7ffc04 	addi	r17,r17,-16
  806c38:	42000204 	addi	r8,r8,8
  806c3c:	bc40130e 	bge	r23,r17,806c8c <___svfiprintf_internal_r+0x66c>
  806c40:	01402074 	movhi	r5,129
  806c44:	18c00404 	addi	r3,r3,16
  806c48:	10800044 	addi	r2,r2,1
  806c4c:	297ea804 	addi	r5,r5,-1376
  806c50:	41400015 	stw	r5,0(r8)
  806c54:	45c00115 	stw	r23,4(r8)
  806c58:	d8c01c15 	stw	r3,112(sp)
  806c5c:	d8801b15 	stw	r2,108(sp)
  806c60:	a8bff40e 	bge	r21,r2,806c34 <__alt_data_end+0xff806c34>
  806c64:	d9801a04 	addi	r6,sp,104
  806c68:	900b883a 	mov	r5,r18
  806c6c:	8009883a 	mov	r4,r16
  806c70:	08064500 	call	806450 <__ssprint_r>
  806c74:	1001aa1e 	bne	r2,zero,807320 <___svfiprintf_internal_r+0xd00>
  806c78:	8c7ffc04 	addi	r17,r17,-16
  806c7c:	d8c01c17 	ldw	r3,112(sp)
  806c80:	d8801b17 	ldw	r2,108(sp)
  806c84:	d811883a 	mov	r8,sp
  806c88:	bc7fed16 	blt	r23,r17,806c40 <__alt_data_end+0xff806c40>
  806c8c:	9825883a 	mov	r18,r19
  806c90:	dc002a17 	ldw	r16,168(sp)
  806c94:	e027883a 	mov	r19,fp
  806c98:	8839883a 	mov	fp,r17
  806c9c:	dc402b17 	ldw	r17,172(sp)
  806ca0:	d9002817 	ldw	r4,160(sp)
  806ca4:	e0c7883a 	add	r3,fp,r3
  806ca8:	10800044 	addi	r2,r2,1
  806cac:	41000015 	stw	r4,0(r8)
  806cb0:	47000115 	stw	fp,4(r8)
  806cb4:	d8c01c15 	stw	r3,112(sp)
  806cb8:	d8801b15 	stw	r2,108(sp)
  806cbc:	010001c4 	movi	r4,7
  806cc0:	20821616 	blt	r4,r2,80751c <___svfiprintf_internal_r+0xefc>
  806cc4:	42000204 	addi	r8,r8,8
  806cc8:	0000fa06 	br	8070b4 <___svfiprintf_internal_r+0xa94>
  806ccc:	8821883a 	mov	r16,r17
  806cd0:	dc402103 	ldbu	r17,132(sp)
  806cd4:	b811883a 	mov	r8,r23
  806cd8:	8c403fcc 	andi	r17,r17,255
  806cdc:	8803361e 	bne	r17,zero,8079b8 <___svfiprintf_internal_r+0x1398>
  806ce0:	01402074 	movhi	r5,129
  806ce4:	297e3f04 	addi	r5,r5,-1796
  806ce8:	d9402915 	stw	r5,164(sp)
  806cec:	8080080c 	andi	r2,r16,32
  806cf0:	103f331e 	bne	r2,zero,8069c0 <__alt_data_end+0xff8069c0>
  806cf4:	8080040c 	andi	r2,r16,16
  806cf8:	1002551e 	bne	r2,zero,807650 <___svfiprintf_internal_r+0x1030>
  806cfc:	8080100c 	andi	r2,r16,64
  806d00:	1002a626 	beq	r2,zero,80779c <___svfiprintf_internal_r+0x117c>
  806d04:	d8802417 	ldw	r2,144(sp)
  806d08:	0029883a 	mov	r20,zero
  806d0c:	1480000b 	ldhu	r18,0(r2)
  806d10:	10800104 	addi	r2,r2,4
  806d14:	d8802415 	stw	r2,144(sp)
  806d18:	003f2e06 	br	8069d4 <__alt_data_end+0xff8069d4>
  806d1c:	8821883a 	mov	r16,r17
  806d20:	dc402103 	ldbu	r17,132(sp)
  806d24:	b811883a 	mov	r8,r23
  806d28:	8c403fcc 	andi	r17,r17,255
  806d2c:	88030b1e 	bne	r17,zero,80795c <___svfiprintf_internal_r+0x133c>
  806d30:	8080080c 	andi	r2,r16,32
  806d34:	1002271e 	bne	r2,zero,8075d4 <___svfiprintf_internal_r+0xfb4>
  806d38:	8080040c 	andi	r2,r16,16
  806d3c:	10028e26 	beq	r2,zero,807778 <___svfiprintf_internal_r+0x1158>
  806d40:	d8c02417 	ldw	r3,144(sp)
  806d44:	d9002617 	ldw	r4,152(sp)
  806d48:	18800017 	ldw	r2,0(r3)
  806d4c:	18c00104 	addi	r3,r3,4
  806d50:	d8c02415 	stw	r3,144(sp)
  806d54:	11000015 	stw	r4,0(r2)
  806d58:	003e5306 	br	8066a8 <__alt_data_end+0xff8066a8>
  806d5c:	98c00007 	ldb	r3,0(r19)
  806d60:	01401b04 	movi	r5,108
  806d64:	19424f26 	beq	r3,r5,8076a4 <___svfiprintf_internal_r+0x1084>
  806d68:	8c400414 	ori	r17,r17,16
  806d6c:	003e7806 	br	806750 <__alt_data_end+0xff806750>
  806d70:	8c401014 	ori	r17,r17,64
  806d74:	98c00007 	ldb	r3,0(r19)
  806d78:	003e7506 	br	806750 <__alt_data_end+0xff806750>
  806d7c:	8821883a 	mov	r16,r17
  806d80:	dc402103 	ldbu	r17,132(sp)
  806d84:	b811883a 	mov	r8,r23
  806d88:	8c403fcc 	andi	r17,r17,255
  806d8c:	8802fe1e 	bne	r17,zero,807988 <___svfiprintf_internal_r+0x1368>
  806d90:	8080080c 	andi	r2,r16,32
  806d94:	10004626 	beq	r2,zero,806eb0 <___svfiprintf_internal_r+0x890>
  806d98:	d9002417 	ldw	r4,144(sp)
  806d9c:	20800117 	ldw	r2,4(r4)
  806da0:	24800017 	ldw	r18,0(r4)
  806da4:	21000204 	addi	r4,r4,8
  806da8:	d9002415 	stw	r4,144(sp)
  806dac:	1029883a 	mov	r20,r2
  806db0:	10004a16 	blt	r2,zero,806edc <___svfiprintf_internal_r+0x8bc>
  806db4:	d9002017 	ldw	r4,128(sp)
  806db8:	dd401d83 	ldbu	r21,118(sp)
  806dbc:	2001eb16 	blt	r4,zero,80756c <___svfiprintf_internal_r+0xf4c>
  806dc0:	00ffdfc4 	movi	r3,-129
  806dc4:	9504b03a 	or	r2,r18,r20
  806dc8:	80e0703a 	and	r16,r16,r3
  806dcc:	103f3326 	beq	r2,zero,806a9c <__alt_data_end+0xff806a9c>
  806dd0:	a0009426 	beq	r20,zero,807024 <___svfiprintf_internal_r+0xa04>
  806dd4:	dc401a04 	addi	r17,sp,104
  806dd8:	402f883a 	mov	r23,r8
  806ddc:	9009883a 	mov	r4,r18
  806de0:	a00b883a 	mov	r5,r20
  806de4:	01800284 	movi	r6,10
  806de8:	000f883a 	mov	r7,zero
  806dec:	08087580 	call	808758 <__umoddi3>
  806df0:	10800c04 	addi	r2,r2,48
  806df4:	8c7fffc4 	addi	r17,r17,-1
  806df8:	9009883a 	mov	r4,r18
  806dfc:	a00b883a 	mov	r5,r20
  806e00:	88800005 	stb	r2,0(r17)
  806e04:	01800284 	movi	r6,10
  806e08:	000f883a 	mov	r7,zero
  806e0c:	080815c0 	call	80815c <__udivdi3>
  806e10:	1025883a 	mov	r18,r2
  806e14:	10c4b03a 	or	r2,r2,r3
  806e18:	1829883a 	mov	r20,r3
  806e1c:	103fef1e 	bne	r2,zero,806ddc <__alt_data_end+0xff806ddc>
  806e20:	d9001e17 	ldw	r4,120(sp)
  806e24:	b811883a 	mov	r8,r23
  806e28:	2469c83a 	sub	r20,r4,r17
  806e2c:	003f2006 	br	806ab0 <__alt_data_end+0xff806ab0>
  806e30:	d8802417 	ldw	r2,144(sp)
  806e34:	8821883a 	mov	r16,r17
  806e38:	d8001d85 	stb	zero,118(sp)
  806e3c:	14400017 	ldw	r17,0(r2)
  806e40:	b811883a 	mov	r8,r23
  806e44:	15c00104 	addi	r23,r2,4
  806e48:	88026c26 	beq	r17,zero,8077fc <___svfiprintf_internal_r+0x11dc>
  806e4c:	d8c02017 	ldw	r3,128(sp)
  806e50:	18025f16 	blt	r3,zero,8077d0 <___svfiprintf_internal_r+0x11b0>
  806e54:	180d883a 	mov	r6,r3
  806e58:	000b883a 	mov	r5,zero
  806e5c:	8809883a 	mov	r4,r17
  806e60:	da002d15 	stw	r8,180(sp)
  806e64:	0804f840 	call	804f84 <memchr>
  806e68:	da002d17 	ldw	r8,180(sp)
  806e6c:	1002a526 	beq	r2,zero,807904 <___svfiprintf_internal_r+0x12e4>
  806e70:	1469c83a 	sub	r20,r2,r17
  806e74:	dd401d83 	ldbu	r21,118(sp)
  806e78:	ddc02415 	stw	r23,144(sp)
  806e7c:	d8002015 	stw	zero,128(sp)
  806e80:	003f0b06 	br	806ab0 <__alt_data_end+0xff806ab0>
  806e84:	8c400814 	ori	r17,r17,32
  806e88:	98c00007 	ldb	r3,0(r19)
  806e8c:	003e3006 	br	806750 <__alt_data_end+0xff806750>
  806e90:	8821883a 	mov	r16,r17
  806e94:	dc402103 	ldbu	r17,132(sp)
  806e98:	b811883a 	mov	r8,r23
  806e9c:	8c403fcc 	andi	r17,r17,255
  806ea0:	8802b01e 	bne	r17,zero,807964 <___svfiprintf_internal_r+0x1344>
  806ea4:	84000414 	ori	r16,r16,16
  806ea8:	8080080c 	andi	r2,r16,32
  806eac:	103fba1e 	bne	r2,zero,806d98 <__alt_data_end+0xff806d98>
  806eb0:	8080040c 	andi	r2,r16,16
  806eb4:	1001df1e 	bne	r2,zero,807634 <___svfiprintf_internal_r+0x1014>
  806eb8:	8080100c 	andi	r2,r16,64
  806ebc:	10023d26 	beq	r2,zero,8077b4 <___svfiprintf_internal_r+0x1194>
  806ec0:	d8802417 	ldw	r2,144(sp)
  806ec4:	1480000f 	ldh	r18,0(r2)
  806ec8:	10800104 	addi	r2,r2,4
  806ecc:	d8802415 	stw	r2,144(sp)
  806ed0:	9029d7fa 	srai	r20,r18,31
  806ed4:	a005883a 	mov	r2,r20
  806ed8:	103fb60e 	bge	r2,zero,806db4 <__alt_data_end+0xff806db4>
  806edc:	d9402017 	ldw	r5,128(sp)
  806ee0:	04a5c83a 	sub	r18,zero,r18
  806ee4:	05400b44 	movi	r21,45
  806ee8:	9004c03a 	cmpne	r2,r18,zero
  806eec:	0529c83a 	sub	r20,zero,r20
  806ef0:	dd401d85 	stb	r21,118(sp)
  806ef4:	a0a9c83a 	sub	r20,r20,r2
  806ef8:	28026c16 	blt	r5,zero,8078ac <___svfiprintf_internal_r+0x128c>
  806efc:	00bfdfc4 	movi	r2,-129
  806f00:	80a0703a 	and	r16,r16,r2
  806f04:	a03fb31e 	bne	r20,zero,806dd4 <__alt_data_end+0xff806dd4>
  806f08:	00004606 	br	807024 <___svfiprintf_internal_r+0xa04>
  806f0c:	9839883a 	mov	fp,r19
  806f10:	d8002515 	stw	zero,148(sp)
  806f14:	1c3ff404 	addi	r16,r3,-48
  806f18:	0009883a 	mov	r4,zero
  806f1c:	01400284 	movi	r5,10
  806f20:	0808ed00 	call	808ed0 <__mulsi3>
  806f24:	e0c00007 	ldb	r3,0(fp)
  806f28:	8089883a 	add	r4,r16,r2
  806f2c:	9cc00044 	addi	r19,r19,1
  806f30:	1c3ff404 	addi	r16,r3,-48
  806f34:	9839883a 	mov	fp,r19
  806f38:	a43ff82e 	bgeu	r20,r16,806f1c <__alt_data_end+0xff806f1c>
  806f3c:	d9002515 	stw	r4,148(sp)
  806f40:	18bff804 	addi	r2,r3,-32
  806f44:	90be052e 	bgeu	r18,r2,80675c <__alt_data_end+0xff80675c>
  806f48:	8821883a 	mov	r16,r17
  806f4c:	dc402103 	ldbu	r17,132(sp)
  806f50:	b811883a 	mov	r8,r23
  806f54:	8c403fcc 	andi	r17,r17,255
  806f58:	88028d1e 	bne	r17,zero,807990 <___svfiprintf_internal_r+0x1370>
  806f5c:	1800ea26 	beq	r3,zero,807308 <___svfiprintf_internal_r+0xce8>
  806f60:	04800044 	movi	r18,1
  806f64:	d8c01005 	stb	r3,64(sp)
  806f68:	d8001d85 	stb	zero,118(sp)
  806f6c:	9029883a 	mov	r20,r18
  806f70:	dc401004 	addi	r17,sp,64
  806f74:	003f1306 	br	806bc4 <__alt_data_end+0xff806bc4>
  806f78:	8c402014 	ori	r17,r17,128
  806f7c:	98c00007 	ldb	r3,0(r19)
  806f80:	003df306 	br	806750 <__alt_data_end+0xff806750>
  806f84:	98c00007 	ldb	r3,0(r19)
  806f88:	01000a84 	movi	r4,42
  806f8c:	9f000044 	addi	fp,r19,1
  806f90:	19026326 	beq	r3,r4,807920 <___svfiprintf_internal_r+0x1300>
  806f94:	1c3ff404 	addi	r16,r3,-48
  806f98:	0009883a 	mov	r4,zero
  806f9c:	a4025636 	bltu	r20,r16,8078f8 <___svfiprintf_internal_r+0x12d8>
  806fa0:	01400284 	movi	r5,10
  806fa4:	0808ed00 	call	808ed0 <__mulsi3>
  806fa8:	e0c00007 	ldb	r3,0(fp)
  806fac:	1409883a 	add	r4,r2,r16
  806fb0:	e4c00044 	addi	r19,fp,1
  806fb4:	1c3ff404 	addi	r16,r3,-48
  806fb8:	9839883a 	mov	fp,r19
  806fbc:	a43ff82e 	bgeu	r20,r16,806fa0 <__alt_data_end+0xff806fa0>
  806fc0:	20020c16 	blt	r4,zero,8077f4 <___svfiprintf_internal_r+0x11d4>
  806fc4:	d9002015 	stw	r4,128(sp)
  806fc8:	003de206 	br	806754 <__alt_data_end+0xff806754>
  806fcc:	8821883a 	mov	r16,r17
  806fd0:	dc402103 	ldbu	r17,132(sp)
  806fd4:	b811883a 	mov	r8,r23
  806fd8:	8c403fcc 	andi	r17,r17,255
  806fdc:	8802721e 	bne	r17,zero,8079a8 <___svfiprintf_internal_r+0x1388>
  806fe0:	84000414 	ori	r16,r16,16
  806fe4:	8080080c 	andi	r2,r16,32
  806fe8:	103e9f1e 	bne	r2,zero,806a68 <__alt_data_end+0xff806a68>
  806fec:	8080040c 	andi	r2,r16,16
  806ff0:	10015326 	beq	r2,zero,807540 <___svfiprintf_internal_r+0xf20>
  806ff4:	d8c02417 	ldw	r3,144(sp)
  806ff8:	d9002017 	ldw	r4,128(sp)
  806ffc:	d8001d85 	stb	zero,118(sp)
  807000:	18800104 	addi	r2,r3,4
  807004:	1c800017 	ldw	r18,0(r3)
  807008:	0029883a 	mov	r20,zero
  80700c:	20015516 	blt	r4,zero,807564 <___svfiprintf_internal_r+0xf44>
  807010:	00ffdfc4 	movi	r3,-129
  807014:	d8802415 	stw	r2,144(sp)
  807018:	80e0703a 	and	r16,r16,r3
  80701c:	002b883a 	mov	r21,zero
  807020:	903e9e26 	beq	r18,zero,806a9c <__alt_data_end+0xff806a9c>
  807024:	00800244 	movi	r2,9
  807028:	14bf6a36 	bltu	r2,r18,806dd4 <__alt_data_end+0xff806dd4>
  80702c:	94800c04 	addi	r18,r18,48
  807030:	dc8019c5 	stb	r18,103(sp)
  807034:	dd002c17 	ldw	r20,176(sp)
  807038:	dc4019c4 	addi	r17,sp,103
  80703c:	003e9c06 	br	806ab0 <__alt_data_end+0xff806ab0>
  807040:	8821883a 	mov	r16,r17
  807044:	dc402103 	ldbu	r17,132(sp)
  807048:	b811883a 	mov	r8,r23
  80704c:	8c403fcc 	andi	r17,r17,255
  807050:	8802571e 	bne	r17,zero,8079b0 <___svfiprintf_internal_r+0x1390>
  807054:	84000414 	ori	r16,r16,16
  807058:	8080080c 	andi	r2,r16,32
  80705c:	103ea91e 	bne	r2,zero,806b04 <__alt_data_end+0xff806b04>
  807060:	8080040c 	andi	r2,r16,16
  807064:	10018026 	beq	r2,zero,807668 <___svfiprintf_internal_r+0x1048>
  807068:	d9402417 	ldw	r5,144(sp)
  80706c:	d8c02017 	ldw	r3,128(sp)
  807070:	d8001d85 	stb	zero,118(sp)
  807074:	28800104 	addi	r2,r5,4
  807078:	2c800017 	ldw	r18,0(r5)
  80707c:	0029883a 	mov	r20,zero
  807080:	18018216 	blt	r3,zero,80768c <___svfiprintf_internal_r+0x106c>
  807084:	00ffdfc4 	movi	r3,-129
  807088:	d8802415 	stw	r2,144(sp)
  80708c:	80e0703a 	and	r16,r16,r3
  807090:	903ea81e 	bne	r18,zero,806b34 <__alt_data_end+0xff806b34>
  807094:	d8802017 	ldw	r2,128(sp)
  807098:	002b883a 	mov	r21,zero
  80709c:	1001f226 	beq	r2,zero,807868 <___svfiprintf_internal_r+0x1248>
  8070a0:	0025883a 	mov	r18,zero
  8070a4:	0029883a 	mov	r20,zero
  8070a8:	003ea306 	br	806b38 <__alt_data_end+0xff806b38>
  8070ac:	d8c01c17 	ldw	r3,112(sp)
  8070b0:	d8801b17 	ldw	r2,108(sp)
  8070b4:	d9001d87 	ldb	r4,118(sp)
  8070b8:	20000b26 	beq	r4,zero,8070e8 <___svfiprintf_internal_r+0xac8>
  8070bc:	d9001d84 	addi	r4,sp,118
  8070c0:	18c00044 	addi	r3,r3,1
  8070c4:	10800044 	addi	r2,r2,1
  8070c8:	41000015 	stw	r4,0(r8)
  8070cc:	01000044 	movi	r4,1
  8070d0:	41000115 	stw	r4,4(r8)
  8070d4:	d8c01c15 	stw	r3,112(sp)
  8070d8:	d8801b15 	stw	r2,108(sp)
  8070dc:	010001c4 	movi	r4,7
  8070e0:	2080f316 	blt	r4,r2,8074b0 <___svfiprintf_internal_r+0xe90>
  8070e4:	42000204 	addi	r8,r8,8
  8070e8:	d9402117 	ldw	r5,132(sp)
  8070ec:	28000b26 	beq	r5,zero,80711c <___svfiprintf_internal_r+0xafc>
  8070f0:	d9001d04 	addi	r4,sp,116
  8070f4:	18c00084 	addi	r3,r3,2
  8070f8:	10800044 	addi	r2,r2,1
  8070fc:	41000015 	stw	r4,0(r8)
  807100:	01000084 	movi	r4,2
  807104:	41000115 	stw	r4,4(r8)
  807108:	d8c01c15 	stw	r3,112(sp)
  80710c:	d8801b15 	stw	r2,108(sp)
  807110:	010001c4 	movi	r4,7
  807114:	2080ef16 	blt	r4,r2,8074d4 <___svfiprintf_internal_r+0xeb4>
  807118:	42000204 	addi	r8,r8,8
  80711c:	d9402217 	ldw	r5,136(sp)
  807120:	01002004 	movi	r4,128
  807124:	29008f26 	beq	r5,r4,807364 <___svfiprintf_internal_r+0xd44>
  807128:	d9002017 	ldw	r4,128(sp)
  80712c:	252fc83a 	sub	r23,r4,r20
  807130:	05c0310e 	bge	zero,r23,8071f8 <___svfiprintf_internal_r+0xbd8>
  807134:	07000404 	movi	fp,16
  807138:	e5c17d0e 	bge	fp,r23,807730 <___svfiprintf_internal_r+0x1110>
  80713c:	01002074 	movhi	r4,129
  807140:	213ea404 	addi	r4,r4,-1392
  807144:	dc002015 	stw	r16,128(sp)
  807148:	dc402215 	stw	r17,136(sp)
  80714c:	d9002115 	stw	r4,132(sp)
  807150:	b823883a 	mov	r17,r23
  807154:	054001c4 	movi	r21,7
  807158:	982f883a 	mov	r23,r19
  80715c:	dc002717 	ldw	r16,156(sp)
  807160:	9027883a 	mov	r19,r18
  807164:	dc802317 	ldw	r18,140(sp)
  807168:	00000306 	br	807178 <___svfiprintf_internal_r+0xb58>
  80716c:	8c7ffc04 	addi	r17,r17,-16
  807170:	42000204 	addi	r8,r8,8
  807174:	e440110e 	bge	fp,r17,8071bc <___svfiprintf_internal_r+0xb9c>
  807178:	18c00404 	addi	r3,r3,16
  80717c:	10800044 	addi	r2,r2,1
  807180:	45800015 	stw	r22,0(r8)
  807184:	47000115 	stw	fp,4(r8)
  807188:	d8c01c15 	stw	r3,112(sp)
  80718c:	d8801b15 	stw	r2,108(sp)
  807190:	a8bff60e 	bge	r21,r2,80716c <__alt_data_end+0xff80716c>
  807194:	d9801a04 	addi	r6,sp,104
  807198:	900b883a 	mov	r5,r18
  80719c:	8009883a 	mov	r4,r16
  8071a0:	08064500 	call	806450 <__ssprint_r>
  8071a4:	10005e1e 	bne	r2,zero,807320 <___svfiprintf_internal_r+0xd00>
  8071a8:	8c7ffc04 	addi	r17,r17,-16
  8071ac:	d8c01c17 	ldw	r3,112(sp)
  8071b0:	d8801b17 	ldw	r2,108(sp)
  8071b4:	d811883a 	mov	r8,sp
  8071b8:	e47fef16 	blt	fp,r17,807178 <__alt_data_end+0xff807178>
  8071bc:	9825883a 	mov	r18,r19
  8071c0:	dc002017 	ldw	r16,128(sp)
  8071c4:	b827883a 	mov	r19,r23
  8071c8:	882f883a 	mov	r23,r17
  8071cc:	dc402217 	ldw	r17,136(sp)
  8071d0:	d9402117 	ldw	r5,132(sp)
  8071d4:	1dc7883a 	add	r3,r3,r23
  8071d8:	10800044 	addi	r2,r2,1
  8071dc:	41400015 	stw	r5,0(r8)
  8071e0:	45c00115 	stw	r23,4(r8)
  8071e4:	d8c01c15 	stw	r3,112(sp)
  8071e8:	d8801b15 	stw	r2,108(sp)
  8071ec:	010001c4 	movi	r4,7
  8071f0:	2080a616 	blt	r4,r2,80748c <___svfiprintf_internal_r+0xe6c>
  8071f4:	42000204 	addi	r8,r8,8
  8071f8:	a0c7883a 	add	r3,r20,r3
  8071fc:	10800044 	addi	r2,r2,1
  807200:	44400015 	stw	r17,0(r8)
  807204:	45000115 	stw	r20,4(r8)
  807208:	d8c01c15 	stw	r3,112(sp)
  80720c:	d8801b15 	stw	r2,108(sp)
  807210:	010001c4 	movi	r4,7
  807214:	20808816 	blt	r4,r2,807438 <___svfiprintf_internal_r+0xe18>
  807218:	42000204 	addi	r8,r8,8
  80721c:	8400010c 	andi	r16,r16,4
  807220:	80002c26 	beq	r16,zero,8072d4 <___svfiprintf_internal_r+0xcb4>
  807224:	d8802517 	ldw	r2,148(sp)
  807228:	14a1c83a 	sub	r16,r2,r18
  80722c:	0400290e 	bge	zero,r16,8072d4 <___svfiprintf_internal_r+0xcb4>
  807230:	04400404 	movi	r17,16
  807234:	d8801b17 	ldw	r2,108(sp)
  807238:	8c01a70e 	bge	r17,r16,8078d8 <___svfiprintf_internal_r+0x12b8>
  80723c:	01402074 	movhi	r5,129
  807240:	297ea804 	addi	r5,r5,-1376
  807244:	d9402815 	stw	r5,160(sp)
  807248:	050001c4 	movi	r20,7
  80724c:	dd402717 	ldw	r21,156(sp)
  807250:	ddc02317 	ldw	r23,140(sp)
  807254:	00000306 	br	807264 <___svfiprintf_internal_r+0xc44>
  807258:	843ffc04 	addi	r16,r16,-16
  80725c:	42000204 	addi	r8,r8,8
  807260:	8c00130e 	bge	r17,r16,8072b0 <___svfiprintf_internal_r+0xc90>
  807264:	01002074 	movhi	r4,129
  807268:	18c00404 	addi	r3,r3,16
  80726c:	10800044 	addi	r2,r2,1
  807270:	213ea804 	addi	r4,r4,-1376
  807274:	41000015 	stw	r4,0(r8)
  807278:	44400115 	stw	r17,4(r8)
  80727c:	d8c01c15 	stw	r3,112(sp)
  807280:	d8801b15 	stw	r2,108(sp)
  807284:	a0bff40e 	bge	r20,r2,807258 <__alt_data_end+0xff807258>
  807288:	d9801a04 	addi	r6,sp,104
  80728c:	b80b883a 	mov	r5,r23
  807290:	a809883a 	mov	r4,r21
  807294:	08064500 	call	806450 <__ssprint_r>
  807298:	1000211e 	bne	r2,zero,807320 <___svfiprintf_internal_r+0xd00>
  80729c:	843ffc04 	addi	r16,r16,-16
  8072a0:	d8c01c17 	ldw	r3,112(sp)
  8072a4:	d8801b17 	ldw	r2,108(sp)
  8072a8:	d811883a 	mov	r8,sp
  8072ac:	8c3fed16 	blt	r17,r16,807264 <__alt_data_end+0xff807264>
  8072b0:	d9402817 	ldw	r5,160(sp)
  8072b4:	1c07883a 	add	r3,r3,r16
  8072b8:	10800044 	addi	r2,r2,1
  8072bc:	41400015 	stw	r5,0(r8)
  8072c0:	44000115 	stw	r16,4(r8)
  8072c4:	d8c01c15 	stw	r3,112(sp)
  8072c8:	d8801b15 	stw	r2,108(sp)
  8072cc:	010001c4 	movi	r4,7
  8072d0:	2080b516 	blt	r4,r2,8075a8 <___svfiprintf_internal_r+0xf88>
  8072d4:	d8802517 	ldw	r2,148(sp)
  8072d8:	1480010e 	bge	r2,r18,8072e0 <___svfiprintf_internal_r+0xcc0>
  8072dc:	9005883a 	mov	r2,r18
  8072e0:	d9002617 	ldw	r4,152(sp)
  8072e4:	2089883a 	add	r4,r4,r2
  8072e8:	d9002615 	stw	r4,152(sp)
  8072ec:	18005a1e 	bne	r3,zero,807458 <___svfiprintf_internal_r+0xe38>
  8072f0:	98800007 	ldb	r2,0(r19)
  8072f4:	d8001b15 	stw	zero,108(sp)
  8072f8:	d811883a 	mov	r8,sp
  8072fc:	103cec1e 	bne	r2,zero,8066b0 <__alt_data_end+0xff8066b0>
  807300:	9825883a 	mov	r18,r19
  807304:	003d0206 	br	806710 <__alt_data_end+0xff806710>
  807308:	d8801c17 	ldw	r2,112(sp)
  80730c:	10000426 	beq	r2,zero,807320 <___svfiprintf_internal_r+0xd00>
  807310:	d9402317 	ldw	r5,140(sp)
  807314:	d9002717 	ldw	r4,156(sp)
  807318:	d9801a04 	addi	r6,sp,104
  80731c:	08064500 	call	806450 <__ssprint_r>
  807320:	d9402317 	ldw	r5,140(sp)
  807324:	d8802617 	ldw	r2,152(sp)
  807328:	28c0030b 	ldhu	r3,12(r5)
  80732c:	18c0100c 	andi	r3,r3,64
  807330:	18015c1e 	bne	r3,zero,8078a4 <___svfiprintf_internal_r+0x1284>
  807334:	dfc03717 	ldw	ra,220(sp)
  807338:	df003617 	ldw	fp,216(sp)
  80733c:	ddc03517 	ldw	r23,212(sp)
  807340:	dd803417 	ldw	r22,208(sp)
  807344:	dd403317 	ldw	r21,204(sp)
  807348:	dd003217 	ldw	r20,200(sp)
  80734c:	dcc03117 	ldw	r19,196(sp)
  807350:	dc803017 	ldw	r18,192(sp)
  807354:	dc402f17 	ldw	r17,188(sp)
  807358:	dc002e17 	ldw	r16,184(sp)
  80735c:	dec03804 	addi	sp,sp,224
  807360:	f800283a 	ret
  807364:	d9002517 	ldw	r4,148(sp)
  807368:	24afc83a 	sub	r23,r4,r18
  80736c:	05ff6e0e 	bge	zero,r23,807128 <__alt_data_end+0xff807128>
  807370:	07000404 	movi	fp,16
  807374:	e5c15c0e 	bge	fp,r23,8078e8 <___svfiprintf_internal_r+0x12c8>
  807378:	01002074 	movhi	r4,129
  80737c:	213ea404 	addi	r4,r4,-1392
  807380:	dc002215 	stw	r16,136(sp)
  807384:	dc402815 	stw	r17,160(sp)
  807388:	d9002115 	stw	r4,132(sp)
  80738c:	b823883a 	mov	r17,r23
  807390:	054001c4 	movi	r21,7
  807394:	982f883a 	mov	r23,r19
  807398:	dc002717 	ldw	r16,156(sp)
  80739c:	9027883a 	mov	r19,r18
  8073a0:	dc802317 	ldw	r18,140(sp)
  8073a4:	00000306 	br	8073b4 <___svfiprintf_internal_r+0xd94>
  8073a8:	8c7ffc04 	addi	r17,r17,-16
  8073ac:	42000204 	addi	r8,r8,8
  8073b0:	e440110e 	bge	fp,r17,8073f8 <___svfiprintf_internal_r+0xdd8>
  8073b4:	18c00404 	addi	r3,r3,16
  8073b8:	10800044 	addi	r2,r2,1
  8073bc:	45800015 	stw	r22,0(r8)
  8073c0:	47000115 	stw	fp,4(r8)
  8073c4:	d8c01c15 	stw	r3,112(sp)
  8073c8:	d8801b15 	stw	r2,108(sp)
  8073cc:	a8bff60e 	bge	r21,r2,8073a8 <__alt_data_end+0xff8073a8>
  8073d0:	d9801a04 	addi	r6,sp,104
  8073d4:	900b883a 	mov	r5,r18
  8073d8:	8009883a 	mov	r4,r16
  8073dc:	08064500 	call	806450 <__ssprint_r>
  8073e0:	103fcf1e 	bne	r2,zero,807320 <__alt_data_end+0xff807320>
  8073e4:	8c7ffc04 	addi	r17,r17,-16
  8073e8:	d8c01c17 	ldw	r3,112(sp)
  8073ec:	d8801b17 	ldw	r2,108(sp)
  8073f0:	d811883a 	mov	r8,sp
  8073f4:	e47fef16 	blt	fp,r17,8073b4 <__alt_data_end+0xff8073b4>
  8073f8:	9825883a 	mov	r18,r19
  8073fc:	dc002217 	ldw	r16,136(sp)
  807400:	b827883a 	mov	r19,r23
  807404:	882f883a 	mov	r23,r17
  807408:	dc402817 	ldw	r17,160(sp)
  80740c:	d9402117 	ldw	r5,132(sp)
  807410:	1dc7883a 	add	r3,r3,r23
  807414:	10800044 	addi	r2,r2,1
  807418:	41400015 	stw	r5,0(r8)
  80741c:	45c00115 	stw	r23,4(r8)
  807420:	d8c01c15 	stw	r3,112(sp)
  807424:	d8801b15 	stw	r2,108(sp)
  807428:	010001c4 	movi	r4,7
  80742c:	2080b716 	blt	r4,r2,80770c <___svfiprintf_internal_r+0x10ec>
  807430:	42000204 	addi	r8,r8,8
  807434:	003f3c06 	br	807128 <__alt_data_end+0xff807128>
  807438:	d9402317 	ldw	r5,140(sp)
  80743c:	d9002717 	ldw	r4,156(sp)
  807440:	d9801a04 	addi	r6,sp,104
  807444:	08064500 	call	806450 <__ssprint_r>
  807448:	103fb51e 	bne	r2,zero,807320 <__alt_data_end+0xff807320>
  80744c:	d8c01c17 	ldw	r3,112(sp)
  807450:	d811883a 	mov	r8,sp
  807454:	003f7106 	br	80721c <__alt_data_end+0xff80721c>
  807458:	d9402317 	ldw	r5,140(sp)
  80745c:	d9002717 	ldw	r4,156(sp)
  807460:	d9801a04 	addi	r6,sp,104
  807464:	08064500 	call	806450 <__ssprint_r>
  807468:	103fa126 	beq	r2,zero,8072f0 <__alt_data_end+0xff8072f0>
  80746c:	003fac06 	br	807320 <__alt_data_end+0xff807320>
  807470:	d9402317 	ldw	r5,140(sp)
  807474:	d9002717 	ldw	r4,156(sp)
  807478:	d9801a04 	addi	r6,sp,104
  80747c:	08064500 	call	806450 <__ssprint_r>
  807480:	103fa71e 	bne	r2,zero,807320 <__alt_data_end+0xff807320>
  807484:	d811883a 	mov	r8,sp
  807488:	003c9e06 	br	806704 <__alt_data_end+0xff806704>
  80748c:	d9402317 	ldw	r5,140(sp)
  807490:	d9002717 	ldw	r4,156(sp)
  807494:	d9801a04 	addi	r6,sp,104
  807498:	08064500 	call	806450 <__ssprint_r>
  80749c:	103fa01e 	bne	r2,zero,807320 <__alt_data_end+0xff807320>
  8074a0:	d8c01c17 	ldw	r3,112(sp)
  8074a4:	d8801b17 	ldw	r2,108(sp)
  8074a8:	d811883a 	mov	r8,sp
  8074ac:	003f5206 	br	8071f8 <__alt_data_end+0xff8071f8>
  8074b0:	d9402317 	ldw	r5,140(sp)
  8074b4:	d9002717 	ldw	r4,156(sp)
  8074b8:	d9801a04 	addi	r6,sp,104
  8074bc:	08064500 	call	806450 <__ssprint_r>
  8074c0:	103f971e 	bne	r2,zero,807320 <__alt_data_end+0xff807320>
  8074c4:	d8c01c17 	ldw	r3,112(sp)
  8074c8:	d8801b17 	ldw	r2,108(sp)
  8074cc:	d811883a 	mov	r8,sp
  8074d0:	003f0506 	br	8070e8 <__alt_data_end+0xff8070e8>
  8074d4:	d9402317 	ldw	r5,140(sp)
  8074d8:	d9002717 	ldw	r4,156(sp)
  8074dc:	d9801a04 	addi	r6,sp,104
  8074e0:	08064500 	call	806450 <__ssprint_r>
  8074e4:	103f8e1e 	bne	r2,zero,807320 <__alt_data_end+0xff807320>
  8074e8:	d8c01c17 	ldw	r3,112(sp)
  8074ec:	d8801b17 	ldw	r2,108(sp)
  8074f0:	d811883a 	mov	r8,sp
  8074f4:	003f0906 	br	80711c <__alt_data_end+0xff80711c>
  8074f8:	d9402017 	ldw	r5,128(sp)
  8074fc:	d8001d85 	stb	zero,118(sp)
  807500:	28007716 	blt	r5,zero,8076e0 <___svfiprintf_internal_r+0x10c0>
  807504:	00ffdfc4 	movi	r3,-129
  807508:	9504b03a 	or	r2,r18,r20
  80750c:	80e0703a 	and	r16,r16,r3
  807510:	103d3926 	beq	r2,zero,8069f8 <__alt_data_end+0xff8069f8>
  807514:	002b883a 	mov	r21,zero
  807518:	003d3c06 	br	806a0c <__alt_data_end+0xff806a0c>
  80751c:	d9402317 	ldw	r5,140(sp)
  807520:	d9002717 	ldw	r4,156(sp)
  807524:	d9801a04 	addi	r6,sp,104
  807528:	08064500 	call	806450 <__ssprint_r>
  80752c:	103f7c1e 	bne	r2,zero,807320 <__alt_data_end+0xff807320>
  807530:	d8c01c17 	ldw	r3,112(sp)
  807534:	d8801b17 	ldw	r2,108(sp)
  807538:	d811883a 	mov	r8,sp
  80753c:	003edd06 	br	8070b4 <__alt_data_end+0xff8070b4>
  807540:	8080100c 	andi	r2,r16,64
  807544:	d8001d85 	stb	zero,118(sp)
  807548:	10008426 	beq	r2,zero,80775c <___svfiprintf_internal_r+0x113c>
  80754c:	d9402417 	ldw	r5,144(sp)
  807550:	d8c02017 	ldw	r3,128(sp)
  807554:	0029883a 	mov	r20,zero
  807558:	28800104 	addi	r2,r5,4
  80755c:	2c80000b 	ldhu	r18,0(r5)
  807560:	183eab0e 	bge	r3,zero,807010 <__alt_data_end+0xff807010>
  807564:	d8802415 	stw	r2,144(sp)
  807568:	002b883a 	mov	r21,zero
  80756c:	9504b03a 	or	r2,r18,r20
  807570:	103e171e 	bne	r2,zero,806dd0 <__alt_data_end+0xff806dd0>
  807574:	00800044 	movi	r2,1
  807578:	10803fcc 	andi	r2,r2,255
  80757c:	00c00044 	movi	r3,1
  807580:	10c05c26 	beq	r2,r3,8076f4 <___svfiprintf_internal_r+0x10d4>
  807584:	00c00084 	movi	r3,2
  807588:	10fd1e26 	beq	r2,r3,806a04 <__alt_data_end+0xff806a04>
  80758c:	003ec406 	br	8070a0 <__alt_data_end+0xff8070a0>
  807590:	d9401e17 	ldw	r5,120(sp)
  807594:	2c69c83a 	sub	r20,r5,r17
  807598:	003d4506 	br	806ab0 <__alt_data_end+0xff806ab0>
  80759c:	d8802415 	stw	r2,144(sp)
  8075a0:	98c00007 	ldb	r3,0(r19)
  8075a4:	003c6a06 	br	806750 <__alt_data_end+0xff806750>
  8075a8:	d9402317 	ldw	r5,140(sp)
  8075ac:	d9002717 	ldw	r4,156(sp)
  8075b0:	d9801a04 	addi	r6,sp,104
  8075b4:	08064500 	call	806450 <__ssprint_r>
  8075b8:	103f591e 	bne	r2,zero,807320 <__alt_data_end+0xff807320>
  8075bc:	d8c01c17 	ldw	r3,112(sp)
  8075c0:	003f4406 	br	8072d4 <__alt_data_end+0xff8072d4>
  8075c4:	01402074 	movhi	r5,129
  8075c8:	297e4404 	addi	r5,r5,-1776
  8075cc:	d9402915 	stw	r5,164(sp)
  8075d0:	003d0906 	br	8069f8 <__alt_data_end+0xff8069f8>
  8075d4:	d8c02417 	ldw	r3,144(sp)
  8075d8:	d9002617 	ldw	r4,152(sp)
  8075dc:	d9402417 	ldw	r5,144(sp)
  8075e0:	18800017 	ldw	r2,0(r3)
  8075e4:	2007d7fa 	srai	r3,r4,31
  8075e8:	29400104 	addi	r5,r5,4
  8075ec:	d9402415 	stw	r5,144(sp)
  8075f0:	11000015 	stw	r4,0(r2)
  8075f4:	10c00115 	stw	r3,4(r2)
  8075f8:	003c2b06 	br	8066a8 <__alt_data_end+0xff8066a8>
  8075fc:	d8c01d45 	stb	r3,117(sp)
  807600:	d8c02017 	ldw	r3,128(sp)
  807604:	00800c04 	movi	r2,48
  807608:	d8801d05 	stb	r2,116(sp)
  80760c:	d8001d85 	stb	zero,118(sp)
  807610:	80800094 	ori	r2,r16,2
  807614:	1800ac16 	blt	r3,zero,8078c8 <___svfiprintf_internal_r+0x12a8>
  807618:	00bfdfc4 	movi	r2,-129
  80761c:	80a0703a 	and	r16,r16,r2
  807620:	84000094 	ori	r16,r16,2
  807624:	002b883a 	mov	r21,zero
  807628:	003cf806 	br	806a0c <__alt_data_end+0xff806a0c>
  80762c:	98c00007 	ldb	r3,0(r19)
  807630:	003c4706 	br	806750 <__alt_data_end+0xff806750>
  807634:	d9402417 	ldw	r5,144(sp)
  807638:	2c800017 	ldw	r18,0(r5)
  80763c:	29400104 	addi	r5,r5,4
  807640:	d9402415 	stw	r5,144(sp)
  807644:	9029d7fa 	srai	r20,r18,31
  807648:	a005883a 	mov	r2,r20
  80764c:	003dd806 	br	806db0 <__alt_data_end+0xff806db0>
  807650:	d9402417 	ldw	r5,144(sp)
  807654:	0029883a 	mov	r20,zero
  807658:	2c800017 	ldw	r18,0(r5)
  80765c:	29400104 	addi	r5,r5,4
  807660:	d9402415 	stw	r5,144(sp)
  807664:	003cdb06 	br	8069d4 <__alt_data_end+0xff8069d4>
  807668:	8080100c 	andi	r2,r16,64
  80766c:	d8001d85 	stb	zero,118(sp)
  807670:	10003326 	beq	r2,zero,807740 <___svfiprintf_internal_r+0x1120>
  807674:	d9002417 	ldw	r4,144(sp)
  807678:	d9402017 	ldw	r5,128(sp)
  80767c:	0029883a 	mov	r20,zero
  807680:	20800104 	addi	r2,r4,4
  807684:	2480000b 	ldhu	r18,0(r4)
  807688:	283e7e0e 	bge	r5,zero,807084 <__alt_data_end+0xff807084>
  80768c:	9506b03a 	or	r3,r18,r20
  807690:	d8802415 	stw	r2,144(sp)
  807694:	183d271e 	bne	r3,zero,806b34 <__alt_data_end+0xff806b34>
  807698:	002b883a 	mov	r21,zero
  80769c:	0005883a 	mov	r2,zero
  8076a0:	003fb506 	br	807578 <__alt_data_end+0xff807578>
  8076a4:	98c00043 	ldbu	r3,1(r19)
  8076a8:	8c400814 	ori	r17,r17,32
  8076ac:	9cc00044 	addi	r19,r19,1
  8076b0:	18c03fcc 	andi	r3,r3,255
  8076b4:	18c0201c 	xori	r3,r3,128
  8076b8:	18ffe004 	addi	r3,r3,-128
  8076bc:	003c2406 	br	806750 <__alt_data_end+0xff806750>
  8076c0:	d8c02415 	stw	r3,144(sp)
  8076c4:	002b883a 	mov	r21,zero
  8076c8:	003fa806 	br	80756c <__alt_data_end+0xff80756c>
  8076cc:	01002074 	movhi	r4,129
  8076d0:	213e4404 	addi	r4,r4,-1776
  8076d4:	d9002915 	stw	r4,164(sp)
  8076d8:	d8c02415 	stw	r3,144(sp)
  8076dc:	1021883a 	mov	r16,r2
  8076e0:	9504b03a 	or	r2,r18,r20
  8076e4:	103f8b1e 	bne	r2,zero,807514 <__alt_data_end+0xff807514>
  8076e8:	002b883a 	mov	r21,zero
  8076ec:	00800084 	movi	r2,2
  8076f0:	003fa106 	br	807578 <__alt_data_end+0xff807578>
  8076f4:	0025883a 	mov	r18,zero
  8076f8:	94800c04 	addi	r18,r18,48
  8076fc:	dc8019c5 	stb	r18,103(sp)
  807700:	dd002c17 	ldw	r20,176(sp)
  807704:	dc4019c4 	addi	r17,sp,103
  807708:	003ce906 	br	806ab0 <__alt_data_end+0xff806ab0>
  80770c:	d9402317 	ldw	r5,140(sp)
  807710:	d9002717 	ldw	r4,156(sp)
  807714:	d9801a04 	addi	r6,sp,104
  807718:	08064500 	call	806450 <__ssprint_r>
  80771c:	103f001e 	bne	r2,zero,807320 <__alt_data_end+0xff807320>
  807720:	d8c01c17 	ldw	r3,112(sp)
  807724:	d8801b17 	ldw	r2,108(sp)
  807728:	d811883a 	mov	r8,sp
  80772c:	003e7e06 	br	807128 <__alt_data_end+0xff807128>
  807730:	01402074 	movhi	r5,129
  807734:	297ea404 	addi	r5,r5,-1392
  807738:	d9402115 	stw	r5,132(sp)
  80773c:	003ea406 	br	8071d0 <__alt_data_end+0xff8071d0>
  807740:	d8c02417 	ldw	r3,144(sp)
  807744:	d9002017 	ldw	r4,128(sp)
  807748:	0029883a 	mov	r20,zero
  80774c:	18800104 	addi	r2,r3,4
  807750:	1c800017 	ldw	r18,0(r3)
  807754:	203e4b0e 	bge	r4,zero,807084 <__alt_data_end+0xff807084>
  807758:	003fcc06 	br	80768c <__alt_data_end+0xff80768c>
  80775c:	d9002417 	ldw	r4,144(sp)
  807760:	d9402017 	ldw	r5,128(sp)
  807764:	0029883a 	mov	r20,zero
  807768:	20800104 	addi	r2,r4,4
  80776c:	24800017 	ldw	r18,0(r4)
  807770:	283e270e 	bge	r5,zero,807010 <__alt_data_end+0xff807010>
  807774:	003f7b06 	br	807564 <__alt_data_end+0xff807564>
  807778:	8400100c 	andi	r16,r16,64
  80777c:	80003326 	beq	r16,zero,80784c <___svfiprintf_internal_r+0x122c>
  807780:	d9402417 	ldw	r5,144(sp)
  807784:	d8c02617 	ldw	r3,152(sp)
  807788:	28800017 	ldw	r2,0(r5)
  80778c:	29400104 	addi	r5,r5,4
  807790:	d9402415 	stw	r5,144(sp)
  807794:	10c0000d 	sth	r3,0(r2)
  807798:	003bc306 	br	8066a8 <__alt_data_end+0xff8066a8>
  80779c:	d9002417 	ldw	r4,144(sp)
  8077a0:	0029883a 	mov	r20,zero
  8077a4:	24800017 	ldw	r18,0(r4)
  8077a8:	21000104 	addi	r4,r4,4
  8077ac:	d9002415 	stw	r4,144(sp)
  8077b0:	003c8806 	br	8069d4 <__alt_data_end+0xff8069d4>
  8077b4:	d8c02417 	ldw	r3,144(sp)
  8077b8:	1c800017 	ldw	r18,0(r3)
  8077bc:	18c00104 	addi	r3,r3,4
  8077c0:	d8c02415 	stw	r3,144(sp)
  8077c4:	9029d7fa 	srai	r20,r18,31
  8077c8:	a005883a 	mov	r2,r20
  8077cc:	003d7806 	br	806db0 <__alt_data_end+0xff806db0>
  8077d0:	8809883a 	mov	r4,r17
  8077d4:	da002d15 	stw	r8,180(sp)
  8077d8:	08063b80 	call	8063b8 <strlen>
  8077dc:	1029883a 	mov	r20,r2
  8077e0:	dd401d83 	ldbu	r21,118(sp)
  8077e4:	ddc02415 	stw	r23,144(sp)
  8077e8:	d8002015 	stw	zero,128(sp)
  8077ec:	da002d17 	ldw	r8,180(sp)
  8077f0:	003caf06 	br	806ab0 <__alt_data_end+0xff806ab0>
  8077f4:	013fffc4 	movi	r4,-1
  8077f8:	003df206 	br	806fc4 <__alt_data_end+0xff806fc4>
  8077fc:	dd002017 	ldw	r20,128(sp)
  807800:	00800184 	movi	r2,6
  807804:	1500012e 	bgeu	r2,r20,80780c <___svfiprintf_internal_r+0x11ec>
  807808:	1029883a 	mov	r20,r2
  80780c:	a025883a 	mov	r18,r20
  807810:	a0004116 	blt	r20,zero,807918 <___svfiprintf_internal_r+0x12f8>
  807814:	04402074 	movhi	r17,129
  807818:	ddc02415 	stw	r23,144(sp)
  80781c:	8c7e4904 	addi	r17,r17,-1756
  807820:	003ce806 	br	806bc4 <__alt_data_end+0xff806bc4>
  807824:	04001004 	movi	r16,64
  807828:	800b883a 	mov	r5,r16
  80782c:	08005800 	call	800580 <_malloc_r>
  807830:	d8c02317 	ldw	r3,140(sp)
  807834:	18800015 	stw	r2,0(r3)
  807838:	18800415 	stw	r2,16(r3)
  80783c:	10004d26 	beq	r2,zero,807974 <___svfiprintf_internal_r+0x1354>
  807840:	d9402317 	ldw	r5,140(sp)
  807844:	2c000515 	stw	r16,20(r5)
  807848:	003b8906 	br	806670 <__alt_data_end+0xff806670>
  80784c:	d9002417 	ldw	r4,144(sp)
  807850:	d9402617 	ldw	r5,152(sp)
  807854:	20800017 	ldw	r2,0(r4)
  807858:	21000104 	addi	r4,r4,4
  80785c:	d9002415 	stw	r4,144(sp)
  807860:	11400015 	stw	r5,0(r2)
  807864:	003b9006 	br	8066a8 <__alt_data_end+0xff8066a8>
  807868:	8080004c 	andi	r2,r16,1
  80786c:	002b883a 	mov	r21,zero
  807870:	10000526 	beq	r2,zero,807888 <___svfiprintf_internal_r+0x1268>
  807874:	00800c04 	movi	r2,48
  807878:	d88019c5 	stb	r2,103(sp)
  80787c:	dd002c17 	ldw	r20,176(sp)
  807880:	dc4019c4 	addi	r17,sp,103
  807884:	003c8a06 	br	806ab0 <__alt_data_end+0xff806ab0>
  807888:	0029883a 	mov	r20,zero
  80788c:	dc401a04 	addi	r17,sp,104
  807890:	003c8706 	br	806ab0 <__alt_data_end+0xff806ab0>
  807894:	01402074 	movhi	r5,129
  807898:	297ea804 	addi	r5,r5,-1376
  80789c:	d9402815 	stw	r5,160(sp)
  8078a0:	003cff06 	br	806ca0 <__alt_data_end+0xff806ca0>
  8078a4:	00bfffc4 	movi	r2,-1
  8078a8:	003ea206 	br	807334 <__alt_data_end+0xff807334>
  8078ac:	00800044 	movi	r2,1
  8078b0:	10803fcc 	andi	r2,r2,255
  8078b4:	00c00044 	movi	r3,1
  8078b8:	10fd4526 	beq	r2,r3,806dd0 <__alt_data_end+0xff806dd0>
  8078bc:	00c00084 	movi	r3,2
  8078c0:	10fc5226 	beq	r2,r3,806a0c <__alt_data_end+0xff806a0c>
  8078c4:	003c9c06 	br	806b38 <__alt_data_end+0xff806b38>
  8078c8:	1021883a 	mov	r16,r2
  8078cc:	002b883a 	mov	r21,zero
  8078d0:	00800084 	movi	r2,2
  8078d4:	003ff606 	br	8078b0 <__alt_data_end+0xff8078b0>
  8078d8:	01002074 	movhi	r4,129
  8078dc:	213ea804 	addi	r4,r4,-1376
  8078e0:	d9002815 	stw	r4,160(sp)
  8078e4:	003e7206 	br	8072b0 <__alt_data_end+0xff8072b0>
  8078e8:	01402074 	movhi	r5,129
  8078ec:	297ea404 	addi	r5,r5,-1392
  8078f0:	d9402115 	stw	r5,132(sp)
  8078f4:	003ec506 	br	80740c <__alt_data_end+0xff80740c>
  8078f8:	e027883a 	mov	r19,fp
  8078fc:	d8002015 	stw	zero,128(sp)
  807900:	003b9406 	br	806754 <__alt_data_end+0xff806754>
  807904:	dd002017 	ldw	r20,128(sp)
  807908:	dd401d83 	ldbu	r21,118(sp)
  80790c:	ddc02415 	stw	r23,144(sp)
  807910:	d8002015 	stw	zero,128(sp)
  807914:	003c6606 	br	806ab0 <__alt_data_end+0xff806ab0>
  807918:	0025883a 	mov	r18,zero
  80791c:	003fbd06 	br	807814 <__alt_data_end+0xff807814>
  807920:	d9402417 	ldw	r5,144(sp)
  807924:	d8c02417 	ldw	r3,144(sp)
  807928:	29400017 	ldw	r5,0(r5)
  80792c:	19000104 	addi	r4,r3,4
  807930:	d9002415 	stw	r4,144(sp)
  807934:	d9402015 	stw	r5,128(sp)
  807938:	98c00043 	ldbu	r3,1(r19)
  80793c:	e027883a 	mov	r19,fp
  807940:	283f5b0e 	bge	r5,zero,8076b0 <__alt_data_end+0xff8076b0>
  807944:	18c03fcc 	andi	r3,r3,255
  807948:	013fffc4 	movi	r4,-1
  80794c:	18c0201c 	xori	r3,r3,128
  807950:	d9002015 	stw	r4,128(sp)
  807954:	18ffe004 	addi	r3,r3,-128
  807958:	003b7d06 	br	806750 <__alt_data_end+0xff806750>
  80795c:	dd401d85 	stb	r21,118(sp)
  807960:	003cf306 	br	806d30 <__alt_data_end+0xff806d30>
  807964:	dd401d85 	stb	r21,118(sp)
  807968:	003d4e06 	br	806ea4 <__alt_data_end+0xff806ea4>
  80796c:	dd401d85 	stb	r21,118(sp)
  807970:	003c0e06 	br	8069ac <__alt_data_end+0xff8069ac>
  807974:	d9002717 	ldw	r4,156(sp)
  807978:	00800304 	movi	r2,12
  80797c:	20800015 	stw	r2,0(r4)
  807980:	00bfffc4 	movi	r2,-1
  807984:	003e6b06 	br	807334 <__alt_data_end+0xff807334>
  807988:	dd401d85 	stb	r21,118(sp)
  80798c:	003d0006 	br	806d90 <__alt_data_end+0xff806d90>
  807990:	dd401d85 	stb	r21,118(sp)
  807994:	003d7106 	br	806f5c <__alt_data_end+0xff806f5c>
  807998:	dd401d85 	stb	r21,118(sp)
  80799c:	003c5706 	br	806afc <__alt_data_end+0xff806afc>
  8079a0:	dd401d85 	stb	r21,118(sp)
  8079a4:	003c2e06 	br	806a60 <__alt_data_end+0xff806a60>
  8079a8:	dd401d85 	stb	r21,118(sp)
  8079ac:	003d8c06 	br	806fe0 <__alt_data_end+0xff806fe0>
  8079b0:	dd401d85 	stb	r21,118(sp)
  8079b4:	003da706 	br	807054 <__alt_data_end+0xff807054>
  8079b8:	dd401d85 	stb	r21,118(sp)
  8079bc:	003cc806 	br	806ce0 <__alt_data_end+0xff806ce0>

008079c0 <_calloc_r>:
  8079c0:	defffe04 	addi	sp,sp,-8
  8079c4:	2805883a 	mov	r2,r5
  8079c8:	dc000015 	stw	r16,0(sp)
  8079cc:	300b883a 	mov	r5,r6
  8079d0:	2021883a 	mov	r16,r4
  8079d4:	1009883a 	mov	r4,r2
  8079d8:	dfc00115 	stw	ra,4(sp)
  8079dc:	0808ed00 	call	808ed0 <__mulsi3>
  8079e0:	100b883a 	mov	r5,r2
  8079e4:	8009883a 	mov	r4,r16
  8079e8:	08005800 	call	800580 <_malloc_r>
  8079ec:	10002926 	beq	r2,zero,807a94 <_calloc_r+0xd4>
  8079f0:	11bfff17 	ldw	r6,-4(r2)
  8079f4:	1021883a 	mov	r16,r2
  8079f8:	00bfff04 	movi	r2,-4
  8079fc:	308c703a 	and	r6,r6,r2
  807a00:	00c00904 	movi	r3,36
  807a04:	308d883a 	add	r6,r6,r2
  807a08:	19801636 	bltu	r3,r6,807a64 <_calloc_r+0xa4>
  807a0c:	008004c4 	movi	r2,19
  807a10:	11800b2e 	bgeu	r2,r6,807a40 <_calloc_r+0x80>
  807a14:	80000015 	stw	zero,0(r16)
  807a18:	80000115 	stw	zero,4(r16)
  807a1c:	008006c4 	movi	r2,27
  807a20:	11801a2e 	bgeu	r2,r6,807a8c <_calloc_r+0xcc>
  807a24:	80000215 	stw	zero,8(r16)
  807a28:	80000315 	stw	zero,12(r16)
  807a2c:	30c0151e 	bne	r6,r3,807a84 <_calloc_r+0xc4>
  807a30:	80000415 	stw	zero,16(r16)
  807a34:	80800604 	addi	r2,r16,24
  807a38:	80000515 	stw	zero,20(r16)
  807a3c:	00000106 	br	807a44 <_calloc_r+0x84>
  807a40:	8005883a 	mov	r2,r16
  807a44:	10000015 	stw	zero,0(r2)
  807a48:	10000115 	stw	zero,4(r2)
  807a4c:	10000215 	stw	zero,8(r2)
  807a50:	8005883a 	mov	r2,r16
  807a54:	dfc00117 	ldw	ra,4(sp)
  807a58:	dc000017 	ldw	r16,0(sp)
  807a5c:	dec00204 	addi	sp,sp,8
  807a60:	f800283a 	ret
  807a64:	000b883a 	mov	r5,zero
  807a68:	8009883a 	mov	r4,r16
  807a6c:	0800d8c0 	call	800d8c <memset>
  807a70:	8005883a 	mov	r2,r16
  807a74:	dfc00117 	ldw	ra,4(sp)
  807a78:	dc000017 	ldw	r16,0(sp)
  807a7c:	dec00204 	addi	sp,sp,8
  807a80:	f800283a 	ret
  807a84:	80800404 	addi	r2,r16,16
  807a88:	003fee06 	br	807a44 <__alt_data_end+0xff807a44>
  807a8c:	80800204 	addi	r2,r16,8
  807a90:	003fec06 	br	807a44 <__alt_data_end+0xff807a44>
  807a94:	0005883a 	mov	r2,zero
  807a98:	003fee06 	br	807a54 <__alt_data_end+0xff807a54>

00807a9c <memmove>:
  807a9c:	2005883a 	mov	r2,r4
  807aa0:	29000b2e 	bgeu	r5,r4,807ad0 <memmove+0x34>
  807aa4:	298f883a 	add	r7,r5,r6
  807aa8:	21c0092e 	bgeu	r4,r7,807ad0 <memmove+0x34>
  807aac:	2187883a 	add	r3,r4,r6
  807ab0:	198bc83a 	sub	r5,r3,r6
  807ab4:	30004826 	beq	r6,zero,807bd8 <memmove+0x13c>
  807ab8:	39ffffc4 	addi	r7,r7,-1
  807abc:	39000003 	ldbu	r4,0(r7)
  807ac0:	18ffffc4 	addi	r3,r3,-1
  807ac4:	19000005 	stb	r4,0(r3)
  807ac8:	28fffb1e 	bne	r5,r3,807ab8 <__alt_data_end+0xff807ab8>
  807acc:	f800283a 	ret
  807ad0:	00c003c4 	movi	r3,15
  807ad4:	1980412e 	bgeu	r3,r6,807bdc <memmove+0x140>
  807ad8:	2886b03a 	or	r3,r5,r2
  807adc:	18c000cc 	andi	r3,r3,3
  807ae0:	1800401e 	bne	r3,zero,807be4 <memmove+0x148>
  807ae4:	33fffc04 	addi	r15,r6,-16
  807ae8:	781ed13a 	srli	r15,r15,4
  807aec:	28c00104 	addi	r3,r5,4
  807af0:	13400104 	addi	r13,r2,4
  807af4:	781c913a 	slli	r14,r15,4
  807af8:	2b000204 	addi	r12,r5,8
  807afc:	12c00204 	addi	r11,r2,8
  807b00:	73800504 	addi	r14,r14,20
  807b04:	2a800304 	addi	r10,r5,12
  807b08:	12400304 	addi	r9,r2,12
  807b0c:	2b9d883a 	add	r14,r5,r14
  807b10:	2811883a 	mov	r8,r5
  807b14:	100f883a 	mov	r7,r2
  807b18:	41000017 	ldw	r4,0(r8)
  807b1c:	39c00404 	addi	r7,r7,16
  807b20:	18c00404 	addi	r3,r3,16
  807b24:	393ffc15 	stw	r4,-16(r7)
  807b28:	193ffc17 	ldw	r4,-16(r3)
  807b2c:	6b400404 	addi	r13,r13,16
  807b30:	5ac00404 	addi	r11,r11,16
  807b34:	693ffc15 	stw	r4,-16(r13)
  807b38:	61000017 	ldw	r4,0(r12)
  807b3c:	4a400404 	addi	r9,r9,16
  807b40:	42000404 	addi	r8,r8,16
  807b44:	593ffc15 	stw	r4,-16(r11)
  807b48:	51000017 	ldw	r4,0(r10)
  807b4c:	63000404 	addi	r12,r12,16
  807b50:	52800404 	addi	r10,r10,16
  807b54:	493ffc15 	stw	r4,-16(r9)
  807b58:	1bbfef1e 	bne	r3,r14,807b18 <__alt_data_end+0xff807b18>
  807b5c:	79000044 	addi	r4,r15,1
  807b60:	2008913a 	slli	r4,r4,4
  807b64:	328003cc 	andi	r10,r6,15
  807b68:	02c000c4 	movi	r11,3
  807b6c:	1107883a 	add	r3,r2,r4
  807b70:	290b883a 	add	r5,r5,r4
  807b74:	5a801e2e 	bgeu	r11,r10,807bf0 <memmove+0x154>
  807b78:	1813883a 	mov	r9,r3
  807b7c:	2811883a 	mov	r8,r5
  807b80:	500f883a 	mov	r7,r10
  807b84:	41000017 	ldw	r4,0(r8)
  807b88:	4a400104 	addi	r9,r9,4
  807b8c:	39ffff04 	addi	r7,r7,-4
  807b90:	493fff15 	stw	r4,-4(r9)
  807b94:	42000104 	addi	r8,r8,4
  807b98:	59fffa36 	bltu	r11,r7,807b84 <__alt_data_end+0xff807b84>
  807b9c:	513fff04 	addi	r4,r10,-4
  807ba0:	2008d0ba 	srli	r4,r4,2
  807ba4:	318000cc 	andi	r6,r6,3
  807ba8:	21000044 	addi	r4,r4,1
  807bac:	2109883a 	add	r4,r4,r4
  807bb0:	2109883a 	add	r4,r4,r4
  807bb4:	1907883a 	add	r3,r3,r4
  807bb8:	290b883a 	add	r5,r5,r4
  807bbc:	30000b26 	beq	r6,zero,807bec <memmove+0x150>
  807bc0:	198d883a 	add	r6,r3,r6
  807bc4:	29c00003 	ldbu	r7,0(r5)
  807bc8:	18c00044 	addi	r3,r3,1
  807bcc:	29400044 	addi	r5,r5,1
  807bd0:	19ffffc5 	stb	r7,-1(r3)
  807bd4:	19bffb1e 	bne	r3,r6,807bc4 <__alt_data_end+0xff807bc4>
  807bd8:	f800283a 	ret
  807bdc:	1007883a 	mov	r3,r2
  807be0:	003ff606 	br	807bbc <__alt_data_end+0xff807bbc>
  807be4:	1007883a 	mov	r3,r2
  807be8:	003ff506 	br	807bc0 <__alt_data_end+0xff807bc0>
  807bec:	f800283a 	ret
  807bf0:	500d883a 	mov	r6,r10
  807bf4:	003ff106 	br	807bbc <__alt_data_end+0xff807bbc>

00807bf8 <_realloc_r>:
  807bf8:	defff604 	addi	sp,sp,-40
  807bfc:	dc800215 	stw	r18,8(sp)
  807c00:	dfc00915 	stw	ra,36(sp)
  807c04:	df000815 	stw	fp,32(sp)
  807c08:	ddc00715 	stw	r23,28(sp)
  807c0c:	dd800615 	stw	r22,24(sp)
  807c10:	dd400515 	stw	r21,20(sp)
  807c14:	dd000415 	stw	r20,16(sp)
  807c18:	dcc00315 	stw	r19,12(sp)
  807c1c:	dc400115 	stw	r17,4(sp)
  807c20:	dc000015 	stw	r16,0(sp)
  807c24:	3025883a 	mov	r18,r6
  807c28:	2800b726 	beq	r5,zero,807f08 <_realloc_r+0x310>
  807c2c:	282b883a 	mov	r21,r5
  807c30:	2029883a 	mov	r20,r4
  807c34:	080b9380 	call	80b938 <__malloc_lock>
  807c38:	a8bfff17 	ldw	r2,-4(r21)
  807c3c:	043fff04 	movi	r16,-4
  807c40:	90c002c4 	addi	r3,r18,11
  807c44:	01000584 	movi	r4,22
  807c48:	acfffe04 	addi	r19,r21,-8
  807c4c:	1420703a 	and	r16,r2,r16
  807c50:	20c0332e 	bgeu	r4,r3,807d20 <_realloc_r+0x128>
  807c54:	047ffe04 	movi	r17,-8
  807c58:	1c62703a 	and	r17,r3,r17
  807c5c:	8807883a 	mov	r3,r17
  807c60:	88005816 	blt	r17,zero,807dc4 <_realloc_r+0x1cc>
  807c64:	8c805736 	bltu	r17,r18,807dc4 <_realloc_r+0x1cc>
  807c68:	80c0300e 	bge	r16,r3,807d2c <_realloc_r+0x134>
  807c6c:	07002074 	movhi	fp,129
  807c70:	e7000004 	addi	fp,fp,0
  807c74:	e1c00217 	ldw	r7,8(fp)
  807c78:	9c09883a 	add	r4,r19,r16
  807c7c:	22000117 	ldw	r8,4(r4)
  807c80:	21c06326 	beq	r4,r7,807e10 <_realloc_r+0x218>
  807c84:	017fff84 	movi	r5,-2
  807c88:	414a703a 	and	r5,r8,r5
  807c8c:	214b883a 	add	r5,r4,r5
  807c90:	29800117 	ldw	r6,4(r5)
  807c94:	3180004c 	andi	r6,r6,1
  807c98:	30003f26 	beq	r6,zero,807d98 <_realloc_r+0x1a0>
  807c9c:	1080004c 	andi	r2,r2,1
  807ca0:	10008326 	beq	r2,zero,807eb0 <_realloc_r+0x2b8>
  807ca4:	900b883a 	mov	r5,r18
  807ca8:	a009883a 	mov	r4,r20
  807cac:	08005800 	call	800580 <_malloc_r>
  807cb0:	1025883a 	mov	r18,r2
  807cb4:	10011e26 	beq	r2,zero,808130 <_realloc_r+0x538>
  807cb8:	a93fff17 	ldw	r4,-4(r21)
  807cbc:	10fffe04 	addi	r3,r2,-8
  807cc0:	00bfff84 	movi	r2,-2
  807cc4:	2084703a 	and	r2,r4,r2
  807cc8:	9885883a 	add	r2,r19,r2
  807ccc:	1880ee26 	beq	r3,r2,808088 <_realloc_r+0x490>
  807cd0:	81bfff04 	addi	r6,r16,-4
  807cd4:	00800904 	movi	r2,36
  807cd8:	1180b836 	bltu	r2,r6,807fbc <_realloc_r+0x3c4>
  807cdc:	00c004c4 	movi	r3,19
  807ce0:	19809636 	bltu	r3,r6,807f3c <_realloc_r+0x344>
  807ce4:	9005883a 	mov	r2,r18
  807ce8:	a807883a 	mov	r3,r21
  807cec:	19000017 	ldw	r4,0(r3)
  807cf0:	11000015 	stw	r4,0(r2)
  807cf4:	19000117 	ldw	r4,4(r3)
  807cf8:	11000115 	stw	r4,4(r2)
  807cfc:	18c00217 	ldw	r3,8(r3)
  807d00:	10c00215 	stw	r3,8(r2)
  807d04:	a80b883a 	mov	r5,r21
  807d08:	a009883a 	mov	r4,r20
  807d0c:	0804b980 	call	804b98 <_free_r>
  807d10:	a009883a 	mov	r4,r20
  807d14:	080b95c0 	call	80b95c <__malloc_unlock>
  807d18:	9005883a 	mov	r2,r18
  807d1c:	00001206 	br	807d68 <_realloc_r+0x170>
  807d20:	00c00404 	movi	r3,16
  807d24:	1823883a 	mov	r17,r3
  807d28:	003fce06 	br	807c64 <__alt_data_end+0xff807c64>
  807d2c:	a825883a 	mov	r18,r21
  807d30:	8445c83a 	sub	r2,r16,r17
  807d34:	00c003c4 	movi	r3,15
  807d38:	18802636 	bltu	r3,r2,807dd4 <_realloc_r+0x1dc>
  807d3c:	99800117 	ldw	r6,4(r19)
  807d40:	9c07883a 	add	r3,r19,r16
  807d44:	3180004c 	andi	r6,r6,1
  807d48:	3420b03a 	or	r16,r6,r16
  807d4c:	9c000115 	stw	r16,4(r19)
  807d50:	18800117 	ldw	r2,4(r3)
  807d54:	10800054 	ori	r2,r2,1
  807d58:	18800115 	stw	r2,4(r3)
  807d5c:	a009883a 	mov	r4,r20
  807d60:	080b95c0 	call	80b95c <__malloc_unlock>
  807d64:	9005883a 	mov	r2,r18
  807d68:	dfc00917 	ldw	ra,36(sp)
  807d6c:	df000817 	ldw	fp,32(sp)
  807d70:	ddc00717 	ldw	r23,28(sp)
  807d74:	dd800617 	ldw	r22,24(sp)
  807d78:	dd400517 	ldw	r21,20(sp)
  807d7c:	dd000417 	ldw	r20,16(sp)
  807d80:	dcc00317 	ldw	r19,12(sp)
  807d84:	dc800217 	ldw	r18,8(sp)
  807d88:	dc400117 	ldw	r17,4(sp)
  807d8c:	dc000017 	ldw	r16,0(sp)
  807d90:	dec00a04 	addi	sp,sp,40
  807d94:	f800283a 	ret
  807d98:	017fff04 	movi	r5,-4
  807d9c:	414a703a 	and	r5,r8,r5
  807da0:	814d883a 	add	r6,r16,r5
  807da4:	30c01f16 	blt	r6,r3,807e24 <_realloc_r+0x22c>
  807da8:	20800317 	ldw	r2,12(r4)
  807dac:	20c00217 	ldw	r3,8(r4)
  807db0:	a825883a 	mov	r18,r21
  807db4:	3021883a 	mov	r16,r6
  807db8:	18800315 	stw	r2,12(r3)
  807dbc:	10c00215 	stw	r3,8(r2)
  807dc0:	003fdb06 	br	807d30 <__alt_data_end+0xff807d30>
  807dc4:	00800304 	movi	r2,12
  807dc8:	a0800015 	stw	r2,0(r20)
  807dcc:	0005883a 	mov	r2,zero
  807dd0:	003fe506 	br	807d68 <__alt_data_end+0xff807d68>
  807dd4:	98c00117 	ldw	r3,4(r19)
  807dd8:	9c4b883a 	add	r5,r19,r17
  807ddc:	11000054 	ori	r4,r2,1
  807de0:	18c0004c 	andi	r3,r3,1
  807de4:	1c62b03a 	or	r17,r3,r17
  807de8:	9c400115 	stw	r17,4(r19)
  807dec:	29000115 	stw	r4,4(r5)
  807df0:	2885883a 	add	r2,r5,r2
  807df4:	10c00117 	ldw	r3,4(r2)
  807df8:	29400204 	addi	r5,r5,8
  807dfc:	a009883a 	mov	r4,r20
  807e00:	18c00054 	ori	r3,r3,1
  807e04:	10c00115 	stw	r3,4(r2)
  807e08:	0804b980 	call	804b98 <_free_r>
  807e0c:	003fd306 	br	807d5c <__alt_data_end+0xff807d5c>
  807e10:	017fff04 	movi	r5,-4
  807e14:	414a703a 	and	r5,r8,r5
  807e18:	89800404 	addi	r6,r17,16
  807e1c:	8151883a 	add	r8,r16,r5
  807e20:	4180590e 	bge	r8,r6,807f88 <_realloc_r+0x390>
  807e24:	1080004c 	andi	r2,r2,1
  807e28:	103f9e1e 	bne	r2,zero,807ca4 <__alt_data_end+0xff807ca4>
  807e2c:	adbffe17 	ldw	r22,-8(r21)
  807e30:	00bfff04 	movi	r2,-4
  807e34:	9dadc83a 	sub	r22,r19,r22
  807e38:	b1800117 	ldw	r6,4(r22)
  807e3c:	3084703a 	and	r2,r6,r2
  807e40:	20002026 	beq	r4,zero,807ec4 <_realloc_r+0x2cc>
  807e44:	80af883a 	add	r23,r16,r2
  807e48:	b96f883a 	add	r23,r23,r5
  807e4c:	21c05f26 	beq	r4,r7,807fcc <_realloc_r+0x3d4>
  807e50:	b8c01c16 	blt	r23,r3,807ec4 <_realloc_r+0x2cc>
  807e54:	20800317 	ldw	r2,12(r4)
  807e58:	20c00217 	ldw	r3,8(r4)
  807e5c:	81bfff04 	addi	r6,r16,-4
  807e60:	01000904 	movi	r4,36
  807e64:	18800315 	stw	r2,12(r3)
  807e68:	10c00215 	stw	r3,8(r2)
  807e6c:	b0c00217 	ldw	r3,8(r22)
  807e70:	b0800317 	ldw	r2,12(r22)
  807e74:	b4800204 	addi	r18,r22,8
  807e78:	18800315 	stw	r2,12(r3)
  807e7c:	10c00215 	stw	r3,8(r2)
  807e80:	21801b36 	bltu	r4,r6,807ef0 <_realloc_r+0x2f8>
  807e84:	008004c4 	movi	r2,19
  807e88:	1180352e 	bgeu	r2,r6,807f60 <_realloc_r+0x368>
  807e8c:	a8800017 	ldw	r2,0(r21)
  807e90:	b0800215 	stw	r2,8(r22)
  807e94:	a8800117 	ldw	r2,4(r21)
  807e98:	b0800315 	stw	r2,12(r22)
  807e9c:	008006c4 	movi	r2,27
  807ea0:	11807f36 	bltu	r2,r6,8080a0 <_realloc_r+0x4a8>
  807ea4:	b0800404 	addi	r2,r22,16
  807ea8:	ad400204 	addi	r21,r21,8
  807eac:	00002d06 	br	807f64 <_realloc_r+0x36c>
  807eb0:	adbffe17 	ldw	r22,-8(r21)
  807eb4:	00bfff04 	movi	r2,-4
  807eb8:	9dadc83a 	sub	r22,r19,r22
  807ebc:	b1000117 	ldw	r4,4(r22)
  807ec0:	2084703a 	and	r2,r4,r2
  807ec4:	b03f7726 	beq	r22,zero,807ca4 <__alt_data_end+0xff807ca4>
  807ec8:	80af883a 	add	r23,r16,r2
  807ecc:	b8ff7516 	blt	r23,r3,807ca4 <__alt_data_end+0xff807ca4>
  807ed0:	b0800317 	ldw	r2,12(r22)
  807ed4:	b0c00217 	ldw	r3,8(r22)
  807ed8:	81bfff04 	addi	r6,r16,-4
  807edc:	01000904 	movi	r4,36
  807ee0:	18800315 	stw	r2,12(r3)
  807ee4:	10c00215 	stw	r3,8(r2)
  807ee8:	b4800204 	addi	r18,r22,8
  807eec:	21bfe52e 	bgeu	r4,r6,807e84 <__alt_data_end+0xff807e84>
  807ef0:	a80b883a 	mov	r5,r21
  807ef4:	9009883a 	mov	r4,r18
  807ef8:	0807a9c0 	call	807a9c <memmove>
  807efc:	b821883a 	mov	r16,r23
  807f00:	b027883a 	mov	r19,r22
  807f04:	003f8a06 	br	807d30 <__alt_data_end+0xff807d30>
  807f08:	300b883a 	mov	r5,r6
  807f0c:	dfc00917 	ldw	ra,36(sp)
  807f10:	df000817 	ldw	fp,32(sp)
  807f14:	ddc00717 	ldw	r23,28(sp)
  807f18:	dd800617 	ldw	r22,24(sp)
  807f1c:	dd400517 	ldw	r21,20(sp)
  807f20:	dd000417 	ldw	r20,16(sp)
  807f24:	dcc00317 	ldw	r19,12(sp)
  807f28:	dc800217 	ldw	r18,8(sp)
  807f2c:	dc400117 	ldw	r17,4(sp)
  807f30:	dc000017 	ldw	r16,0(sp)
  807f34:	dec00a04 	addi	sp,sp,40
  807f38:	08005801 	jmpi	800580 <_malloc_r>
  807f3c:	a8c00017 	ldw	r3,0(r21)
  807f40:	90c00015 	stw	r3,0(r18)
  807f44:	a8c00117 	ldw	r3,4(r21)
  807f48:	90c00115 	stw	r3,4(r18)
  807f4c:	00c006c4 	movi	r3,27
  807f50:	19804536 	bltu	r3,r6,808068 <_realloc_r+0x470>
  807f54:	90800204 	addi	r2,r18,8
  807f58:	a8c00204 	addi	r3,r21,8
  807f5c:	003f6306 	br	807cec <__alt_data_end+0xff807cec>
  807f60:	9005883a 	mov	r2,r18
  807f64:	a8c00017 	ldw	r3,0(r21)
  807f68:	b821883a 	mov	r16,r23
  807f6c:	b027883a 	mov	r19,r22
  807f70:	10c00015 	stw	r3,0(r2)
  807f74:	a8c00117 	ldw	r3,4(r21)
  807f78:	10c00115 	stw	r3,4(r2)
  807f7c:	a8c00217 	ldw	r3,8(r21)
  807f80:	10c00215 	stw	r3,8(r2)
  807f84:	003f6a06 	br	807d30 <__alt_data_end+0xff807d30>
  807f88:	9c67883a 	add	r19,r19,r17
  807f8c:	4445c83a 	sub	r2,r8,r17
  807f90:	e4c00215 	stw	r19,8(fp)
  807f94:	10800054 	ori	r2,r2,1
  807f98:	98800115 	stw	r2,4(r19)
  807f9c:	a8bfff17 	ldw	r2,-4(r21)
  807fa0:	a009883a 	mov	r4,r20
  807fa4:	1080004c 	andi	r2,r2,1
  807fa8:	1462b03a 	or	r17,r2,r17
  807fac:	ac7fff15 	stw	r17,-4(r21)
  807fb0:	080b95c0 	call	80b95c <__malloc_unlock>
  807fb4:	a805883a 	mov	r2,r21
  807fb8:	003f6b06 	br	807d68 <__alt_data_end+0xff807d68>
  807fbc:	a80b883a 	mov	r5,r21
  807fc0:	9009883a 	mov	r4,r18
  807fc4:	0807a9c0 	call	807a9c <memmove>
  807fc8:	003f4e06 	br	807d04 <__alt_data_end+0xff807d04>
  807fcc:	89000404 	addi	r4,r17,16
  807fd0:	b93fbc16 	blt	r23,r4,807ec4 <__alt_data_end+0xff807ec4>
  807fd4:	b0800317 	ldw	r2,12(r22)
  807fd8:	b0c00217 	ldw	r3,8(r22)
  807fdc:	81bfff04 	addi	r6,r16,-4
  807fe0:	01000904 	movi	r4,36
  807fe4:	18800315 	stw	r2,12(r3)
  807fe8:	10c00215 	stw	r3,8(r2)
  807fec:	b4800204 	addi	r18,r22,8
  807ff0:	21804336 	bltu	r4,r6,808100 <_realloc_r+0x508>
  807ff4:	008004c4 	movi	r2,19
  807ff8:	11803f2e 	bgeu	r2,r6,8080f8 <_realloc_r+0x500>
  807ffc:	a8800017 	ldw	r2,0(r21)
  808000:	b0800215 	stw	r2,8(r22)
  808004:	a8800117 	ldw	r2,4(r21)
  808008:	b0800315 	stw	r2,12(r22)
  80800c:	008006c4 	movi	r2,27
  808010:	11803f36 	bltu	r2,r6,808110 <_realloc_r+0x518>
  808014:	b0800404 	addi	r2,r22,16
  808018:	ad400204 	addi	r21,r21,8
  80801c:	a8c00017 	ldw	r3,0(r21)
  808020:	10c00015 	stw	r3,0(r2)
  808024:	a8c00117 	ldw	r3,4(r21)
  808028:	10c00115 	stw	r3,4(r2)
  80802c:	a8c00217 	ldw	r3,8(r21)
  808030:	10c00215 	stw	r3,8(r2)
  808034:	b447883a 	add	r3,r22,r17
  808038:	bc45c83a 	sub	r2,r23,r17
  80803c:	e0c00215 	stw	r3,8(fp)
  808040:	10800054 	ori	r2,r2,1
  808044:	18800115 	stw	r2,4(r3)
  808048:	b0800117 	ldw	r2,4(r22)
  80804c:	a009883a 	mov	r4,r20
  808050:	1080004c 	andi	r2,r2,1
  808054:	1462b03a 	or	r17,r2,r17
  808058:	b4400115 	stw	r17,4(r22)
  80805c:	080b95c0 	call	80b95c <__malloc_unlock>
  808060:	9005883a 	mov	r2,r18
  808064:	003f4006 	br	807d68 <__alt_data_end+0xff807d68>
  808068:	a8c00217 	ldw	r3,8(r21)
  80806c:	90c00215 	stw	r3,8(r18)
  808070:	a8c00317 	ldw	r3,12(r21)
  808074:	90c00315 	stw	r3,12(r18)
  808078:	30801126 	beq	r6,r2,8080c0 <_realloc_r+0x4c8>
  80807c:	90800404 	addi	r2,r18,16
  808080:	a8c00404 	addi	r3,r21,16
  808084:	003f1906 	br	807cec <__alt_data_end+0xff807cec>
  808088:	90ffff17 	ldw	r3,-4(r18)
  80808c:	00bfff04 	movi	r2,-4
  808090:	a825883a 	mov	r18,r21
  808094:	1884703a 	and	r2,r3,r2
  808098:	80a1883a 	add	r16,r16,r2
  80809c:	003f2406 	br	807d30 <__alt_data_end+0xff807d30>
  8080a0:	a8800217 	ldw	r2,8(r21)
  8080a4:	b0800415 	stw	r2,16(r22)
  8080a8:	a8800317 	ldw	r2,12(r21)
  8080ac:	b0800515 	stw	r2,20(r22)
  8080b0:	31000a26 	beq	r6,r4,8080dc <_realloc_r+0x4e4>
  8080b4:	b0800604 	addi	r2,r22,24
  8080b8:	ad400404 	addi	r21,r21,16
  8080bc:	003fa906 	br	807f64 <__alt_data_end+0xff807f64>
  8080c0:	a9000417 	ldw	r4,16(r21)
  8080c4:	90800604 	addi	r2,r18,24
  8080c8:	a8c00604 	addi	r3,r21,24
  8080cc:	91000415 	stw	r4,16(r18)
  8080d0:	a9000517 	ldw	r4,20(r21)
  8080d4:	91000515 	stw	r4,20(r18)
  8080d8:	003f0406 	br	807cec <__alt_data_end+0xff807cec>
  8080dc:	a8c00417 	ldw	r3,16(r21)
  8080e0:	ad400604 	addi	r21,r21,24
  8080e4:	b0800804 	addi	r2,r22,32
  8080e8:	b0c00615 	stw	r3,24(r22)
  8080ec:	a8ffff17 	ldw	r3,-4(r21)
  8080f0:	b0c00715 	stw	r3,28(r22)
  8080f4:	003f9b06 	br	807f64 <__alt_data_end+0xff807f64>
  8080f8:	9005883a 	mov	r2,r18
  8080fc:	003fc706 	br	80801c <__alt_data_end+0xff80801c>
  808100:	a80b883a 	mov	r5,r21
  808104:	9009883a 	mov	r4,r18
  808108:	0807a9c0 	call	807a9c <memmove>
  80810c:	003fc906 	br	808034 <__alt_data_end+0xff808034>
  808110:	a8800217 	ldw	r2,8(r21)
  808114:	b0800415 	stw	r2,16(r22)
  808118:	a8800317 	ldw	r2,12(r21)
  80811c:	b0800515 	stw	r2,20(r22)
  808120:	31000726 	beq	r6,r4,808140 <_realloc_r+0x548>
  808124:	b0800604 	addi	r2,r22,24
  808128:	ad400404 	addi	r21,r21,16
  80812c:	003fbb06 	br	80801c <__alt_data_end+0xff80801c>
  808130:	a009883a 	mov	r4,r20
  808134:	080b95c0 	call	80b95c <__malloc_unlock>
  808138:	0005883a 	mov	r2,zero
  80813c:	003f0a06 	br	807d68 <__alt_data_end+0xff807d68>
  808140:	a8c00417 	ldw	r3,16(r21)
  808144:	ad400604 	addi	r21,r21,24
  808148:	b0800804 	addi	r2,r22,32
  80814c:	b0c00615 	stw	r3,24(r22)
  808150:	a8ffff17 	ldw	r3,-4(r21)
  808154:	b0c00715 	stw	r3,28(r22)
  808158:	003fb006 	br	80801c <__alt_data_end+0xff80801c>

0080815c <__udivdi3>:
  80815c:	defff404 	addi	sp,sp,-48
  808160:	dcc00515 	stw	r19,20(sp)
  808164:	dc000215 	stw	r16,8(sp)
  808168:	dfc00b15 	stw	ra,44(sp)
  80816c:	df000a15 	stw	fp,40(sp)
  808170:	ddc00915 	stw	r23,36(sp)
  808174:	dd800815 	stw	r22,32(sp)
  808178:	dd400715 	stw	r21,28(sp)
  80817c:	dd000615 	stw	r20,24(sp)
  808180:	dc800415 	stw	r18,16(sp)
  808184:	dc400315 	stw	r17,12(sp)
  808188:	2027883a 	mov	r19,r4
  80818c:	2821883a 	mov	r16,r5
  808190:	3800461e 	bne	r7,zero,8082ac <__udivdi3+0x150>
  808194:	3023883a 	mov	r17,r6
  808198:	2025883a 	mov	r18,r4
  80819c:	2980572e 	bgeu	r5,r6,8082fc <__udivdi3+0x1a0>
  8081a0:	00bfffd4 	movui	r2,65535
  8081a4:	282d883a 	mov	r22,r5
  8081a8:	1180b236 	bltu	r2,r6,808474 <__udivdi3+0x318>
  8081ac:	00803fc4 	movi	r2,255
  8081b0:	1185803a 	cmpltu	r2,r2,r6
  8081b4:	100490fa 	slli	r2,r2,3
  8081b8:	3086d83a 	srl	r3,r6,r2
  8081bc:	01002074 	movhi	r4,129
  8081c0:	213eac04 	addi	r4,r4,-1360
  8081c4:	20c7883a 	add	r3,r4,r3
  8081c8:	18c00003 	ldbu	r3,0(r3)
  8081cc:	1885883a 	add	r2,r3,r2
  8081d0:	00c00804 	movi	r3,32
  8081d4:	1887c83a 	sub	r3,r3,r2
  8081d8:	18000526 	beq	r3,zero,8081f0 <__udivdi3+0x94>
  8081dc:	80e0983a 	sll	r16,r16,r3
  8081e0:	9884d83a 	srl	r2,r19,r2
  8081e4:	30e2983a 	sll	r17,r6,r3
  8081e8:	98e4983a 	sll	r18,r19,r3
  8081ec:	142cb03a 	or	r22,r2,r16
  8081f0:	882ad43a 	srli	r21,r17,16
  8081f4:	b009883a 	mov	r4,r22
  8081f8:	8d3fffcc 	andi	r20,r17,65535
  8081fc:	a80b883a 	mov	r5,r21
  808200:	0808e780 	call	808e78 <__umodsi3>
  808204:	b009883a 	mov	r4,r22
  808208:	a80b883a 	mov	r5,r21
  80820c:	1027883a 	mov	r19,r2
  808210:	0808e140 	call	808e14 <__udivsi3>
  808214:	100b883a 	mov	r5,r2
  808218:	a009883a 	mov	r4,r20
  80821c:	102d883a 	mov	r22,r2
  808220:	0808ed00 	call	808ed0 <__mulsi3>
  808224:	9826943a 	slli	r19,r19,16
  808228:	9006d43a 	srli	r3,r18,16
  80822c:	1cc6b03a 	or	r3,r3,r19
  808230:	1880052e 	bgeu	r3,r2,808248 <__udivdi3+0xec>
  808234:	1c47883a 	add	r3,r3,r17
  808238:	b13fffc4 	addi	r4,r22,-1
  80823c:	1c400136 	bltu	r3,r17,808244 <__udivdi3+0xe8>
  808240:	18814236 	bltu	r3,r2,80874c <__udivdi3+0x5f0>
  808244:	202d883a 	mov	r22,r4
  808248:	18a1c83a 	sub	r16,r3,r2
  80824c:	8009883a 	mov	r4,r16
  808250:	a80b883a 	mov	r5,r21
  808254:	0808e780 	call	808e78 <__umodsi3>
  808258:	1027883a 	mov	r19,r2
  80825c:	8009883a 	mov	r4,r16
  808260:	a80b883a 	mov	r5,r21
  808264:	9826943a 	slli	r19,r19,16
  808268:	0808e140 	call	808e14 <__udivsi3>
  80826c:	100b883a 	mov	r5,r2
  808270:	a009883a 	mov	r4,r20
  808274:	94bfffcc 	andi	r18,r18,65535
  808278:	1021883a 	mov	r16,r2
  80827c:	94e4b03a 	or	r18,r18,r19
  808280:	0808ed00 	call	808ed0 <__mulsi3>
  808284:	9080052e 	bgeu	r18,r2,80829c <__udivdi3+0x140>
  808288:	8ca5883a 	add	r18,r17,r18
  80828c:	80ffffc4 	addi	r3,r16,-1
  808290:	94410c36 	bltu	r18,r17,8086c4 <__udivdi3+0x568>
  808294:	90810b2e 	bgeu	r18,r2,8086c4 <__udivdi3+0x568>
  808298:	843fff84 	addi	r16,r16,-2
  80829c:	b004943a 	slli	r2,r22,16
  8082a0:	0007883a 	mov	r3,zero
  8082a4:	1404b03a 	or	r2,r2,r16
  8082a8:	00005e06 	br	808424 <__udivdi3+0x2c8>
  8082ac:	29c05b36 	bltu	r5,r7,80841c <__udivdi3+0x2c0>
  8082b0:	00bfffd4 	movui	r2,65535
  8082b4:	11c0672e 	bgeu	r2,r7,808454 <__udivdi3+0x2f8>
  8082b8:	00804034 	movhi	r2,256
  8082bc:	10bfffc4 	addi	r2,r2,-1
  8082c0:	11c10a36 	bltu	r2,r7,8086ec <__udivdi3+0x590>
  8082c4:	00800404 	movi	r2,16
  8082c8:	3886d83a 	srl	r3,r7,r2
  8082cc:	01002074 	movhi	r4,129
  8082d0:	213eac04 	addi	r4,r4,-1360
  8082d4:	20c7883a 	add	r3,r4,r3
  8082d8:	18c00003 	ldbu	r3,0(r3)
  8082dc:	05c00804 	movi	r23,32
  8082e0:	1885883a 	add	r2,r3,r2
  8082e4:	b8afc83a 	sub	r23,r23,r2
  8082e8:	b800671e 	bne	r23,zero,808488 <__udivdi3+0x32c>
  8082ec:	3c010536 	bltu	r7,r16,808704 <__udivdi3+0x5a8>
  8082f0:	9985403a 	cmpgeu	r2,r19,r6
  8082f4:	0007883a 	mov	r3,zero
  8082f8:	00004a06 	br	808424 <__udivdi3+0x2c8>
  8082fc:	3000041e 	bne	r6,zero,808310 <__udivdi3+0x1b4>
  808300:	000b883a 	mov	r5,zero
  808304:	01000044 	movi	r4,1
  808308:	0808e140 	call	808e14 <__udivsi3>
  80830c:	1023883a 	mov	r17,r2
  808310:	00bfffd4 	movui	r2,65535
  808314:	1440532e 	bgeu	r2,r17,808464 <__udivdi3+0x308>
  808318:	00804034 	movhi	r2,256
  80831c:	10bfffc4 	addi	r2,r2,-1
  808320:	1440f436 	bltu	r2,r17,8086f4 <__udivdi3+0x598>
  808324:	00800404 	movi	r2,16
  808328:	8886d83a 	srl	r3,r17,r2
  80832c:	01002074 	movhi	r4,129
  808330:	213eac04 	addi	r4,r4,-1360
  808334:	20c7883a 	add	r3,r4,r3
  808338:	18c00003 	ldbu	r3,0(r3)
  80833c:	1885883a 	add	r2,r3,r2
  808340:	00c00804 	movi	r3,32
  808344:	1887c83a 	sub	r3,r3,r2
  808348:	1800a51e 	bne	r3,zero,8085e0 <__udivdi3+0x484>
  80834c:	882ad43a 	srli	r21,r17,16
  808350:	8461c83a 	sub	r16,r16,r17
  808354:	8d3fffcc 	andi	r20,r17,65535
  808358:	00c00044 	movi	r3,1
  80835c:	a80b883a 	mov	r5,r21
  808360:	8009883a 	mov	r4,r16
  808364:	d8c00115 	stw	r3,4(sp)
  808368:	0808e780 	call	808e78 <__umodsi3>
  80836c:	a80b883a 	mov	r5,r21
  808370:	8009883a 	mov	r4,r16
  808374:	1027883a 	mov	r19,r2
  808378:	0808e140 	call	808e14 <__udivsi3>
  80837c:	a00b883a 	mov	r5,r20
  808380:	1009883a 	mov	r4,r2
  808384:	102d883a 	mov	r22,r2
  808388:	0808ed00 	call	808ed0 <__mulsi3>
  80838c:	9826943a 	slli	r19,r19,16
  808390:	900ed43a 	srli	r7,r18,16
  808394:	d8c00117 	ldw	r3,4(sp)
  808398:	3cceb03a 	or	r7,r7,r19
  80839c:	3880052e 	bgeu	r7,r2,8083b4 <__udivdi3+0x258>
  8083a0:	3c4f883a 	add	r7,r7,r17
  8083a4:	b13fffc4 	addi	r4,r22,-1
  8083a8:	3c400136 	bltu	r7,r17,8083b0 <__udivdi3+0x254>
  8083ac:	3880e436 	bltu	r7,r2,808740 <__udivdi3+0x5e4>
  8083b0:	202d883a 	mov	r22,r4
  8083b4:	38a1c83a 	sub	r16,r7,r2
  8083b8:	8009883a 	mov	r4,r16
  8083bc:	a80b883a 	mov	r5,r21
  8083c0:	d8c00115 	stw	r3,4(sp)
  8083c4:	0808e780 	call	808e78 <__umodsi3>
  8083c8:	1027883a 	mov	r19,r2
  8083cc:	8009883a 	mov	r4,r16
  8083d0:	a80b883a 	mov	r5,r21
  8083d4:	9826943a 	slli	r19,r19,16
  8083d8:	0808e140 	call	808e14 <__udivsi3>
  8083dc:	a00b883a 	mov	r5,r20
  8083e0:	1009883a 	mov	r4,r2
  8083e4:	94bfffcc 	andi	r18,r18,65535
  8083e8:	1021883a 	mov	r16,r2
  8083ec:	94e4b03a 	or	r18,r18,r19
  8083f0:	0808ed00 	call	808ed0 <__mulsi3>
  8083f4:	d8c00117 	ldw	r3,4(sp)
  8083f8:	9080052e 	bgeu	r18,r2,808410 <__udivdi3+0x2b4>
  8083fc:	8ca5883a 	add	r18,r17,r18
  808400:	813fffc4 	addi	r4,r16,-1
  808404:	9440ad36 	bltu	r18,r17,8086bc <__udivdi3+0x560>
  808408:	9080ac2e 	bgeu	r18,r2,8086bc <__udivdi3+0x560>
  80840c:	843fff84 	addi	r16,r16,-2
  808410:	b004943a 	slli	r2,r22,16
  808414:	1404b03a 	or	r2,r2,r16
  808418:	00000206 	br	808424 <__udivdi3+0x2c8>
  80841c:	0007883a 	mov	r3,zero
  808420:	0005883a 	mov	r2,zero
  808424:	dfc00b17 	ldw	ra,44(sp)
  808428:	df000a17 	ldw	fp,40(sp)
  80842c:	ddc00917 	ldw	r23,36(sp)
  808430:	dd800817 	ldw	r22,32(sp)
  808434:	dd400717 	ldw	r21,28(sp)
  808438:	dd000617 	ldw	r20,24(sp)
  80843c:	dcc00517 	ldw	r19,20(sp)
  808440:	dc800417 	ldw	r18,16(sp)
  808444:	dc400317 	ldw	r17,12(sp)
  808448:	dc000217 	ldw	r16,8(sp)
  80844c:	dec00c04 	addi	sp,sp,48
  808450:	f800283a 	ret
  808454:	00803fc4 	movi	r2,255
  808458:	11c5803a 	cmpltu	r2,r2,r7
  80845c:	100490fa 	slli	r2,r2,3
  808460:	003f9906 	br	8082c8 <__alt_data_end+0xff8082c8>
  808464:	00803fc4 	movi	r2,255
  808468:	1445803a 	cmpltu	r2,r2,r17
  80846c:	100490fa 	slli	r2,r2,3
  808470:	003fad06 	br	808328 <__alt_data_end+0xff808328>
  808474:	00804034 	movhi	r2,256
  808478:	10bfffc4 	addi	r2,r2,-1
  80847c:	11809f36 	bltu	r2,r6,8086fc <__udivdi3+0x5a0>
  808480:	00800404 	movi	r2,16
  808484:	003f4c06 	br	8081b8 <__alt_data_end+0xff8081b8>
  808488:	3dce983a 	sll	r7,r7,r23
  80848c:	30b8d83a 	srl	fp,r6,r2
  808490:	80a2d83a 	srl	r17,r16,r2
  808494:	35cc983a 	sll	r6,r6,r23
  808498:	3f38b03a 	or	fp,r7,fp
  80849c:	e024d43a 	srli	r18,fp,16
  8084a0:	9884d83a 	srl	r2,r19,r2
  8084a4:	85e0983a 	sll	r16,r16,r23
  8084a8:	8809883a 	mov	r4,r17
  8084ac:	900b883a 	mov	r5,r18
  8084b0:	d9800015 	stw	r6,0(sp)
  8084b4:	1420b03a 	or	r16,r2,r16
  8084b8:	0808e780 	call	808e78 <__umodsi3>
  8084bc:	900b883a 	mov	r5,r18
  8084c0:	8809883a 	mov	r4,r17
  8084c4:	1029883a 	mov	r20,r2
  8084c8:	e5bfffcc 	andi	r22,fp,65535
  8084cc:	0808e140 	call	808e14 <__udivsi3>
  8084d0:	100b883a 	mov	r5,r2
  8084d4:	b009883a 	mov	r4,r22
  8084d8:	102b883a 	mov	r21,r2
  8084dc:	0808ed00 	call	808ed0 <__mulsi3>
  8084e0:	a028943a 	slli	r20,r20,16
  8084e4:	8006d43a 	srli	r3,r16,16
  8084e8:	1d06b03a 	or	r3,r3,r20
  8084ec:	1880042e 	bgeu	r3,r2,808500 <__udivdi3+0x3a4>
  8084f0:	1f07883a 	add	r3,r3,fp
  8084f4:	a93fffc4 	addi	r4,r21,-1
  8084f8:	1f00892e 	bgeu	r3,fp,808720 <__udivdi3+0x5c4>
  8084fc:	202b883a 	mov	r21,r4
  808500:	18a3c83a 	sub	r17,r3,r2
  808504:	8809883a 	mov	r4,r17
  808508:	900b883a 	mov	r5,r18
  80850c:	0808e780 	call	808e78 <__umodsi3>
  808510:	1029883a 	mov	r20,r2
  808514:	8809883a 	mov	r4,r17
  808518:	900b883a 	mov	r5,r18
  80851c:	a028943a 	slli	r20,r20,16
  808520:	0808e140 	call	808e14 <__udivsi3>
  808524:	100b883a 	mov	r5,r2
  808528:	b009883a 	mov	r4,r22
  80852c:	843fffcc 	andi	r16,r16,65535
  808530:	1023883a 	mov	r17,r2
  808534:	8520b03a 	or	r16,r16,r20
  808538:	0808ed00 	call	808ed0 <__mulsi3>
  80853c:	8080042e 	bgeu	r16,r2,808550 <__udivdi3+0x3f4>
  808540:	8721883a 	add	r16,r16,fp
  808544:	88ffffc4 	addi	r3,r17,-1
  808548:	8700712e 	bgeu	r16,fp,808710 <__udivdi3+0x5b4>
  80854c:	1823883a 	mov	r17,r3
  808550:	a80e943a 	slli	r7,r21,16
  808554:	d8c00017 	ldw	r3,0(sp)
  808558:	80a1c83a 	sub	r16,r16,r2
  80855c:	3c64b03a 	or	r18,r7,r17
  808560:	1d3fffcc 	andi	r20,r3,65535
  808564:	9022d43a 	srli	r17,r18,16
  808568:	95bfffcc 	andi	r22,r18,65535
  80856c:	a00b883a 	mov	r5,r20
  808570:	b009883a 	mov	r4,r22
  808574:	182ad43a 	srli	r21,r3,16
  808578:	0808ed00 	call	808ed0 <__mulsi3>
  80857c:	a00b883a 	mov	r5,r20
  808580:	8809883a 	mov	r4,r17
  808584:	1039883a 	mov	fp,r2
  808588:	0808ed00 	call	808ed0 <__mulsi3>
  80858c:	8809883a 	mov	r4,r17
  808590:	a80b883a 	mov	r5,r21
  808594:	1029883a 	mov	r20,r2
  808598:	0808ed00 	call	808ed0 <__mulsi3>
  80859c:	a80b883a 	mov	r5,r21
  8085a0:	b009883a 	mov	r4,r22
  8085a4:	1023883a 	mov	r17,r2
  8085a8:	0808ed00 	call	808ed0 <__mulsi3>
  8085ac:	e006d43a 	srli	r3,fp,16
  8085b0:	1505883a 	add	r2,r2,r20
  8085b4:	1887883a 	add	r3,r3,r2
  8085b8:	1d00022e 	bgeu	r3,r20,8085c4 <__udivdi3+0x468>
  8085bc:	00800074 	movhi	r2,1
  8085c0:	88a3883a 	add	r17,r17,r2
  8085c4:	1804d43a 	srli	r2,r3,16
  8085c8:	1463883a 	add	r17,r2,r17
  8085cc:	84404436 	bltu	r16,r17,8086e0 <__udivdi3+0x584>
  8085d0:	84403e26 	beq	r16,r17,8086cc <__udivdi3+0x570>
  8085d4:	9005883a 	mov	r2,r18
  8085d8:	0007883a 	mov	r3,zero
  8085dc:	003f9106 	br	808424 <__alt_data_end+0xff808424>
  8085e0:	88e2983a 	sll	r17,r17,r3
  8085e4:	80aed83a 	srl	r23,r16,r2
  8085e8:	80e0983a 	sll	r16,r16,r3
  8085ec:	882ad43a 	srli	r21,r17,16
  8085f0:	9884d83a 	srl	r2,r19,r2
  8085f4:	b809883a 	mov	r4,r23
  8085f8:	a80b883a 	mov	r5,r21
  8085fc:	98e4983a 	sll	r18,r19,r3
  808600:	142cb03a 	or	r22,r2,r16
  808604:	0808e780 	call	808e78 <__umodsi3>
  808608:	b809883a 	mov	r4,r23
  80860c:	a80b883a 	mov	r5,r21
  808610:	1027883a 	mov	r19,r2
  808614:	8d3fffcc 	andi	r20,r17,65535
  808618:	0808e140 	call	808e14 <__udivsi3>
  80861c:	a009883a 	mov	r4,r20
  808620:	100b883a 	mov	r5,r2
  808624:	102f883a 	mov	r23,r2
  808628:	0808ed00 	call	808ed0 <__mulsi3>
  80862c:	9826943a 	slli	r19,r19,16
  808630:	b008d43a 	srli	r4,r22,16
  808634:	24c8b03a 	or	r4,r4,r19
  808638:	2080062e 	bgeu	r4,r2,808654 <__udivdi3+0x4f8>
  80863c:	2449883a 	add	r4,r4,r17
  808640:	b8ffffc4 	addi	r3,r23,-1
  808644:	24403c36 	bltu	r4,r17,808738 <__udivdi3+0x5dc>
  808648:	20803b2e 	bgeu	r4,r2,808738 <__udivdi3+0x5dc>
  80864c:	bdffff84 	addi	r23,r23,-2
  808650:	2449883a 	add	r4,r4,r17
  808654:	20a1c83a 	sub	r16,r4,r2
  808658:	a80b883a 	mov	r5,r21
  80865c:	8009883a 	mov	r4,r16
  808660:	0808e780 	call	808e78 <__umodsi3>
  808664:	a80b883a 	mov	r5,r21
  808668:	8009883a 	mov	r4,r16
  80866c:	1027883a 	mov	r19,r2
  808670:	0808e140 	call	808e14 <__udivsi3>
  808674:	a009883a 	mov	r4,r20
  808678:	100b883a 	mov	r5,r2
  80867c:	9826943a 	slli	r19,r19,16
  808680:	1039883a 	mov	fp,r2
  808684:	0808ed00 	call	808ed0 <__mulsi3>
  808688:	b13fffcc 	andi	r4,r22,65535
  80868c:	24c8b03a 	or	r4,r4,r19
  808690:	2080062e 	bgeu	r4,r2,8086ac <__udivdi3+0x550>
  808694:	2449883a 	add	r4,r4,r17
  808698:	e0ffffc4 	addi	r3,fp,-1
  80869c:	24402436 	bltu	r4,r17,808730 <__udivdi3+0x5d4>
  8086a0:	2080232e 	bgeu	r4,r2,808730 <__udivdi3+0x5d4>
  8086a4:	e73fff84 	addi	fp,fp,-2
  8086a8:	2449883a 	add	r4,r4,r17
  8086ac:	b82e943a 	slli	r23,r23,16
  8086b0:	20a1c83a 	sub	r16,r4,r2
  8086b4:	bf06b03a 	or	r3,r23,fp
  8086b8:	003f2806 	br	80835c <__alt_data_end+0xff80835c>
  8086bc:	2021883a 	mov	r16,r4
  8086c0:	003f5306 	br	808410 <__alt_data_end+0xff808410>
  8086c4:	1821883a 	mov	r16,r3
  8086c8:	003ef406 	br	80829c <__alt_data_end+0xff80829c>
  8086cc:	1806943a 	slli	r3,r3,16
  8086d0:	9de6983a 	sll	r19,r19,r23
  8086d4:	e73fffcc 	andi	fp,fp,65535
  8086d8:	1f07883a 	add	r3,r3,fp
  8086dc:	98ffbd2e 	bgeu	r19,r3,8085d4 <__alt_data_end+0xff8085d4>
  8086e0:	90bfffc4 	addi	r2,r18,-1
  8086e4:	0007883a 	mov	r3,zero
  8086e8:	003f4e06 	br	808424 <__alt_data_end+0xff808424>
  8086ec:	00800604 	movi	r2,24
  8086f0:	003ef506 	br	8082c8 <__alt_data_end+0xff8082c8>
  8086f4:	00800604 	movi	r2,24
  8086f8:	003f0b06 	br	808328 <__alt_data_end+0xff808328>
  8086fc:	00800604 	movi	r2,24
  808700:	003ead06 	br	8081b8 <__alt_data_end+0xff8081b8>
  808704:	0007883a 	mov	r3,zero
  808708:	00800044 	movi	r2,1
  80870c:	003f4506 	br	808424 <__alt_data_end+0xff808424>
  808710:	80bf8e2e 	bgeu	r16,r2,80854c <__alt_data_end+0xff80854c>
  808714:	8c7fff84 	addi	r17,r17,-2
  808718:	8721883a 	add	r16,r16,fp
  80871c:	003f8c06 	br	808550 <__alt_data_end+0xff808550>
  808720:	18bf762e 	bgeu	r3,r2,8084fc <__alt_data_end+0xff8084fc>
  808724:	ad7fff84 	addi	r21,r21,-2
  808728:	1f07883a 	add	r3,r3,fp
  80872c:	003f7406 	br	808500 <__alt_data_end+0xff808500>
  808730:	1839883a 	mov	fp,r3
  808734:	003fdd06 	br	8086ac <__alt_data_end+0xff8086ac>
  808738:	182f883a 	mov	r23,r3
  80873c:	003fc506 	br	808654 <__alt_data_end+0xff808654>
  808740:	b5bfff84 	addi	r22,r22,-2
  808744:	3c4f883a 	add	r7,r7,r17
  808748:	003f1a06 	br	8083b4 <__alt_data_end+0xff8083b4>
  80874c:	b5bfff84 	addi	r22,r22,-2
  808750:	1c47883a 	add	r3,r3,r17
  808754:	003ebc06 	br	808248 <__alt_data_end+0xff808248>

00808758 <__umoddi3>:
  808758:	defff304 	addi	sp,sp,-52
  80875c:	df000b15 	stw	fp,44(sp)
  808760:	dc400415 	stw	r17,16(sp)
  808764:	dc000315 	stw	r16,12(sp)
  808768:	dfc00c15 	stw	ra,48(sp)
  80876c:	ddc00a15 	stw	r23,40(sp)
  808770:	dd800915 	stw	r22,36(sp)
  808774:	dd400815 	stw	r21,32(sp)
  808778:	dd000715 	stw	r20,28(sp)
  80877c:	dcc00615 	stw	r19,24(sp)
  808780:	dc800515 	stw	r18,20(sp)
  808784:	2021883a 	mov	r16,r4
  808788:	2823883a 	mov	r17,r5
  80878c:	2839883a 	mov	fp,r5
  808790:	3800401e 	bne	r7,zero,808894 <__umoddi3+0x13c>
  808794:	3027883a 	mov	r19,r6
  808798:	2029883a 	mov	r20,r4
  80879c:	2980552e 	bgeu	r5,r6,8088f4 <__umoddi3+0x19c>
  8087a0:	00bfffd4 	movui	r2,65535
  8087a4:	1180a236 	bltu	r2,r6,808a30 <__umoddi3+0x2d8>
  8087a8:	01003fc4 	movi	r4,255
  8087ac:	2189803a 	cmpltu	r4,r4,r6
  8087b0:	200890fa 	slli	r4,r4,3
  8087b4:	3104d83a 	srl	r2,r6,r4
  8087b8:	00c02074 	movhi	r3,129
  8087bc:	18feac04 	addi	r3,r3,-1360
  8087c0:	1885883a 	add	r2,r3,r2
  8087c4:	10c00003 	ldbu	r3,0(r2)
  8087c8:	00800804 	movi	r2,32
  8087cc:	1909883a 	add	r4,r3,r4
  8087d0:	1125c83a 	sub	r18,r2,r4
  8087d4:	90000526 	beq	r18,zero,8087ec <__umoddi3+0x94>
  8087d8:	8ca2983a 	sll	r17,r17,r18
  8087dc:	8108d83a 	srl	r4,r16,r4
  8087e0:	34a6983a 	sll	r19,r6,r18
  8087e4:	84a8983a 	sll	r20,r16,r18
  8087e8:	2478b03a 	or	fp,r4,r17
  8087ec:	982cd43a 	srli	r22,r19,16
  8087f0:	e009883a 	mov	r4,fp
  8087f4:	9dffffcc 	andi	r23,r19,65535
  8087f8:	b00b883a 	mov	r5,r22
  8087fc:	0808e780 	call	808e78 <__umodsi3>
  808800:	b00b883a 	mov	r5,r22
  808804:	e009883a 	mov	r4,fp
  808808:	102b883a 	mov	r21,r2
  80880c:	0808e140 	call	808e14 <__udivsi3>
  808810:	100b883a 	mov	r5,r2
  808814:	b809883a 	mov	r4,r23
  808818:	0808ed00 	call	808ed0 <__mulsi3>
  80881c:	a82a943a 	slli	r21,r21,16
  808820:	a006d43a 	srli	r3,r20,16
  808824:	1d46b03a 	or	r3,r3,r21
  808828:	1880032e 	bgeu	r3,r2,808838 <__umoddi3+0xe0>
  80882c:	1cc7883a 	add	r3,r3,r19
  808830:	1cc00136 	bltu	r3,r19,808838 <__umoddi3+0xe0>
  808834:	18813136 	bltu	r3,r2,808cfc <__umoddi3+0x5a4>
  808838:	18a1c83a 	sub	r16,r3,r2
  80883c:	b00b883a 	mov	r5,r22
  808840:	8009883a 	mov	r4,r16
  808844:	0808e780 	call	808e78 <__umodsi3>
  808848:	b00b883a 	mov	r5,r22
  80884c:	8009883a 	mov	r4,r16
  808850:	1023883a 	mov	r17,r2
  808854:	0808e140 	call	808e14 <__udivsi3>
  808858:	100b883a 	mov	r5,r2
  80885c:	b809883a 	mov	r4,r23
  808860:	8822943a 	slli	r17,r17,16
  808864:	0808ed00 	call	808ed0 <__mulsi3>
  808868:	a0ffffcc 	andi	r3,r20,65535
  80886c:	1c46b03a 	or	r3,r3,r17
  808870:	1880042e 	bgeu	r3,r2,808884 <__umoddi3+0x12c>
  808874:	1cc7883a 	add	r3,r3,r19
  808878:	1cc00236 	bltu	r3,r19,808884 <__umoddi3+0x12c>
  80887c:	1880012e 	bgeu	r3,r2,808884 <__umoddi3+0x12c>
  808880:	1cc7883a 	add	r3,r3,r19
  808884:	1885c83a 	sub	r2,r3,r2
  808888:	1484d83a 	srl	r2,r2,r18
  80888c:	0007883a 	mov	r3,zero
  808890:	00005306 	br	8089e0 <__umoddi3+0x288>
  808894:	29c05036 	bltu	r5,r7,8089d8 <__umoddi3+0x280>
  808898:	00bfffd4 	movui	r2,65535
  80889c:	11c05c2e 	bgeu	r2,r7,808a10 <__umoddi3+0x2b8>
  8088a0:	00804034 	movhi	r2,256
  8088a4:	10bfffc4 	addi	r2,r2,-1
  8088a8:	11c10636 	bltu	r2,r7,808cc4 <__umoddi3+0x56c>
  8088ac:	01000404 	movi	r4,16
  8088b0:	3904d83a 	srl	r2,r7,r4
  8088b4:	00c02074 	movhi	r3,129
  8088b8:	18feac04 	addi	r3,r3,-1360
  8088bc:	1885883a 	add	r2,r3,r2
  8088c0:	14c00003 	ldbu	r19,0(r2)
  8088c4:	00c00804 	movi	r3,32
  8088c8:	9927883a 	add	r19,r19,r4
  8088cc:	1ce9c83a 	sub	r20,r3,r19
  8088d0:	a0005c1e 	bne	r20,zero,808a44 <__umoddi3+0x2ec>
  8088d4:	3c400136 	bltu	r7,r17,8088dc <__umoddi3+0x184>
  8088d8:	81810a36 	bltu	r16,r6,808d04 <__umoddi3+0x5ac>
  8088dc:	8185c83a 	sub	r2,r16,r6
  8088e0:	89e3c83a 	sub	r17,r17,r7
  8088e4:	8089803a 	cmpltu	r4,r16,r2
  8088e8:	8939c83a 	sub	fp,r17,r4
  8088ec:	e007883a 	mov	r3,fp
  8088f0:	00003b06 	br	8089e0 <__umoddi3+0x288>
  8088f4:	3000041e 	bne	r6,zero,808908 <__umoddi3+0x1b0>
  8088f8:	000b883a 	mov	r5,zero
  8088fc:	01000044 	movi	r4,1
  808900:	0808e140 	call	808e14 <__udivsi3>
  808904:	1027883a 	mov	r19,r2
  808908:	00bfffd4 	movui	r2,65535
  80890c:	14c0442e 	bgeu	r2,r19,808a20 <__umoddi3+0x2c8>
  808910:	00804034 	movhi	r2,256
  808914:	10bfffc4 	addi	r2,r2,-1
  808918:	14c0ec36 	bltu	r2,r19,808ccc <__umoddi3+0x574>
  80891c:	00800404 	movi	r2,16
  808920:	9886d83a 	srl	r3,r19,r2
  808924:	01002074 	movhi	r4,129
  808928:	213eac04 	addi	r4,r4,-1360
  80892c:	20c7883a 	add	r3,r4,r3
  808930:	18c00003 	ldbu	r3,0(r3)
  808934:	1887883a 	add	r3,r3,r2
  808938:	00800804 	movi	r2,32
  80893c:	10e5c83a 	sub	r18,r2,r3
  808940:	9000ab1e 	bne	r18,zero,808bf0 <__umoddi3+0x498>
  808944:	982cd43a 	srli	r22,r19,16
  808948:	8ce3c83a 	sub	r17,r17,r19
  80894c:	9dffffcc 	andi	r23,r19,65535
  808950:	b00b883a 	mov	r5,r22
  808954:	8809883a 	mov	r4,r17
  808958:	0808e780 	call	808e78 <__umodsi3>
  80895c:	b00b883a 	mov	r5,r22
  808960:	8809883a 	mov	r4,r17
  808964:	102b883a 	mov	r21,r2
  808968:	0808e140 	call	808e14 <__udivsi3>
  80896c:	b80b883a 	mov	r5,r23
  808970:	1009883a 	mov	r4,r2
  808974:	0808ed00 	call	808ed0 <__mulsi3>
  808978:	a82a943a 	slli	r21,r21,16
  80897c:	a006d43a 	srli	r3,r20,16
  808980:	1d46b03a 	or	r3,r3,r21
  808984:	1880042e 	bgeu	r3,r2,808998 <__umoddi3+0x240>
  808988:	1cc7883a 	add	r3,r3,r19
  80898c:	1cc00236 	bltu	r3,r19,808998 <__umoddi3+0x240>
  808990:	1880012e 	bgeu	r3,r2,808998 <__umoddi3+0x240>
  808994:	1cc7883a 	add	r3,r3,r19
  808998:	18a1c83a 	sub	r16,r3,r2
  80899c:	b00b883a 	mov	r5,r22
  8089a0:	8009883a 	mov	r4,r16
  8089a4:	0808e780 	call	808e78 <__umodsi3>
  8089a8:	1023883a 	mov	r17,r2
  8089ac:	b00b883a 	mov	r5,r22
  8089b0:	8009883a 	mov	r4,r16
  8089b4:	0808e140 	call	808e14 <__udivsi3>
  8089b8:	8822943a 	slli	r17,r17,16
  8089bc:	b80b883a 	mov	r5,r23
  8089c0:	1009883a 	mov	r4,r2
  8089c4:	0808ed00 	call	808ed0 <__mulsi3>
  8089c8:	a53fffcc 	andi	r20,r20,65535
  8089cc:	a446b03a 	or	r3,r20,r17
  8089d0:	18bfac2e 	bgeu	r3,r2,808884 <__alt_data_end+0xff808884>
  8089d4:	003fa706 	br	808874 <__alt_data_end+0xff808874>
  8089d8:	2005883a 	mov	r2,r4
  8089dc:	2807883a 	mov	r3,r5
  8089e0:	dfc00c17 	ldw	ra,48(sp)
  8089e4:	df000b17 	ldw	fp,44(sp)
  8089e8:	ddc00a17 	ldw	r23,40(sp)
  8089ec:	dd800917 	ldw	r22,36(sp)
  8089f0:	dd400817 	ldw	r21,32(sp)
  8089f4:	dd000717 	ldw	r20,28(sp)
  8089f8:	dcc00617 	ldw	r19,24(sp)
  8089fc:	dc800517 	ldw	r18,20(sp)
  808a00:	dc400417 	ldw	r17,16(sp)
  808a04:	dc000317 	ldw	r16,12(sp)
  808a08:	dec00d04 	addi	sp,sp,52
  808a0c:	f800283a 	ret
  808a10:	04c03fc4 	movi	r19,255
  808a14:	99c9803a 	cmpltu	r4,r19,r7
  808a18:	200890fa 	slli	r4,r4,3
  808a1c:	003fa406 	br	8088b0 <__alt_data_end+0xff8088b0>
  808a20:	00803fc4 	movi	r2,255
  808a24:	14c5803a 	cmpltu	r2,r2,r19
  808a28:	100490fa 	slli	r2,r2,3
  808a2c:	003fbc06 	br	808920 <__alt_data_end+0xff808920>
  808a30:	00804034 	movhi	r2,256
  808a34:	10bfffc4 	addi	r2,r2,-1
  808a38:	1180a636 	bltu	r2,r6,808cd4 <__umoddi3+0x57c>
  808a3c:	01000404 	movi	r4,16
  808a40:	003f5c06 	br	8087b4 <__alt_data_end+0xff8087b4>
  808a44:	3d0e983a 	sll	r7,r7,r20
  808a48:	34ead83a 	srl	r21,r6,r19
  808a4c:	8cc6d83a 	srl	r3,r17,r19
  808a50:	8d10983a 	sll	r8,r17,r20
  808a54:	3d6ab03a 	or	r21,r7,r21
  808a58:	a82cd43a 	srli	r22,r21,16
  808a5c:	84e2d83a 	srl	r17,r16,r19
  808a60:	1809883a 	mov	r4,r3
  808a64:	b00b883a 	mov	r5,r22
  808a68:	8a22b03a 	or	r17,r17,r8
  808a6c:	3524983a 	sll	r18,r6,r20
  808a70:	dc400015 	stw	r17,0(sp)
  808a74:	d8c00115 	stw	r3,4(sp)
  808a78:	0808e780 	call	808e78 <__umodsi3>
  808a7c:	d8c00117 	ldw	r3,4(sp)
  808a80:	b00b883a 	mov	r5,r22
  808a84:	1039883a 	mov	fp,r2
  808a88:	1809883a 	mov	r4,r3
  808a8c:	0808e140 	call	808e14 <__udivsi3>
  808a90:	adffffcc 	andi	r23,r21,65535
  808a94:	100b883a 	mov	r5,r2
  808a98:	b809883a 	mov	r4,r23
  808a9c:	1023883a 	mov	r17,r2
  808aa0:	0808ed00 	call	808ed0 <__mulsi3>
  808aa4:	d9400017 	ldw	r5,0(sp)
  808aa8:	e008943a 	slli	r4,fp,16
  808aac:	8520983a 	sll	r16,r16,r20
  808ab0:	2806d43a 	srli	r3,r5,16
  808ab4:	1906b03a 	or	r3,r3,r4
  808ab8:	1880042e 	bgeu	r3,r2,808acc <__umoddi3+0x374>
  808abc:	1d47883a 	add	r3,r3,r21
  808ac0:	893fffc4 	addi	r4,r17,-1
  808ac4:	1d40892e 	bgeu	r3,r21,808cec <__umoddi3+0x594>
  808ac8:	2023883a 	mov	r17,r4
  808acc:	18b9c83a 	sub	fp,r3,r2
  808ad0:	b00b883a 	mov	r5,r22
  808ad4:	e009883a 	mov	r4,fp
  808ad8:	0808e780 	call	808e78 <__umodsi3>
  808adc:	b00b883a 	mov	r5,r22
  808ae0:	e009883a 	mov	r4,fp
  808ae4:	d8800215 	stw	r2,8(sp)
  808ae8:	0808e140 	call	808e14 <__udivsi3>
  808aec:	100b883a 	mov	r5,r2
  808af0:	b809883a 	mov	r4,r23
  808af4:	102d883a 	mov	r22,r2
  808af8:	0808ed00 	call	808ed0 <__mulsi3>
  808afc:	d9800217 	ldw	r6,8(sp)
  808b00:	d8c00017 	ldw	r3,0(sp)
  808b04:	300c943a 	slli	r6,r6,16
  808b08:	1a3fffcc 	andi	r8,r3,65535
  808b0c:	4190b03a 	or	r8,r8,r6
  808b10:	4080042e 	bgeu	r8,r2,808b24 <__umoddi3+0x3cc>
  808b14:	4551883a 	add	r8,r8,r21
  808b18:	b0ffffc4 	addi	r3,r22,-1
  808b1c:	45406f2e 	bgeu	r8,r21,808cdc <__umoddi3+0x584>
  808b20:	182d883a 	mov	r22,r3
  808b24:	880e943a 	slli	r7,r17,16
  808b28:	9006d43a 	srli	r3,r18,16
  808b2c:	91bfffcc 	andi	r6,r18,65535
  808b30:	3dacb03a 	or	r22,r7,r22
  808b34:	b02ed43a 	srli	r23,r22,16
  808b38:	b5bfffcc 	andi	r22,r22,65535
  808b3c:	300b883a 	mov	r5,r6
  808b40:	b009883a 	mov	r4,r22
  808b44:	40a3c83a 	sub	r17,r8,r2
  808b48:	d8c00115 	stw	r3,4(sp)
  808b4c:	d9800215 	stw	r6,8(sp)
  808b50:	0808ed00 	call	808ed0 <__mulsi3>
  808b54:	d9800217 	ldw	r6,8(sp)
  808b58:	b809883a 	mov	r4,r23
  808b5c:	1039883a 	mov	fp,r2
  808b60:	300b883a 	mov	r5,r6
  808b64:	0808ed00 	call	808ed0 <__mulsi3>
  808b68:	d8c00117 	ldw	r3,4(sp)
  808b6c:	b809883a 	mov	r4,r23
  808b70:	d8800215 	stw	r2,8(sp)
  808b74:	180b883a 	mov	r5,r3
  808b78:	0808ed00 	call	808ed0 <__mulsi3>
  808b7c:	d8c00117 	ldw	r3,4(sp)
  808b80:	b009883a 	mov	r4,r22
  808b84:	102f883a 	mov	r23,r2
  808b88:	180b883a 	mov	r5,r3
  808b8c:	0808ed00 	call	808ed0 <__mulsi3>
  808b90:	d9800217 	ldw	r6,8(sp)
  808b94:	e006d43a 	srli	r3,fp,16
  808b98:	1185883a 	add	r2,r2,r6
  808b9c:	1885883a 	add	r2,r3,r2
  808ba0:	1180022e 	bgeu	r2,r6,808bac <__umoddi3+0x454>
  808ba4:	00c00074 	movhi	r3,1
  808ba8:	b8ef883a 	add	r23,r23,r3
  808bac:	1006d43a 	srli	r3,r2,16
  808bb0:	1004943a 	slli	r2,r2,16
  808bb4:	e73fffcc 	andi	fp,fp,65535
  808bb8:	1dc7883a 	add	r3,r3,r23
  808bbc:	1739883a 	add	fp,r2,fp
  808bc0:	88c03a36 	bltu	r17,r3,808cac <__umoddi3+0x554>
  808bc4:	88c05126 	beq	r17,r3,808d0c <__umoddi3+0x5b4>
  808bc8:	88c9c83a 	sub	r4,r17,r3
  808bcc:	e00f883a 	mov	r7,fp
  808bd0:	81cfc83a 	sub	r7,r16,r7
  808bd4:	81c7803a 	cmpltu	r3,r16,r7
  808bd8:	20c7c83a 	sub	r3,r4,r3
  808bdc:	1cc4983a 	sll	r2,r3,r19
  808be0:	3d0ed83a 	srl	r7,r7,r20
  808be4:	1d06d83a 	srl	r3,r3,r20
  808be8:	11c4b03a 	or	r2,r2,r7
  808bec:	003f7c06 	br	8089e0 <__alt_data_end+0xff8089e0>
  808bf0:	9ca6983a 	sll	r19,r19,r18
  808bf4:	88f8d83a 	srl	fp,r17,r3
  808bf8:	80c4d83a 	srl	r2,r16,r3
  808bfc:	982cd43a 	srli	r22,r19,16
  808c00:	8ca2983a 	sll	r17,r17,r18
  808c04:	e009883a 	mov	r4,fp
  808c08:	b00b883a 	mov	r5,r22
  808c0c:	146ab03a 	or	r21,r2,r17
  808c10:	0808e780 	call	808e78 <__umodsi3>
  808c14:	b00b883a 	mov	r5,r22
  808c18:	e009883a 	mov	r4,fp
  808c1c:	1029883a 	mov	r20,r2
  808c20:	9dffffcc 	andi	r23,r19,65535
  808c24:	0808e140 	call	808e14 <__udivsi3>
  808c28:	b809883a 	mov	r4,r23
  808c2c:	100b883a 	mov	r5,r2
  808c30:	0808ed00 	call	808ed0 <__mulsi3>
  808c34:	a008943a 	slli	r4,r20,16
  808c38:	a806d43a 	srli	r3,r21,16
  808c3c:	84a8983a 	sll	r20,r16,r18
  808c40:	1906b03a 	or	r3,r3,r4
  808c44:	1880042e 	bgeu	r3,r2,808c58 <__umoddi3+0x500>
  808c48:	1cc7883a 	add	r3,r3,r19
  808c4c:	1cc00236 	bltu	r3,r19,808c58 <__umoddi3+0x500>
  808c50:	1880012e 	bgeu	r3,r2,808c58 <__umoddi3+0x500>
  808c54:	1cc7883a 	add	r3,r3,r19
  808c58:	18a3c83a 	sub	r17,r3,r2
  808c5c:	b00b883a 	mov	r5,r22
  808c60:	8809883a 	mov	r4,r17
  808c64:	0808e780 	call	808e78 <__umodsi3>
  808c68:	b00b883a 	mov	r5,r22
  808c6c:	8809883a 	mov	r4,r17
  808c70:	1021883a 	mov	r16,r2
  808c74:	0808e140 	call	808e14 <__udivsi3>
  808c78:	100b883a 	mov	r5,r2
  808c7c:	b809883a 	mov	r4,r23
  808c80:	8020943a 	slli	r16,r16,16
  808c84:	0808ed00 	call	808ed0 <__mulsi3>
  808c88:	a8ffffcc 	andi	r3,r21,65535
  808c8c:	1c06b03a 	or	r3,r3,r16
  808c90:	1880042e 	bgeu	r3,r2,808ca4 <__umoddi3+0x54c>
  808c94:	1cc7883a 	add	r3,r3,r19
  808c98:	1cc00236 	bltu	r3,r19,808ca4 <__umoddi3+0x54c>
  808c9c:	1880012e 	bgeu	r3,r2,808ca4 <__umoddi3+0x54c>
  808ca0:	1cc7883a 	add	r3,r3,r19
  808ca4:	18a3c83a 	sub	r17,r3,r2
  808ca8:	003f2906 	br	808950 <__alt_data_end+0xff808950>
  808cac:	e48fc83a 	sub	r7,fp,r18
  808cb0:	1d49c83a 	sub	r4,r3,r21
  808cb4:	e1f9803a 	cmpltu	fp,fp,r7
  808cb8:	2739c83a 	sub	fp,r4,fp
  808cbc:	8f09c83a 	sub	r4,r17,fp
  808cc0:	003fc306 	br	808bd0 <__alt_data_end+0xff808bd0>
  808cc4:	01000604 	movi	r4,24
  808cc8:	003ef906 	br	8088b0 <__alt_data_end+0xff8088b0>
  808ccc:	00800604 	movi	r2,24
  808cd0:	003f1306 	br	808920 <__alt_data_end+0xff808920>
  808cd4:	01000604 	movi	r4,24
  808cd8:	003eb606 	br	8087b4 <__alt_data_end+0xff8087b4>
  808cdc:	40bf902e 	bgeu	r8,r2,808b20 <__alt_data_end+0xff808b20>
  808ce0:	b5bfff84 	addi	r22,r22,-2
  808ce4:	4551883a 	add	r8,r8,r21
  808ce8:	003f8e06 	br	808b24 <__alt_data_end+0xff808b24>
  808cec:	18bf762e 	bgeu	r3,r2,808ac8 <__alt_data_end+0xff808ac8>
  808cf0:	8c7fff84 	addi	r17,r17,-2
  808cf4:	1d47883a 	add	r3,r3,r21
  808cf8:	003f7406 	br	808acc <__alt_data_end+0xff808acc>
  808cfc:	1cc7883a 	add	r3,r3,r19
  808d00:	003ecd06 	br	808838 <__alt_data_end+0xff808838>
  808d04:	8005883a 	mov	r2,r16
  808d08:	003ef806 	br	8088ec <__alt_data_end+0xff8088ec>
  808d0c:	873fe736 	bltu	r16,fp,808cac <__alt_data_end+0xff808cac>
  808d10:	e00f883a 	mov	r7,fp
  808d14:	0009883a 	mov	r4,zero
  808d18:	003fad06 	br	808bd0 <__alt_data_end+0xff808bd0>

00808d1c <__divsi3>:
  808d1c:	20001b16 	blt	r4,zero,808d8c <__divsi3+0x70>
  808d20:	000f883a 	mov	r7,zero
  808d24:	28001616 	blt	r5,zero,808d80 <__divsi3+0x64>
  808d28:	200d883a 	mov	r6,r4
  808d2c:	29001a2e 	bgeu	r5,r4,808d98 <__divsi3+0x7c>
  808d30:	00800804 	movi	r2,32
  808d34:	00c00044 	movi	r3,1
  808d38:	00000106 	br	808d40 <__divsi3+0x24>
  808d3c:	10000d26 	beq	r2,zero,808d74 <__divsi3+0x58>
  808d40:	294b883a 	add	r5,r5,r5
  808d44:	10bfffc4 	addi	r2,r2,-1
  808d48:	18c7883a 	add	r3,r3,r3
  808d4c:	293ffb36 	bltu	r5,r4,808d3c <__alt_data_end+0xff808d3c>
  808d50:	0005883a 	mov	r2,zero
  808d54:	18000726 	beq	r3,zero,808d74 <__divsi3+0x58>
  808d58:	0005883a 	mov	r2,zero
  808d5c:	31400236 	bltu	r6,r5,808d68 <__divsi3+0x4c>
  808d60:	314dc83a 	sub	r6,r6,r5
  808d64:	10c4b03a 	or	r2,r2,r3
  808d68:	1806d07a 	srli	r3,r3,1
  808d6c:	280ad07a 	srli	r5,r5,1
  808d70:	183ffa1e 	bne	r3,zero,808d5c <__alt_data_end+0xff808d5c>
  808d74:	38000126 	beq	r7,zero,808d7c <__divsi3+0x60>
  808d78:	0085c83a 	sub	r2,zero,r2
  808d7c:	f800283a 	ret
  808d80:	014bc83a 	sub	r5,zero,r5
  808d84:	39c0005c 	xori	r7,r7,1
  808d88:	003fe706 	br	808d28 <__alt_data_end+0xff808d28>
  808d8c:	0109c83a 	sub	r4,zero,r4
  808d90:	01c00044 	movi	r7,1
  808d94:	003fe306 	br	808d24 <__alt_data_end+0xff808d24>
  808d98:	00c00044 	movi	r3,1
  808d9c:	003fee06 	br	808d58 <__alt_data_end+0xff808d58>

00808da0 <__modsi3>:
  808da0:	20001716 	blt	r4,zero,808e00 <__modsi3+0x60>
  808da4:	000f883a 	mov	r7,zero
  808da8:	2005883a 	mov	r2,r4
  808dac:	28001216 	blt	r5,zero,808df8 <__modsi3+0x58>
  808db0:	2900162e 	bgeu	r5,r4,808e0c <__modsi3+0x6c>
  808db4:	01800804 	movi	r6,32
  808db8:	00c00044 	movi	r3,1
  808dbc:	00000106 	br	808dc4 <__modsi3+0x24>
  808dc0:	30000a26 	beq	r6,zero,808dec <__modsi3+0x4c>
  808dc4:	294b883a 	add	r5,r5,r5
  808dc8:	31bfffc4 	addi	r6,r6,-1
  808dcc:	18c7883a 	add	r3,r3,r3
  808dd0:	293ffb36 	bltu	r5,r4,808dc0 <__alt_data_end+0xff808dc0>
  808dd4:	18000526 	beq	r3,zero,808dec <__modsi3+0x4c>
  808dd8:	1806d07a 	srli	r3,r3,1
  808ddc:	11400136 	bltu	r2,r5,808de4 <__modsi3+0x44>
  808de0:	1145c83a 	sub	r2,r2,r5
  808de4:	280ad07a 	srli	r5,r5,1
  808de8:	183ffb1e 	bne	r3,zero,808dd8 <__alt_data_end+0xff808dd8>
  808dec:	38000126 	beq	r7,zero,808df4 <__modsi3+0x54>
  808df0:	0085c83a 	sub	r2,zero,r2
  808df4:	f800283a 	ret
  808df8:	014bc83a 	sub	r5,zero,r5
  808dfc:	003fec06 	br	808db0 <__alt_data_end+0xff808db0>
  808e00:	0109c83a 	sub	r4,zero,r4
  808e04:	01c00044 	movi	r7,1
  808e08:	003fe706 	br	808da8 <__alt_data_end+0xff808da8>
  808e0c:	00c00044 	movi	r3,1
  808e10:	003ff106 	br	808dd8 <__alt_data_end+0xff808dd8>

00808e14 <__udivsi3>:
  808e14:	200d883a 	mov	r6,r4
  808e18:	2900152e 	bgeu	r5,r4,808e70 <__udivsi3+0x5c>
  808e1c:	28001416 	blt	r5,zero,808e70 <__udivsi3+0x5c>
  808e20:	00800804 	movi	r2,32
  808e24:	00c00044 	movi	r3,1
  808e28:	00000206 	br	808e34 <__udivsi3+0x20>
  808e2c:	10000e26 	beq	r2,zero,808e68 <__udivsi3+0x54>
  808e30:	28000516 	blt	r5,zero,808e48 <__udivsi3+0x34>
  808e34:	294b883a 	add	r5,r5,r5
  808e38:	10bfffc4 	addi	r2,r2,-1
  808e3c:	18c7883a 	add	r3,r3,r3
  808e40:	293ffa36 	bltu	r5,r4,808e2c <__alt_data_end+0xff808e2c>
  808e44:	18000826 	beq	r3,zero,808e68 <__udivsi3+0x54>
  808e48:	0005883a 	mov	r2,zero
  808e4c:	31400236 	bltu	r6,r5,808e58 <__udivsi3+0x44>
  808e50:	314dc83a 	sub	r6,r6,r5
  808e54:	10c4b03a 	or	r2,r2,r3
  808e58:	1806d07a 	srli	r3,r3,1
  808e5c:	280ad07a 	srli	r5,r5,1
  808e60:	183ffa1e 	bne	r3,zero,808e4c <__alt_data_end+0xff808e4c>
  808e64:	f800283a 	ret
  808e68:	0005883a 	mov	r2,zero
  808e6c:	f800283a 	ret
  808e70:	00c00044 	movi	r3,1
  808e74:	003ff406 	br	808e48 <__alt_data_end+0xff808e48>

00808e78 <__umodsi3>:
  808e78:	2005883a 	mov	r2,r4
  808e7c:	2900122e 	bgeu	r5,r4,808ec8 <__umodsi3+0x50>
  808e80:	28001116 	blt	r5,zero,808ec8 <__umodsi3+0x50>
  808e84:	01800804 	movi	r6,32
  808e88:	00c00044 	movi	r3,1
  808e8c:	00000206 	br	808e98 <__umodsi3+0x20>
  808e90:	30000c26 	beq	r6,zero,808ec4 <__umodsi3+0x4c>
  808e94:	28000516 	blt	r5,zero,808eac <__umodsi3+0x34>
  808e98:	294b883a 	add	r5,r5,r5
  808e9c:	31bfffc4 	addi	r6,r6,-1
  808ea0:	18c7883a 	add	r3,r3,r3
  808ea4:	293ffa36 	bltu	r5,r4,808e90 <__alt_data_end+0xff808e90>
  808ea8:	18000626 	beq	r3,zero,808ec4 <__umodsi3+0x4c>
  808eac:	1806d07a 	srli	r3,r3,1
  808eb0:	11400136 	bltu	r2,r5,808eb8 <__umodsi3+0x40>
  808eb4:	1145c83a 	sub	r2,r2,r5
  808eb8:	280ad07a 	srli	r5,r5,1
  808ebc:	183ffb1e 	bne	r3,zero,808eac <__alt_data_end+0xff808eac>
  808ec0:	f800283a 	ret
  808ec4:	f800283a 	ret
  808ec8:	00c00044 	movi	r3,1
  808ecc:	003ff706 	br	808eac <__alt_data_end+0xff808eac>

00808ed0 <__mulsi3>:
  808ed0:	0005883a 	mov	r2,zero
  808ed4:	20000726 	beq	r4,zero,808ef4 <__mulsi3+0x24>
  808ed8:	20c0004c 	andi	r3,r4,1
  808edc:	2008d07a 	srli	r4,r4,1
  808ee0:	18000126 	beq	r3,zero,808ee8 <__mulsi3+0x18>
  808ee4:	1145883a 	add	r2,r2,r5
  808ee8:	294b883a 	add	r5,r5,r5
  808eec:	203ffa1e 	bne	r4,zero,808ed8 <__alt_data_end+0xff808ed8>
  808ef0:	f800283a 	ret
  808ef4:	f800283a 	ret

00808ef8 <__adddf3>:
  808ef8:	02c00434 	movhi	r11,16
  808efc:	5affffc4 	addi	r11,r11,-1
  808f00:	2806d7fa 	srli	r3,r5,31
  808f04:	2ad4703a 	and	r10,r5,r11
  808f08:	3ad2703a 	and	r9,r7,r11
  808f0c:	3804d53a 	srli	r2,r7,20
  808f10:	3018d77a 	srli	r12,r6,29
  808f14:	280ad53a 	srli	r5,r5,20
  808f18:	501490fa 	slli	r10,r10,3
  808f1c:	2010d77a 	srli	r8,r4,29
  808f20:	481290fa 	slli	r9,r9,3
  808f24:	380ed7fa 	srli	r7,r7,31
  808f28:	defffb04 	addi	sp,sp,-20
  808f2c:	dc800215 	stw	r18,8(sp)
  808f30:	dc400115 	stw	r17,4(sp)
  808f34:	dc000015 	stw	r16,0(sp)
  808f38:	dfc00415 	stw	ra,16(sp)
  808f3c:	dcc00315 	stw	r19,12(sp)
  808f40:	1c803fcc 	andi	r18,r3,255
  808f44:	2c01ffcc 	andi	r16,r5,2047
  808f48:	5210b03a 	or	r8,r10,r8
  808f4c:	202290fa 	slli	r17,r4,3
  808f50:	1081ffcc 	andi	r2,r2,2047
  808f54:	4b12b03a 	or	r9,r9,r12
  808f58:	300c90fa 	slli	r6,r6,3
  808f5c:	91c07526 	beq	r18,r7,809134 <__adddf3+0x23c>
  808f60:	8087c83a 	sub	r3,r16,r2
  808f64:	00c0ab0e 	bge	zero,r3,809214 <__adddf3+0x31c>
  808f68:	10002a1e 	bne	r2,zero,809014 <__adddf3+0x11c>
  808f6c:	4984b03a 	or	r2,r9,r6
  808f70:	1000961e 	bne	r2,zero,8091cc <__adddf3+0x2d4>
  808f74:	888001cc 	andi	r2,r17,7
  808f78:	10000726 	beq	r2,zero,808f98 <__adddf3+0xa0>
  808f7c:	888003cc 	andi	r2,r17,15
  808f80:	00c00104 	movi	r3,4
  808f84:	10c00426 	beq	r2,r3,808f98 <__adddf3+0xa0>
  808f88:	88c7883a 	add	r3,r17,r3
  808f8c:	1c63803a 	cmpltu	r17,r3,r17
  808f90:	4451883a 	add	r8,r8,r17
  808f94:	1823883a 	mov	r17,r3
  808f98:	4080202c 	andhi	r2,r8,128
  808f9c:	10005926 	beq	r2,zero,809104 <__adddf3+0x20c>
  808fa0:	84000044 	addi	r16,r16,1
  808fa4:	0081ffc4 	movi	r2,2047
  808fa8:	8080ba26 	beq	r16,r2,809294 <__adddf3+0x39c>
  808fac:	00bfe034 	movhi	r2,65408
  808fb0:	10bfffc4 	addi	r2,r2,-1
  808fb4:	4090703a 	and	r8,r8,r2
  808fb8:	4004977a 	slli	r2,r8,29
  808fbc:	4010927a 	slli	r8,r8,9
  808fc0:	8822d0fa 	srli	r17,r17,3
  808fc4:	8401ffcc 	andi	r16,r16,2047
  808fc8:	4010d33a 	srli	r8,r8,12
  808fcc:	9007883a 	mov	r3,r18
  808fd0:	1444b03a 	or	r2,r2,r17
  808fd4:	8401ffcc 	andi	r16,r16,2047
  808fd8:	8020953a 	slli	r16,r16,20
  808fdc:	18c03fcc 	andi	r3,r3,255
  808fe0:	01000434 	movhi	r4,16
  808fe4:	213fffc4 	addi	r4,r4,-1
  808fe8:	180697fa 	slli	r3,r3,31
  808fec:	4110703a 	and	r8,r8,r4
  808ff0:	4410b03a 	or	r8,r8,r16
  808ff4:	40c6b03a 	or	r3,r8,r3
  808ff8:	dfc00417 	ldw	ra,16(sp)
  808ffc:	dcc00317 	ldw	r19,12(sp)
  809000:	dc800217 	ldw	r18,8(sp)
  809004:	dc400117 	ldw	r17,4(sp)
  809008:	dc000017 	ldw	r16,0(sp)
  80900c:	dec00504 	addi	sp,sp,20
  809010:	f800283a 	ret
  809014:	0081ffc4 	movi	r2,2047
  809018:	80bfd626 	beq	r16,r2,808f74 <__alt_data_end+0xff808f74>
  80901c:	4a402034 	orhi	r9,r9,128
  809020:	00800e04 	movi	r2,56
  809024:	10c09f16 	blt	r2,r3,8092a4 <__adddf3+0x3ac>
  809028:	008007c4 	movi	r2,31
  80902c:	10c0c216 	blt	r2,r3,809338 <__adddf3+0x440>
  809030:	00800804 	movi	r2,32
  809034:	10c5c83a 	sub	r2,r2,r3
  809038:	488a983a 	sll	r5,r9,r2
  80903c:	30c8d83a 	srl	r4,r6,r3
  809040:	3084983a 	sll	r2,r6,r2
  809044:	48c6d83a 	srl	r3,r9,r3
  809048:	290cb03a 	or	r6,r5,r4
  80904c:	1004c03a 	cmpne	r2,r2,zero
  809050:	308cb03a 	or	r6,r6,r2
  809054:	898dc83a 	sub	r6,r17,r6
  809058:	89a3803a 	cmpltu	r17,r17,r6
  80905c:	40d1c83a 	sub	r8,r8,r3
  809060:	4451c83a 	sub	r8,r8,r17
  809064:	3023883a 	mov	r17,r6
  809068:	4080202c 	andhi	r2,r8,128
  80906c:	10002326 	beq	r2,zero,8090fc <__adddf3+0x204>
  809070:	04c02034 	movhi	r19,128
  809074:	9cffffc4 	addi	r19,r19,-1
  809078:	44e6703a 	and	r19,r8,r19
  80907c:	98007626 	beq	r19,zero,809258 <__adddf3+0x360>
  809080:	9809883a 	mov	r4,r19
  809084:	080b7380 	call	80b738 <__clzsi2>
  809088:	10fffe04 	addi	r3,r2,-8
  80908c:	010007c4 	movi	r4,31
  809090:	20c07716 	blt	r4,r3,809270 <__adddf3+0x378>
  809094:	00800804 	movi	r2,32
  809098:	10c5c83a 	sub	r2,r2,r3
  80909c:	8884d83a 	srl	r2,r17,r2
  8090a0:	98d0983a 	sll	r8,r19,r3
  8090a4:	88e2983a 	sll	r17,r17,r3
  8090a8:	1204b03a 	or	r2,r2,r8
  8090ac:	1c007416 	blt	r3,r16,809280 <__adddf3+0x388>
  8090b0:	1c21c83a 	sub	r16,r3,r16
  8090b4:	82000044 	addi	r8,r16,1
  8090b8:	00c007c4 	movi	r3,31
  8090bc:	1a009116 	blt	r3,r8,809304 <__adddf3+0x40c>
  8090c0:	00c00804 	movi	r3,32
  8090c4:	1a07c83a 	sub	r3,r3,r8
  8090c8:	8a08d83a 	srl	r4,r17,r8
  8090cc:	88e2983a 	sll	r17,r17,r3
  8090d0:	10c6983a 	sll	r3,r2,r3
  8090d4:	1210d83a 	srl	r8,r2,r8
  8090d8:	8804c03a 	cmpne	r2,r17,zero
  8090dc:	1906b03a 	or	r3,r3,r4
  8090e0:	18a2b03a 	or	r17,r3,r2
  8090e4:	0021883a 	mov	r16,zero
  8090e8:	003fa206 	br	808f74 <__alt_data_end+0xff808f74>
  8090ec:	1890b03a 	or	r8,r3,r2
  8090f0:	40017d26 	beq	r8,zero,8096e8 <__adddf3+0x7f0>
  8090f4:	1011883a 	mov	r8,r2
  8090f8:	1823883a 	mov	r17,r3
  8090fc:	888001cc 	andi	r2,r17,7
  809100:	103f9e1e 	bne	r2,zero,808f7c <__alt_data_end+0xff808f7c>
  809104:	4004977a 	slli	r2,r8,29
  809108:	8822d0fa 	srli	r17,r17,3
  80910c:	4010d0fa 	srli	r8,r8,3
  809110:	9007883a 	mov	r3,r18
  809114:	1444b03a 	or	r2,r2,r17
  809118:	0101ffc4 	movi	r4,2047
  80911c:	81002426 	beq	r16,r4,8091b0 <__adddf3+0x2b8>
  809120:	8120703a 	and	r16,r16,r4
  809124:	01000434 	movhi	r4,16
  809128:	213fffc4 	addi	r4,r4,-1
  80912c:	4110703a 	and	r8,r8,r4
  809130:	003fa806 	br	808fd4 <__alt_data_end+0xff808fd4>
  809134:	8089c83a 	sub	r4,r16,r2
  809138:	01005e0e 	bge	zero,r4,8092b4 <__adddf3+0x3bc>
  80913c:	10002b26 	beq	r2,zero,8091ec <__adddf3+0x2f4>
  809140:	0081ffc4 	movi	r2,2047
  809144:	80bf8b26 	beq	r16,r2,808f74 <__alt_data_end+0xff808f74>
  809148:	4a402034 	orhi	r9,r9,128
  80914c:	00800e04 	movi	r2,56
  809150:	1100a40e 	bge	r2,r4,8093e4 <__adddf3+0x4ec>
  809154:	498cb03a 	or	r6,r9,r6
  809158:	300ac03a 	cmpne	r5,r6,zero
  80915c:	0013883a 	mov	r9,zero
  809160:	2c4b883a 	add	r5,r5,r17
  809164:	2c63803a 	cmpltu	r17,r5,r17
  809168:	4a11883a 	add	r8,r9,r8
  80916c:	8a11883a 	add	r8,r17,r8
  809170:	2823883a 	mov	r17,r5
  809174:	4080202c 	andhi	r2,r8,128
  809178:	103fe026 	beq	r2,zero,8090fc <__alt_data_end+0xff8090fc>
  80917c:	84000044 	addi	r16,r16,1
  809180:	0081ffc4 	movi	r2,2047
  809184:	8080d226 	beq	r16,r2,8094d0 <__adddf3+0x5d8>
  809188:	00bfe034 	movhi	r2,65408
  80918c:	10bfffc4 	addi	r2,r2,-1
  809190:	4090703a 	and	r8,r8,r2
  809194:	880ad07a 	srli	r5,r17,1
  809198:	400897fa 	slli	r4,r8,31
  80919c:	88c0004c 	andi	r3,r17,1
  8091a0:	28e2b03a 	or	r17,r5,r3
  8091a4:	4010d07a 	srli	r8,r8,1
  8091a8:	2462b03a 	or	r17,r4,r17
  8091ac:	003f7106 	br	808f74 <__alt_data_end+0xff808f74>
  8091b0:	4088b03a 	or	r4,r8,r2
  8091b4:	20014526 	beq	r4,zero,8096cc <__adddf3+0x7d4>
  8091b8:	01000434 	movhi	r4,16
  8091bc:	42000234 	orhi	r8,r8,8
  8091c0:	213fffc4 	addi	r4,r4,-1
  8091c4:	4110703a 	and	r8,r8,r4
  8091c8:	003f8206 	br	808fd4 <__alt_data_end+0xff808fd4>
  8091cc:	18ffffc4 	addi	r3,r3,-1
  8091d0:	1800491e 	bne	r3,zero,8092f8 <__adddf3+0x400>
  8091d4:	898bc83a 	sub	r5,r17,r6
  8091d8:	8963803a 	cmpltu	r17,r17,r5
  8091dc:	4251c83a 	sub	r8,r8,r9
  8091e0:	4451c83a 	sub	r8,r8,r17
  8091e4:	2823883a 	mov	r17,r5
  8091e8:	003f9f06 	br	809068 <__alt_data_end+0xff809068>
  8091ec:	4984b03a 	or	r2,r9,r6
  8091f0:	103f6026 	beq	r2,zero,808f74 <__alt_data_end+0xff808f74>
  8091f4:	213fffc4 	addi	r4,r4,-1
  8091f8:	2000931e 	bne	r4,zero,809448 <__adddf3+0x550>
  8091fc:	898d883a 	add	r6,r17,r6
  809200:	3463803a 	cmpltu	r17,r6,r17
  809204:	4251883a 	add	r8,r8,r9
  809208:	8a11883a 	add	r8,r17,r8
  80920c:	3023883a 	mov	r17,r6
  809210:	003fd806 	br	809174 <__alt_data_end+0xff809174>
  809214:	1800541e 	bne	r3,zero,809368 <__adddf3+0x470>
  809218:	80800044 	addi	r2,r16,1
  80921c:	1081ffcc 	andi	r2,r2,2047
  809220:	00c00044 	movi	r3,1
  809224:	1880a00e 	bge	r3,r2,8094a8 <__adddf3+0x5b0>
  809228:	8989c83a 	sub	r4,r17,r6
  80922c:	8905803a 	cmpltu	r2,r17,r4
  809230:	4267c83a 	sub	r19,r8,r9
  809234:	98a7c83a 	sub	r19,r19,r2
  809238:	9880202c 	andhi	r2,r19,128
  80923c:	10006326 	beq	r2,zero,8093cc <__adddf3+0x4d4>
  809240:	3463c83a 	sub	r17,r6,r17
  809244:	4a07c83a 	sub	r3,r9,r8
  809248:	344d803a 	cmpltu	r6,r6,r17
  80924c:	19a7c83a 	sub	r19,r3,r6
  809250:	3825883a 	mov	r18,r7
  809254:	983f8a1e 	bne	r19,zero,809080 <__alt_data_end+0xff809080>
  809258:	8809883a 	mov	r4,r17
  80925c:	080b7380 	call	80b738 <__clzsi2>
  809260:	10800804 	addi	r2,r2,32
  809264:	10fffe04 	addi	r3,r2,-8
  809268:	010007c4 	movi	r4,31
  80926c:	20ff890e 	bge	r4,r3,809094 <__alt_data_end+0xff809094>
  809270:	10bff604 	addi	r2,r2,-40
  809274:	8884983a 	sll	r2,r17,r2
  809278:	0023883a 	mov	r17,zero
  80927c:	1c3f8c0e 	bge	r3,r16,8090b0 <__alt_data_end+0xff8090b0>
  809280:	023fe034 	movhi	r8,65408
  809284:	423fffc4 	addi	r8,r8,-1
  809288:	80e1c83a 	sub	r16,r16,r3
  80928c:	1210703a 	and	r8,r2,r8
  809290:	003f3806 	br	808f74 <__alt_data_end+0xff808f74>
  809294:	9007883a 	mov	r3,r18
  809298:	0011883a 	mov	r8,zero
  80929c:	0005883a 	mov	r2,zero
  8092a0:	003f4c06 	br	808fd4 <__alt_data_end+0xff808fd4>
  8092a4:	498cb03a 	or	r6,r9,r6
  8092a8:	300cc03a 	cmpne	r6,r6,zero
  8092ac:	0007883a 	mov	r3,zero
  8092b0:	003f6806 	br	809054 <__alt_data_end+0xff809054>
  8092b4:	20009c1e 	bne	r4,zero,809528 <__adddf3+0x630>
  8092b8:	80800044 	addi	r2,r16,1
  8092bc:	1141ffcc 	andi	r5,r2,2047
  8092c0:	01000044 	movi	r4,1
  8092c4:	2140670e 	bge	r4,r5,809464 <__adddf3+0x56c>
  8092c8:	0101ffc4 	movi	r4,2047
  8092cc:	11007f26 	beq	r2,r4,8094cc <__adddf3+0x5d4>
  8092d0:	898d883a 	add	r6,r17,r6
  8092d4:	4247883a 	add	r3,r8,r9
  8092d8:	3451803a 	cmpltu	r8,r6,r17
  8092dc:	40d1883a 	add	r8,r8,r3
  8092e0:	402297fa 	slli	r17,r8,31
  8092e4:	300cd07a 	srli	r6,r6,1
  8092e8:	4010d07a 	srli	r8,r8,1
  8092ec:	1021883a 	mov	r16,r2
  8092f0:	89a2b03a 	or	r17,r17,r6
  8092f4:	003f1f06 	br	808f74 <__alt_data_end+0xff808f74>
  8092f8:	0081ffc4 	movi	r2,2047
  8092fc:	80bf481e 	bne	r16,r2,809020 <__alt_data_end+0xff809020>
  809300:	003f1c06 	br	808f74 <__alt_data_end+0xff808f74>
  809304:	843ff844 	addi	r16,r16,-31
  809308:	01000804 	movi	r4,32
  80930c:	1406d83a 	srl	r3,r2,r16
  809310:	41005026 	beq	r8,r4,809454 <__adddf3+0x55c>
  809314:	01001004 	movi	r4,64
  809318:	2211c83a 	sub	r8,r4,r8
  80931c:	1204983a 	sll	r2,r2,r8
  809320:	88a2b03a 	or	r17,r17,r2
  809324:	8822c03a 	cmpne	r17,r17,zero
  809328:	1c62b03a 	or	r17,r3,r17
  80932c:	0011883a 	mov	r8,zero
  809330:	0021883a 	mov	r16,zero
  809334:	003f7106 	br	8090fc <__alt_data_end+0xff8090fc>
  809338:	193ff804 	addi	r4,r3,-32
  80933c:	00800804 	movi	r2,32
  809340:	4908d83a 	srl	r4,r9,r4
  809344:	18804526 	beq	r3,r2,80945c <__adddf3+0x564>
  809348:	00801004 	movi	r2,64
  80934c:	10c5c83a 	sub	r2,r2,r3
  809350:	4886983a 	sll	r3,r9,r2
  809354:	198cb03a 	or	r6,r3,r6
  809358:	300cc03a 	cmpne	r6,r6,zero
  80935c:	218cb03a 	or	r6,r4,r6
  809360:	0007883a 	mov	r3,zero
  809364:	003f3b06 	br	809054 <__alt_data_end+0xff809054>
  809368:	80002a26 	beq	r16,zero,809414 <__adddf3+0x51c>
  80936c:	0101ffc4 	movi	r4,2047
  809370:	11006826 	beq	r2,r4,809514 <__adddf3+0x61c>
  809374:	00c7c83a 	sub	r3,zero,r3
  809378:	42002034 	orhi	r8,r8,128
  80937c:	01000e04 	movi	r4,56
  809380:	20c07c16 	blt	r4,r3,809574 <__adddf3+0x67c>
  809384:	010007c4 	movi	r4,31
  809388:	20c0da16 	blt	r4,r3,8096f4 <__adddf3+0x7fc>
  80938c:	01000804 	movi	r4,32
  809390:	20c9c83a 	sub	r4,r4,r3
  809394:	4114983a 	sll	r10,r8,r4
  809398:	88cad83a 	srl	r5,r17,r3
  80939c:	8908983a 	sll	r4,r17,r4
  8093a0:	40c6d83a 	srl	r3,r8,r3
  8093a4:	5162b03a 	or	r17,r10,r5
  8093a8:	2008c03a 	cmpne	r4,r4,zero
  8093ac:	8922b03a 	or	r17,r17,r4
  8093b0:	3463c83a 	sub	r17,r6,r17
  8093b4:	48c7c83a 	sub	r3,r9,r3
  8093b8:	344d803a 	cmpltu	r6,r6,r17
  8093bc:	1991c83a 	sub	r8,r3,r6
  8093c0:	1021883a 	mov	r16,r2
  8093c4:	3825883a 	mov	r18,r7
  8093c8:	003f2706 	br	809068 <__alt_data_end+0xff809068>
  8093cc:	24d0b03a 	or	r8,r4,r19
  8093d0:	40001b1e 	bne	r8,zero,809440 <__adddf3+0x548>
  8093d4:	0005883a 	mov	r2,zero
  8093d8:	0007883a 	mov	r3,zero
  8093dc:	0021883a 	mov	r16,zero
  8093e0:	003f4d06 	br	809118 <__alt_data_end+0xff809118>
  8093e4:	008007c4 	movi	r2,31
  8093e8:	11003c16 	blt	r2,r4,8094dc <__adddf3+0x5e4>
  8093ec:	00800804 	movi	r2,32
  8093f0:	1105c83a 	sub	r2,r2,r4
  8093f4:	488e983a 	sll	r7,r9,r2
  8093f8:	310ad83a 	srl	r5,r6,r4
  8093fc:	3084983a 	sll	r2,r6,r2
  809400:	4912d83a 	srl	r9,r9,r4
  809404:	394ab03a 	or	r5,r7,r5
  809408:	1004c03a 	cmpne	r2,r2,zero
  80940c:	288ab03a 	or	r5,r5,r2
  809410:	003f5306 	br	809160 <__alt_data_end+0xff809160>
  809414:	4448b03a 	or	r4,r8,r17
  809418:	20003e26 	beq	r4,zero,809514 <__adddf3+0x61c>
  80941c:	00c6303a 	nor	r3,zero,r3
  809420:	18003a1e 	bne	r3,zero,80950c <__adddf3+0x614>
  809424:	3463c83a 	sub	r17,r6,r17
  809428:	4a07c83a 	sub	r3,r9,r8
  80942c:	344d803a 	cmpltu	r6,r6,r17
  809430:	1991c83a 	sub	r8,r3,r6
  809434:	1021883a 	mov	r16,r2
  809438:	3825883a 	mov	r18,r7
  80943c:	003f0a06 	br	809068 <__alt_data_end+0xff809068>
  809440:	2023883a 	mov	r17,r4
  809444:	003f0d06 	br	80907c <__alt_data_end+0xff80907c>
  809448:	0081ffc4 	movi	r2,2047
  80944c:	80bf3f1e 	bne	r16,r2,80914c <__alt_data_end+0xff80914c>
  809450:	003ec806 	br	808f74 <__alt_data_end+0xff808f74>
  809454:	0005883a 	mov	r2,zero
  809458:	003fb106 	br	809320 <__alt_data_end+0xff809320>
  80945c:	0007883a 	mov	r3,zero
  809460:	003fbc06 	br	809354 <__alt_data_end+0xff809354>
  809464:	4444b03a 	or	r2,r8,r17
  809468:	8000871e 	bne	r16,zero,809688 <__adddf3+0x790>
  80946c:	1000ba26 	beq	r2,zero,809758 <__adddf3+0x860>
  809470:	4984b03a 	or	r2,r9,r6
  809474:	103ebf26 	beq	r2,zero,808f74 <__alt_data_end+0xff808f74>
  809478:	8985883a 	add	r2,r17,r6
  80947c:	4247883a 	add	r3,r8,r9
  809480:	1451803a 	cmpltu	r8,r2,r17
  809484:	40d1883a 	add	r8,r8,r3
  809488:	40c0202c 	andhi	r3,r8,128
  80948c:	1023883a 	mov	r17,r2
  809490:	183f1a26 	beq	r3,zero,8090fc <__alt_data_end+0xff8090fc>
  809494:	00bfe034 	movhi	r2,65408
  809498:	10bfffc4 	addi	r2,r2,-1
  80949c:	2021883a 	mov	r16,r4
  8094a0:	4090703a 	and	r8,r8,r2
  8094a4:	003eb306 	br	808f74 <__alt_data_end+0xff808f74>
  8094a8:	4444b03a 	or	r2,r8,r17
  8094ac:	8000291e 	bne	r16,zero,809554 <__adddf3+0x65c>
  8094b0:	10004b1e 	bne	r2,zero,8095e0 <__adddf3+0x6e8>
  8094b4:	4990b03a 	or	r8,r9,r6
  8094b8:	40008b26 	beq	r8,zero,8096e8 <__adddf3+0x7f0>
  8094bc:	4811883a 	mov	r8,r9
  8094c0:	3023883a 	mov	r17,r6
  8094c4:	3825883a 	mov	r18,r7
  8094c8:	003eaa06 	br	808f74 <__alt_data_end+0xff808f74>
  8094cc:	1021883a 	mov	r16,r2
  8094d0:	0011883a 	mov	r8,zero
  8094d4:	0005883a 	mov	r2,zero
  8094d8:	003f0f06 	br	809118 <__alt_data_end+0xff809118>
  8094dc:	217ff804 	addi	r5,r4,-32
  8094e0:	00800804 	movi	r2,32
  8094e4:	494ad83a 	srl	r5,r9,r5
  8094e8:	20807d26 	beq	r4,r2,8096e0 <__adddf3+0x7e8>
  8094ec:	00801004 	movi	r2,64
  8094f0:	1109c83a 	sub	r4,r2,r4
  8094f4:	4912983a 	sll	r9,r9,r4
  8094f8:	498cb03a 	or	r6,r9,r6
  8094fc:	300cc03a 	cmpne	r6,r6,zero
  809500:	298ab03a 	or	r5,r5,r6
  809504:	0013883a 	mov	r9,zero
  809508:	003f1506 	br	809160 <__alt_data_end+0xff809160>
  80950c:	0101ffc4 	movi	r4,2047
  809510:	113f9a1e 	bne	r2,r4,80937c <__alt_data_end+0xff80937c>
  809514:	4811883a 	mov	r8,r9
  809518:	3023883a 	mov	r17,r6
  80951c:	1021883a 	mov	r16,r2
  809520:	3825883a 	mov	r18,r7
  809524:	003e9306 	br	808f74 <__alt_data_end+0xff808f74>
  809528:	8000161e 	bne	r16,zero,809584 <__adddf3+0x68c>
  80952c:	444ab03a 	or	r5,r8,r17
  809530:	28005126 	beq	r5,zero,809678 <__adddf3+0x780>
  809534:	0108303a 	nor	r4,zero,r4
  809538:	20004d1e 	bne	r4,zero,809670 <__adddf3+0x778>
  80953c:	89a3883a 	add	r17,r17,r6
  809540:	4253883a 	add	r9,r8,r9
  809544:	898d803a 	cmpltu	r6,r17,r6
  809548:	3251883a 	add	r8,r6,r9
  80954c:	1021883a 	mov	r16,r2
  809550:	003f0806 	br	809174 <__alt_data_end+0xff809174>
  809554:	1000301e 	bne	r2,zero,809618 <__adddf3+0x720>
  809558:	4984b03a 	or	r2,r9,r6
  80955c:	10007126 	beq	r2,zero,809724 <__adddf3+0x82c>
  809560:	4811883a 	mov	r8,r9
  809564:	3023883a 	mov	r17,r6
  809568:	3825883a 	mov	r18,r7
  80956c:	0401ffc4 	movi	r16,2047
  809570:	003e8006 	br	808f74 <__alt_data_end+0xff808f74>
  809574:	4462b03a 	or	r17,r8,r17
  809578:	8822c03a 	cmpne	r17,r17,zero
  80957c:	0007883a 	mov	r3,zero
  809580:	003f8b06 	br	8093b0 <__alt_data_end+0xff8093b0>
  809584:	0141ffc4 	movi	r5,2047
  809588:	11403b26 	beq	r2,r5,809678 <__adddf3+0x780>
  80958c:	0109c83a 	sub	r4,zero,r4
  809590:	42002034 	orhi	r8,r8,128
  809594:	01400e04 	movi	r5,56
  809598:	29006716 	blt	r5,r4,809738 <__adddf3+0x840>
  80959c:	014007c4 	movi	r5,31
  8095a0:	29007016 	blt	r5,r4,809764 <__adddf3+0x86c>
  8095a4:	01400804 	movi	r5,32
  8095a8:	290bc83a 	sub	r5,r5,r4
  8095ac:	4154983a 	sll	r10,r8,r5
  8095b0:	890ed83a 	srl	r7,r17,r4
  8095b4:	894a983a 	sll	r5,r17,r5
  8095b8:	4108d83a 	srl	r4,r8,r4
  8095bc:	51e2b03a 	or	r17,r10,r7
  8095c0:	280ac03a 	cmpne	r5,r5,zero
  8095c4:	8962b03a 	or	r17,r17,r5
  8095c8:	89a3883a 	add	r17,r17,r6
  8095cc:	2253883a 	add	r9,r4,r9
  8095d0:	898d803a 	cmpltu	r6,r17,r6
  8095d4:	3251883a 	add	r8,r6,r9
  8095d8:	1021883a 	mov	r16,r2
  8095dc:	003ee506 	br	809174 <__alt_data_end+0xff809174>
  8095e0:	4984b03a 	or	r2,r9,r6
  8095e4:	103e6326 	beq	r2,zero,808f74 <__alt_data_end+0xff808f74>
  8095e8:	8987c83a 	sub	r3,r17,r6
  8095ec:	88c9803a 	cmpltu	r4,r17,r3
  8095f0:	4245c83a 	sub	r2,r8,r9
  8095f4:	1105c83a 	sub	r2,r2,r4
  8095f8:	1100202c 	andhi	r4,r2,128
  8095fc:	203ebb26 	beq	r4,zero,8090ec <__alt_data_end+0xff8090ec>
  809600:	3463c83a 	sub	r17,r6,r17
  809604:	4a07c83a 	sub	r3,r9,r8
  809608:	344d803a 	cmpltu	r6,r6,r17
  80960c:	1991c83a 	sub	r8,r3,r6
  809610:	3825883a 	mov	r18,r7
  809614:	003e5706 	br	808f74 <__alt_data_end+0xff808f74>
  809618:	4984b03a 	or	r2,r9,r6
  80961c:	10002e26 	beq	r2,zero,8096d8 <__adddf3+0x7e0>
  809620:	4004d0fa 	srli	r2,r8,3
  809624:	8822d0fa 	srli	r17,r17,3
  809628:	4010977a 	slli	r8,r8,29
  80962c:	10c0022c 	andhi	r3,r2,8
  809630:	4462b03a 	or	r17,r8,r17
  809634:	18000826 	beq	r3,zero,809658 <__adddf3+0x760>
  809638:	4808d0fa 	srli	r4,r9,3
  80963c:	20c0022c 	andhi	r3,r4,8
  809640:	1800051e 	bne	r3,zero,809658 <__adddf3+0x760>
  809644:	300cd0fa 	srli	r6,r6,3
  809648:	4806977a 	slli	r3,r9,29
  80964c:	2005883a 	mov	r2,r4
  809650:	3825883a 	mov	r18,r7
  809654:	19a2b03a 	or	r17,r3,r6
  809658:	8810d77a 	srli	r8,r17,29
  80965c:	100490fa 	slli	r2,r2,3
  809660:	882290fa 	slli	r17,r17,3
  809664:	0401ffc4 	movi	r16,2047
  809668:	4090b03a 	or	r8,r8,r2
  80966c:	003e4106 	br	808f74 <__alt_data_end+0xff808f74>
  809670:	0141ffc4 	movi	r5,2047
  809674:	117fc71e 	bne	r2,r5,809594 <__alt_data_end+0xff809594>
  809678:	4811883a 	mov	r8,r9
  80967c:	3023883a 	mov	r17,r6
  809680:	1021883a 	mov	r16,r2
  809684:	003e3b06 	br	808f74 <__alt_data_end+0xff808f74>
  809688:	10002f26 	beq	r2,zero,809748 <__adddf3+0x850>
  80968c:	4984b03a 	or	r2,r9,r6
  809690:	10001126 	beq	r2,zero,8096d8 <__adddf3+0x7e0>
  809694:	4004d0fa 	srli	r2,r8,3
  809698:	8822d0fa 	srli	r17,r17,3
  80969c:	4010977a 	slli	r8,r8,29
  8096a0:	10c0022c 	andhi	r3,r2,8
  8096a4:	4462b03a 	or	r17,r8,r17
  8096a8:	183feb26 	beq	r3,zero,809658 <__alt_data_end+0xff809658>
  8096ac:	4808d0fa 	srli	r4,r9,3
  8096b0:	20c0022c 	andhi	r3,r4,8
  8096b4:	183fe81e 	bne	r3,zero,809658 <__alt_data_end+0xff809658>
  8096b8:	300cd0fa 	srli	r6,r6,3
  8096bc:	4806977a 	slli	r3,r9,29
  8096c0:	2005883a 	mov	r2,r4
  8096c4:	19a2b03a 	or	r17,r3,r6
  8096c8:	003fe306 	br	809658 <__alt_data_end+0xff809658>
  8096cc:	0011883a 	mov	r8,zero
  8096d0:	0005883a 	mov	r2,zero
  8096d4:	003e3f06 	br	808fd4 <__alt_data_end+0xff808fd4>
  8096d8:	0401ffc4 	movi	r16,2047
  8096dc:	003e2506 	br	808f74 <__alt_data_end+0xff808f74>
  8096e0:	0013883a 	mov	r9,zero
  8096e4:	003f8406 	br	8094f8 <__alt_data_end+0xff8094f8>
  8096e8:	0005883a 	mov	r2,zero
  8096ec:	0007883a 	mov	r3,zero
  8096f0:	003e8906 	br	809118 <__alt_data_end+0xff809118>
  8096f4:	197ff804 	addi	r5,r3,-32
  8096f8:	01000804 	movi	r4,32
  8096fc:	414ad83a 	srl	r5,r8,r5
  809700:	19002426 	beq	r3,r4,809794 <__adddf3+0x89c>
  809704:	01001004 	movi	r4,64
  809708:	20c7c83a 	sub	r3,r4,r3
  80970c:	40c6983a 	sll	r3,r8,r3
  809710:	1c46b03a 	or	r3,r3,r17
  809714:	1806c03a 	cmpne	r3,r3,zero
  809718:	28e2b03a 	or	r17,r5,r3
  80971c:	0007883a 	mov	r3,zero
  809720:	003f2306 	br	8093b0 <__alt_data_end+0xff8093b0>
  809724:	0007883a 	mov	r3,zero
  809728:	5811883a 	mov	r8,r11
  80972c:	00bfffc4 	movi	r2,-1
  809730:	0401ffc4 	movi	r16,2047
  809734:	003e7806 	br	809118 <__alt_data_end+0xff809118>
  809738:	4462b03a 	or	r17,r8,r17
  80973c:	8822c03a 	cmpne	r17,r17,zero
  809740:	0009883a 	mov	r4,zero
  809744:	003fa006 	br	8095c8 <__alt_data_end+0xff8095c8>
  809748:	4811883a 	mov	r8,r9
  80974c:	3023883a 	mov	r17,r6
  809750:	0401ffc4 	movi	r16,2047
  809754:	003e0706 	br	808f74 <__alt_data_end+0xff808f74>
  809758:	4811883a 	mov	r8,r9
  80975c:	3023883a 	mov	r17,r6
  809760:	003e0406 	br	808f74 <__alt_data_end+0xff808f74>
  809764:	21fff804 	addi	r7,r4,-32
  809768:	01400804 	movi	r5,32
  80976c:	41ced83a 	srl	r7,r8,r7
  809770:	21400a26 	beq	r4,r5,80979c <__adddf3+0x8a4>
  809774:	01401004 	movi	r5,64
  809778:	2909c83a 	sub	r4,r5,r4
  80977c:	4108983a 	sll	r4,r8,r4
  809780:	2448b03a 	or	r4,r4,r17
  809784:	2008c03a 	cmpne	r4,r4,zero
  809788:	3922b03a 	or	r17,r7,r4
  80978c:	0009883a 	mov	r4,zero
  809790:	003f8d06 	br	8095c8 <__alt_data_end+0xff8095c8>
  809794:	0007883a 	mov	r3,zero
  809798:	003fdd06 	br	809710 <__alt_data_end+0xff809710>
  80979c:	0009883a 	mov	r4,zero
  8097a0:	003ff706 	br	809780 <__alt_data_end+0xff809780>

008097a4 <__divdf3>:
  8097a4:	defff004 	addi	sp,sp,-64
  8097a8:	dc800815 	stw	r18,32(sp)
  8097ac:	2824d53a 	srli	r18,r5,20
  8097b0:	dd800c15 	stw	r22,48(sp)
  8097b4:	282cd7fa 	srli	r22,r5,31
  8097b8:	dc000615 	stw	r16,24(sp)
  8097bc:	04000434 	movhi	r16,16
  8097c0:	843fffc4 	addi	r16,r16,-1
  8097c4:	dfc00f15 	stw	ra,60(sp)
  8097c8:	df000e15 	stw	fp,56(sp)
  8097cc:	ddc00d15 	stw	r23,52(sp)
  8097d0:	dd400b15 	stw	r21,44(sp)
  8097d4:	dd000a15 	stw	r20,40(sp)
  8097d8:	dcc00915 	stw	r19,36(sp)
  8097dc:	dc400715 	stw	r17,28(sp)
  8097e0:	9481ffcc 	andi	r18,r18,2047
  8097e4:	2c20703a 	and	r16,r5,r16
  8097e8:	b2003fcc 	andi	r8,r22,255
  8097ec:	90006126 	beq	r18,zero,809974 <__divdf3+0x1d0>
  8097f0:	0081ffc4 	movi	r2,2047
  8097f4:	202b883a 	mov	r21,r4
  8097f8:	90803726 	beq	r18,r2,8098d8 <__divdf3+0x134>
  8097fc:	80800434 	orhi	r2,r16,16
  809800:	100490fa 	slli	r2,r2,3
  809804:	2020d77a 	srli	r16,r4,29
  809808:	202a90fa 	slli	r21,r4,3
  80980c:	94bf0044 	addi	r18,r18,-1023
  809810:	80a0b03a 	or	r16,r16,r2
  809814:	0013883a 	mov	r9,zero
  809818:	000b883a 	mov	r5,zero
  80981c:	3806d53a 	srli	r3,r7,20
  809820:	382ed7fa 	srli	r23,r7,31
  809824:	04400434 	movhi	r17,16
  809828:	8c7fffc4 	addi	r17,r17,-1
  80982c:	18c1ffcc 	andi	r3,r3,2047
  809830:	3029883a 	mov	r20,r6
  809834:	3c62703a 	and	r17,r7,r17
  809838:	bf003fcc 	andi	fp,r23,255
  80983c:	18006e26 	beq	r3,zero,8099f8 <__divdf3+0x254>
  809840:	0081ffc4 	movi	r2,2047
  809844:	18806626 	beq	r3,r2,8099e0 <__divdf3+0x23c>
  809848:	88800434 	orhi	r2,r17,16
  80984c:	100490fa 	slli	r2,r2,3
  809850:	3022d77a 	srli	r17,r6,29
  809854:	302890fa 	slli	r20,r6,3
  809858:	18ff0044 	addi	r3,r3,-1023
  80985c:	88a2b03a 	or	r17,r17,r2
  809860:	000f883a 	mov	r7,zero
  809864:	b5e6f03a 	xor	r19,r22,r23
  809868:	3a4cb03a 	or	r6,r7,r9
  80986c:	008003c4 	movi	r2,15
  809870:	9809883a 	mov	r4,r19
  809874:	90c7c83a 	sub	r3,r18,r3
  809878:	9cc03fcc 	andi	r19,r19,255
  80987c:	11809636 	bltu	r2,r6,809ad8 <__divdf3+0x334>
  809880:	300c90ba 	slli	r6,r6,2
  809884:	00802074 	movhi	r2,129
  809888:	10a62604 	addi	r2,r2,-26472
  80988c:	308d883a 	add	r6,r6,r2
  809890:	30800017 	ldw	r2,0(r6)
  809894:	1000683a 	jmp	r2
  809898:	00809ad8 	cmpnei	r2,zero,619
  80989c:	00809910 	cmplti	r2,zero,612
  8098a0:	00809ac8 	cmpgei	r2,zero,619
  8098a4:	00809904 	movi	r2,612
  8098a8:	00809ac8 	cmpgei	r2,zero,619
  8098ac:	00809a9c 	xori	r2,zero,618
  8098b0:	00809ac8 	cmpgei	r2,zero,619
  8098b4:	00809904 	movi	r2,612
  8098b8:	00809910 	cmplti	r2,zero,612
  8098bc:	00809910 	cmplti	r2,zero,612
  8098c0:	00809a9c 	xori	r2,zero,618
  8098c4:	00809904 	movi	r2,612
  8098c8:	008098f4 	movhi	r2,611
  8098cc:	008098f4 	movhi	r2,611
  8098d0:	008098f4 	movhi	r2,611
  8098d4:	00809e60 	cmpeqi	r2,zero,633
  8098d8:	2404b03a 	or	r2,r4,r16
  8098dc:	10006c1e 	bne	r2,zero,809a90 <__divdf3+0x2ec>
  8098e0:	02400204 	movi	r9,8
  8098e4:	0021883a 	mov	r16,zero
  8098e8:	002b883a 	mov	r21,zero
  8098ec:	01400084 	movi	r5,2
  8098f0:	003fca06 	br	80981c <__alt_data_end+0xff80981c>
  8098f4:	8023883a 	mov	r17,r16
  8098f8:	a829883a 	mov	r20,r21
  8098fc:	4039883a 	mov	fp,r8
  809900:	280f883a 	mov	r7,r5
  809904:	00800084 	movi	r2,2
  809908:	3881601e 	bne	r7,r2,809e8c <__divdf3+0x6e8>
  80990c:	e027883a 	mov	r19,fp
  809910:	9900004c 	andi	r4,r19,1
  809914:	0081ffc4 	movi	r2,2047
  809918:	0021883a 	mov	r16,zero
  80991c:	002b883a 	mov	r21,zero
  809920:	1004953a 	slli	r2,r2,20
  809924:	20c03fcc 	andi	r3,r4,255
  809928:	01400434 	movhi	r5,16
  80992c:	297fffc4 	addi	r5,r5,-1
  809930:	180697fa 	slli	r3,r3,31
  809934:	8160703a 	and	r16,r16,r5
  809938:	80a0b03a 	or	r16,r16,r2
  80993c:	80c6b03a 	or	r3,r16,r3
  809940:	a805883a 	mov	r2,r21
  809944:	dfc00f17 	ldw	ra,60(sp)
  809948:	df000e17 	ldw	fp,56(sp)
  80994c:	ddc00d17 	ldw	r23,52(sp)
  809950:	dd800c17 	ldw	r22,48(sp)
  809954:	dd400b17 	ldw	r21,44(sp)
  809958:	dd000a17 	ldw	r20,40(sp)
  80995c:	dcc00917 	ldw	r19,36(sp)
  809960:	dc800817 	ldw	r18,32(sp)
  809964:	dc400717 	ldw	r17,28(sp)
  809968:	dc000617 	ldw	r16,24(sp)
  80996c:	dec01004 	addi	sp,sp,64
  809970:	f800283a 	ret
  809974:	2404b03a 	or	r2,r4,r16
  809978:	2023883a 	mov	r17,r4
  80997c:	10003f26 	beq	r2,zero,809a7c <__divdf3+0x2d8>
  809980:	80015e26 	beq	r16,zero,809efc <__divdf3+0x758>
  809984:	8009883a 	mov	r4,r16
  809988:	d9800215 	stw	r6,8(sp)
  80998c:	d9c00515 	stw	r7,20(sp)
  809990:	da000415 	stw	r8,16(sp)
  809994:	080b7380 	call	80b738 <__clzsi2>
  809998:	d9800217 	ldw	r6,8(sp)
  80999c:	d9c00517 	ldw	r7,20(sp)
  8099a0:	da000417 	ldw	r8,16(sp)
  8099a4:	113ffd44 	addi	r4,r2,-11
  8099a8:	00c00704 	movi	r3,28
  8099ac:	19014f16 	blt	r3,r4,809eec <__divdf3+0x748>
  8099b0:	00c00744 	movi	r3,29
  8099b4:	157ffe04 	addi	r21,r2,-8
  8099b8:	1907c83a 	sub	r3,r3,r4
  8099bc:	8560983a 	sll	r16,r16,r21
  8099c0:	88c6d83a 	srl	r3,r17,r3
  8099c4:	8d6a983a 	sll	r21,r17,r21
  8099c8:	1c20b03a 	or	r16,r3,r16
  8099cc:	1080fcc4 	addi	r2,r2,1011
  8099d0:	00a5c83a 	sub	r18,zero,r2
  8099d4:	0013883a 	mov	r9,zero
  8099d8:	000b883a 	mov	r5,zero
  8099dc:	003f8f06 	br	80981c <__alt_data_end+0xff80981c>
  8099e0:	3444b03a 	or	r2,r6,r17
  8099e4:	1000231e 	bne	r2,zero,809a74 <__divdf3+0x2d0>
  8099e8:	0023883a 	mov	r17,zero
  8099ec:	0029883a 	mov	r20,zero
  8099f0:	01c00084 	movi	r7,2
  8099f4:	003f9b06 	br	809864 <__alt_data_end+0xff809864>
  8099f8:	3444b03a 	or	r2,r6,r17
  8099fc:	10001926 	beq	r2,zero,809a64 <__divdf3+0x2c0>
  809a00:	88014b26 	beq	r17,zero,809f30 <__divdf3+0x78c>
  809a04:	8809883a 	mov	r4,r17
  809a08:	d9400115 	stw	r5,4(sp)
  809a0c:	d9800215 	stw	r6,8(sp)
  809a10:	da000415 	stw	r8,16(sp)
  809a14:	da400315 	stw	r9,12(sp)
  809a18:	080b7380 	call	80b738 <__clzsi2>
  809a1c:	d9400117 	ldw	r5,4(sp)
  809a20:	d9800217 	ldw	r6,8(sp)
  809a24:	da000417 	ldw	r8,16(sp)
  809a28:	da400317 	ldw	r9,12(sp)
  809a2c:	113ffd44 	addi	r4,r2,-11
  809a30:	00c00704 	movi	r3,28
  809a34:	19013a16 	blt	r3,r4,809f20 <__divdf3+0x77c>
  809a38:	00c00744 	movi	r3,29
  809a3c:	153ffe04 	addi	r20,r2,-8
  809a40:	1907c83a 	sub	r3,r3,r4
  809a44:	8d22983a 	sll	r17,r17,r20
  809a48:	30c6d83a 	srl	r3,r6,r3
  809a4c:	3528983a 	sll	r20,r6,r20
  809a50:	1c62b03a 	or	r17,r3,r17
  809a54:	1080fcc4 	addi	r2,r2,1011
  809a58:	0087c83a 	sub	r3,zero,r2
  809a5c:	000f883a 	mov	r7,zero
  809a60:	003f8006 	br	809864 <__alt_data_end+0xff809864>
  809a64:	0023883a 	mov	r17,zero
  809a68:	0029883a 	mov	r20,zero
  809a6c:	01c00044 	movi	r7,1
  809a70:	003f7c06 	br	809864 <__alt_data_end+0xff809864>
  809a74:	01c000c4 	movi	r7,3
  809a78:	003f7a06 	br	809864 <__alt_data_end+0xff809864>
  809a7c:	02400104 	movi	r9,4
  809a80:	0021883a 	mov	r16,zero
  809a84:	002b883a 	mov	r21,zero
  809a88:	01400044 	movi	r5,1
  809a8c:	003f6306 	br	80981c <__alt_data_end+0xff80981c>
  809a90:	02400304 	movi	r9,12
  809a94:	014000c4 	movi	r5,3
  809a98:	003f6006 	br	80981c <__alt_data_end+0xff80981c>
  809a9c:	04000434 	movhi	r16,16
  809aa0:	0009883a 	mov	r4,zero
  809aa4:	843fffc4 	addi	r16,r16,-1
  809aa8:	057fffc4 	movi	r21,-1
  809aac:	0081ffc4 	movi	r2,2047
  809ab0:	003f9b06 	br	809920 <__alt_data_end+0xff809920>
  809ab4:	00c00044 	movi	r3,1
  809ab8:	1887c83a 	sub	r3,r3,r2
  809abc:	01000e04 	movi	r4,56
  809ac0:	20c1530e 	bge	r4,r3,80a010 <__divdf3+0x86c>
  809ac4:	9900004c 	andi	r4,r19,1
  809ac8:	0005883a 	mov	r2,zero
  809acc:	0021883a 	mov	r16,zero
  809ad0:	002b883a 	mov	r21,zero
  809ad4:	003f9206 	br	809920 <__alt_data_end+0xff809920>
  809ad8:	8c012e36 	bltu	r17,r16,809f94 <__divdf3+0x7f0>
  809adc:	84412c26 	beq	r16,r17,809f90 <__divdf3+0x7ec>
  809ae0:	a82f883a 	mov	r23,r21
  809ae4:	18ffffc4 	addi	r3,r3,-1
  809ae8:	002b883a 	mov	r21,zero
  809aec:	a004d63a 	srli	r2,r20,24
  809af0:	8822923a 	slli	r17,r17,8
  809af4:	a028923a 	slli	r20,r20,8
  809af8:	8009883a 	mov	r4,r16
  809afc:	88acb03a 	or	r22,r17,r2
  809b00:	dd000015 	stw	r20,0(sp)
  809b04:	b028d43a 	srli	r20,r22,16
  809b08:	d8c00215 	stw	r3,8(sp)
  809b0c:	b4bfffcc 	andi	r18,r22,65535
  809b10:	a00b883a 	mov	r5,r20
  809b14:	0808e140 	call	808e14 <__udivsi3>
  809b18:	100b883a 	mov	r5,r2
  809b1c:	9009883a 	mov	r4,r18
  809b20:	1023883a 	mov	r17,r2
  809b24:	0808ed00 	call	808ed0 <__mulsi3>
  809b28:	8009883a 	mov	r4,r16
  809b2c:	a00b883a 	mov	r5,r20
  809b30:	1039883a 	mov	fp,r2
  809b34:	0808e780 	call	808e78 <__umodsi3>
  809b38:	1004943a 	slli	r2,r2,16
  809b3c:	b808d43a 	srli	r4,r23,16
  809b40:	d8c00217 	ldw	r3,8(sp)
  809b44:	2084b03a 	or	r2,r4,r2
  809b48:	1700062e 	bgeu	r2,fp,809b64 <__divdf3+0x3c0>
  809b4c:	1585883a 	add	r2,r2,r22
  809b50:	893fffc4 	addi	r4,r17,-1
  809b54:	15811d36 	bltu	r2,r22,809fcc <__divdf3+0x828>
  809b58:	17011c2e 	bgeu	r2,fp,809fcc <__divdf3+0x828>
  809b5c:	8c7fff84 	addi	r17,r17,-2
  809b60:	1585883a 	add	r2,r2,r22
  809b64:	1739c83a 	sub	fp,r2,fp
  809b68:	a00b883a 	mov	r5,r20
  809b6c:	e009883a 	mov	r4,fp
  809b70:	d8c00215 	stw	r3,8(sp)
  809b74:	0808e140 	call	808e14 <__udivsi3>
  809b78:	100b883a 	mov	r5,r2
  809b7c:	9009883a 	mov	r4,r18
  809b80:	1021883a 	mov	r16,r2
  809b84:	0808ed00 	call	808ed0 <__mulsi3>
  809b88:	a00b883a 	mov	r5,r20
  809b8c:	e009883a 	mov	r4,fp
  809b90:	d8800415 	stw	r2,16(sp)
  809b94:	0808e780 	call	808e78 <__umodsi3>
  809b98:	1004943a 	slli	r2,r2,16
  809b9c:	da000417 	ldw	r8,16(sp)
  809ba0:	bdffffcc 	andi	r23,r23,65535
  809ba4:	b884b03a 	or	r2,r23,r2
  809ba8:	d8c00217 	ldw	r3,8(sp)
  809bac:	1200062e 	bgeu	r2,r8,809bc8 <__divdf3+0x424>
  809bb0:	1585883a 	add	r2,r2,r22
  809bb4:	813fffc4 	addi	r4,r16,-1
  809bb8:	15810236 	bltu	r2,r22,809fc4 <__divdf3+0x820>
  809bbc:	1201012e 	bgeu	r2,r8,809fc4 <__divdf3+0x820>
  809bc0:	843fff84 	addi	r16,r16,-2
  809bc4:	1585883a 	add	r2,r2,r22
  809bc8:	8822943a 	slli	r17,r17,16
  809bcc:	d9800017 	ldw	r6,0(sp)
  809bd0:	1211c83a 	sub	r8,r2,r8
  809bd4:	8c22b03a 	or	r17,r17,r16
  809bd8:	373fffcc 	andi	fp,r6,65535
  809bdc:	8abfffcc 	andi	r10,r17,65535
  809be0:	8820d43a 	srli	r16,r17,16
  809be4:	5009883a 	mov	r4,r10
  809be8:	e00b883a 	mov	r5,fp
  809bec:	302ed43a 	srli	r23,r6,16
  809bf0:	d8c00215 	stw	r3,8(sp)
  809bf4:	da000415 	stw	r8,16(sp)
  809bf8:	da800115 	stw	r10,4(sp)
  809bfc:	0808ed00 	call	808ed0 <__mulsi3>
  809c00:	800b883a 	mov	r5,r16
  809c04:	e009883a 	mov	r4,fp
  809c08:	d8800515 	stw	r2,20(sp)
  809c0c:	0808ed00 	call	808ed0 <__mulsi3>
  809c10:	8009883a 	mov	r4,r16
  809c14:	b80b883a 	mov	r5,r23
  809c18:	d8800315 	stw	r2,12(sp)
  809c1c:	0808ed00 	call	808ed0 <__mulsi3>
  809c20:	da800117 	ldw	r10,4(sp)
  809c24:	b80b883a 	mov	r5,r23
  809c28:	1021883a 	mov	r16,r2
  809c2c:	5009883a 	mov	r4,r10
  809c30:	0808ed00 	call	808ed0 <__mulsi3>
  809c34:	d9c00517 	ldw	r7,20(sp)
  809c38:	da400317 	ldw	r9,12(sp)
  809c3c:	d8c00217 	ldw	r3,8(sp)
  809c40:	3808d43a 	srli	r4,r7,16
  809c44:	1245883a 	add	r2,r2,r9
  809c48:	da000417 	ldw	r8,16(sp)
  809c4c:	2085883a 	add	r2,r4,r2
  809c50:	1240022e 	bgeu	r2,r9,809c5c <__divdf3+0x4b8>
  809c54:	01000074 	movhi	r4,1
  809c58:	8121883a 	add	r16,r16,r4
  809c5c:	1008d43a 	srli	r4,r2,16
  809c60:	1004943a 	slli	r2,r2,16
  809c64:	39ffffcc 	andi	r7,r7,65535
  809c68:	2409883a 	add	r4,r4,r16
  809c6c:	11c5883a 	add	r2,r2,r7
  809c70:	4100bb36 	bltu	r8,r4,809f60 <__divdf3+0x7bc>
  809c74:	4100d726 	beq	r8,r4,809fd4 <__divdf3+0x830>
  809c78:	4109c83a 	sub	r4,r8,r4
  809c7c:	a8a1c83a 	sub	r16,r21,r2
  809c80:	ac2b803a 	cmpltu	r21,r21,r16
  809c84:	256bc83a 	sub	r21,r4,r21
  809c88:	b540d926 	beq	r22,r21,809ff0 <__divdf3+0x84c>
  809c8c:	a00b883a 	mov	r5,r20
  809c90:	a809883a 	mov	r4,r21
  809c94:	d8c00215 	stw	r3,8(sp)
  809c98:	0808e140 	call	808e14 <__udivsi3>
  809c9c:	100b883a 	mov	r5,r2
  809ca0:	9009883a 	mov	r4,r18
  809ca4:	d8800515 	stw	r2,20(sp)
  809ca8:	0808ed00 	call	808ed0 <__mulsi3>
  809cac:	a809883a 	mov	r4,r21
  809cb0:	a00b883a 	mov	r5,r20
  809cb4:	d8800415 	stw	r2,16(sp)
  809cb8:	0808e780 	call	808e78 <__umodsi3>
  809cbc:	1004943a 	slli	r2,r2,16
  809cc0:	8008d43a 	srli	r4,r16,16
  809cc4:	da000417 	ldw	r8,16(sp)
  809cc8:	d8c00217 	ldw	r3,8(sp)
  809ccc:	2084b03a 	or	r2,r4,r2
  809cd0:	d9c00517 	ldw	r7,20(sp)
  809cd4:	1200062e 	bgeu	r2,r8,809cf0 <__divdf3+0x54c>
  809cd8:	1585883a 	add	r2,r2,r22
  809cdc:	393fffc4 	addi	r4,r7,-1
  809ce0:	1580c536 	bltu	r2,r22,809ff8 <__divdf3+0x854>
  809ce4:	1200c42e 	bgeu	r2,r8,809ff8 <__divdf3+0x854>
  809ce8:	39ffff84 	addi	r7,r7,-2
  809cec:	1585883a 	add	r2,r2,r22
  809cf0:	122bc83a 	sub	r21,r2,r8
  809cf4:	a00b883a 	mov	r5,r20
  809cf8:	a809883a 	mov	r4,r21
  809cfc:	d8c00215 	stw	r3,8(sp)
  809d00:	d9c00515 	stw	r7,20(sp)
  809d04:	0808e140 	call	808e14 <__udivsi3>
  809d08:	9009883a 	mov	r4,r18
  809d0c:	100b883a 	mov	r5,r2
  809d10:	d8800415 	stw	r2,16(sp)
  809d14:	0808ed00 	call	808ed0 <__mulsi3>
  809d18:	a809883a 	mov	r4,r21
  809d1c:	a00b883a 	mov	r5,r20
  809d20:	1025883a 	mov	r18,r2
  809d24:	0808e780 	call	808e78 <__umodsi3>
  809d28:	1004943a 	slli	r2,r2,16
  809d2c:	813fffcc 	andi	r4,r16,65535
  809d30:	d8c00217 	ldw	r3,8(sp)
  809d34:	20a0b03a 	or	r16,r4,r2
  809d38:	d9c00517 	ldw	r7,20(sp)
  809d3c:	da000417 	ldw	r8,16(sp)
  809d40:	8480062e 	bgeu	r16,r18,809d5c <__divdf3+0x5b8>
  809d44:	85a1883a 	add	r16,r16,r22
  809d48:	40bfffc4 	addi	r2,r8,-1
  809d4c:	8580ac36 	bltu	r16,r22,80a000 <__divdf3+0x85c>
  809d50:	8480ab2e 	bgeu	r16,r18,80a000 <__divdf3+0x85c>
  809d54:	423fff84 	addi	r8,r8,-2
  809d58:	85a1883a 	add	r16,r16,r22
  809d5c:	3804943a 	slli	r2,r7,16
  809d60:	84a1c83a 	sub	r16,r16,r18
  809d64:	e009883a 	mov	r4,fp
  809d68:	1228b03a 	or	r20,r2,r8
  809d6c:	a1ffffcc 	andi	r7,r20,65535
  809d70:	a024d43a 	srli	r18,r20,16
  809d74:	380b883a 	mov	r5,r7
  809d78:	d8c00215 	stw	r3,8(sp)
  809d7c:	d9c00515 	stw	r7,20(sp)
  809d80:	0808ed00 	call	808ed0 <__mulsi3>
  809d84:	900b883a 	mov	r5,r18
  809d88:	e009883a 	mov	r4,fp
  809d8c:	102b883a 	mov	r21,r2
  809d90:	0808ed00 	call	808ed0 <__mulsi3>
  809d94:	900b883a 	mov	r5,r18
  809d98:	b809883a 	mov	r4,r23
  809d9c:	1039883a 	mov	fp,r2
  809da0:	0808ed00 	call	808ed0 <__mulsi3>
  809da4:	d9c00517 	ldw	r7,20(sp)
  809da8:	b80b883a 	mov	r5,r23
  809dac:	1025883a 	mov	r18,r2
  809db0:	3809883a 	mov	r4,r7
  809db4:	0808ed00 	call	808ed0 <__mulsi3>
  809db8:	a808d43a 	srli	r4,r21,16
  809dbc:	1705883a 	add	r2,r2,fp
  809dc0:	d8c00217 	ldw	r3,8(sp)
  809dc4:	2085883a 	add	r2,r4,r2
  809dc8:	1700022e 	bgeu	r2,fp,809dd4 <__divdf3+0x630>
  809dcc:	01000074 	movhi	r4,1
  809dd0:	9125883a 	add	r18,r18,r4
  809dd4:	1008d43a 	srli	r4,r2,16
  809dd8:	1004943a 	slli	r2,r2,16
  809ddc:	ad7fffcc 	andi	r21,r21,65535
  809de0:	2489883a 	add	r4,r4,r18
  809de4:	1545883a 	add	r2,r2,r21
  809de8:	81003836 	bltu	r16,r4,809ecc <__divdf3+0x728>
  809dec:	81003626 	beq	r16,r4,809ec8 <__divdf3+0x724>
  809df0:	a5000054 	ori	r20,r20,1
  809df4:	1880ffc4 	addi	r2,r3,1023
  809df8:	00bf2e0e 	bge	zero,r2,809ab4 <__alt_data_end+0xff809ab4>
  809dfc:	a10001cc 	andi	r4,r20,7
  809e00:	20000726 	beq	r4,zero,809e20 <__divdf3+0x67c>
  809e04:	a10003cc 	andi	r4,r20,15
  809e08:	01400104 	movi	r5,4
  809e0c:	21400426 	beq	r4,r5,809e20 <__divdf3+0x67c>
  809e10:	a149883a 	add	r4,r20,r5
  809e14:	2529803a 	cmpltu	r20,r4,r20
  809e18:	8d23883a 	add	r17,r17,r20
  809e1c:	2029883a 	mov	r20,r4
  809e20:	8900402c 	andhi	r4,r17,256
  809e24:	20000426 	beq	r4,zero,809e38 <__divdf3+0x694>
  809e28:	18810004 	addi	r2,r3,1024
  809e2c:	00ffc034 	movhi	r3,65280
  809e30:	18ffffc4 	addi	r3,r3,-1
  809e34:	88e2703a 	and	r17,r17,r3
  809e38:	00c1ff84 	movi	r3,2046
  809e3c:	18beb416 	blt	r3,r2,809910 <__alt_data_end+0xff809910>
  809e40:	a028d0fa 	srli	r20,r20,3
  809e44:	882a977a 	slli	r21,r17,29
  809e48:	8820927a 	slli	r16,r17,9
  809e4c:	1081ffcc 	andi	r2,r2,2047
  809e50:	ad2ab03a 	or	r21,r21,r20
  809e54:	8020d33a 	srli	r16,r16,12
  809e58:	9900004c 	andi	r4,r19,1
  809e5c:	003eb006 	br	809920 <__alt_data_end+0xff809920>
  809e60:	8080022c 	andhi	r2,r16,8
  809e64:	10001226 	beq	r2,zero,809eb0 <__divdf3+0x70c>
  809e68:	8880022c 	andhi	r2,r17,8
  809e6c:	1000101e 	bne	r2,zero,809eb0 <__divdf3+0x70c>
  809e70:	00800434 	movhi	r2,16
  809e74:	8c000234 	orhi	r16,r17,8
  809e78:	10bfffc4 	addi	r2,r2,-1
  809e7c:	b809883a 	mov	r4,r23
  809e80:	80a0703a 	and	r16,r16,r2
  809e84:	a02b883a 	mov	r21,r20
  809e88:	003f0806 	br	809aac <__alt_data_end+0xff809aac>
  809e8c:	008000c4 	movi	r2,3
  809e90:	3880b126 	beq	r7,r2,80a158 <__divdf3+0x9b4>
  809e94:	00800044 	movi	r2,1
  809e98:	38805b1e 	bne	r7,r2,80a008 <__divdf3+0x864>
  809e9c:	e009883a 	mov	r4,fp
  809ea0:	0005883a 	mov	r2,zero
  809ea4:	0021883a 	mov	r16,zero
  809ea8:	002b883a 	mov	r21,zero
  809eac:	003e9c06 	br	809920 <__alt_data_end+0xff809920>
  809eb0:	00800434 	movhi	r2,16
  809eb4:	84000234 	orhi	r16,r16,8
  809eb8:	10bfffc4 	addi	r2,r2,-1
  809ebc:	b009883a 	mov	r4,r22
  809ec0:	80a0703a 	and	r16,r16,r2
  809ec4:	003ef906 	br	809aac <__alt_data_end+0xff809aac>
  809ec8:	103fca26 	beq	r2,zero,809df4 <__alt_data_end+0xff809df4>
  809ecc:	b421883a 	add	r16,r22,r16
  809ed0:	a17fffc4 	addi	r5,r20,-1
  809ed4:	8580422e 	bgeu	r16,r22,809fe0 <__divdf3+0x83c>
  809ed8:	2829883a 	mov	r20,r5
  809edc:	813fc41e 	bne	r16,r4,809df0 <__alt_data_end+0xff809df0>
  809ee0:	d9800017 	ldw	r6,0(sp)
  809ee4:	30bfc21e 	bne	r6,r2,809df0 <__alt_data_end+0xff809df0>
  809ee8:	003fc206 	br	809df4 <__alt_data_end+0xff809df4>
  809eec:	143ff604 	addi	r16,r2,-40
  809ef0:	8c20983a 	sll	r16,r17,r16
  809ef4:	002b883a 	mov	r21,zero
  809ef8:	003eb406 	br	8099cc <__alt_data_end+0xff8099cc>
  809efc:	d9800215 	stw	r6,8(sp)
  809f00:	d9c00515 	stw	r7,20(sp)
  809f04:	da000415 	stw	r8,16(sp)
  809f08:	080b7380 	call	80b738 <__clzsi2>
  809f0c:	10800804 	addi	r2,r2,32
  809f10:	da000417 	ldw	r8,16(sp)
  809f14:	d9c00517 	ldw	r7,20(sp)
  809f18:	d9800217 	ldw	r6,8(sp)
  809f1c:	003ea106 	br	8099a4 <__alt_data_end+0xff8099a4>
  809f20:	147ff604 	addi	r17,r2,-40
  809f24:	3462983a 	sll	r17,r6,r17
  809f28:	0029883a 	mov	r20,zero
  809f2c:	003ec906 	br	809a54 <__alt_data_end+0xff809a54>
  809f30:	3009883a 	mov	r4,r6
  809f34:	d9400115 	stw	r5,4(sp)
  809f38:	d9800215 	stw	r6,8(sp)
  809f3c:	da000415 	stw	r8,16(sp)
  809f40:	da400315 	stw	r9,12(sp)
  809f44:	080b7380 	call	80b738 <__clzsi2>
  809f48:	10800804 	addi	r2,r2,32
  809f4c:	da400317 	ldw	r9,12(sp)
  809f50:	da000417 	ldw	r8,16(sp)
  809f54:	d9800217 	ldw	r6,8(sp)
  809f58:	d9400117 	ldw	r5,4(sp)
  809f5c:	003eb306 	br	809a2c <__alt_data_end+0xff809a2c>
  809f60:	d9800017 	ldw	r6,0(sp)
  809f64:	a9ab883a 	add	r21,r21,r6
  809f68:	a98b803a 	cmpltu	r5,r21,r6
  809f6c:	2d8b883a 	add	r5,r5,r22
  809f70:	2a11883a 	add	r8,r5,r8
  809f74:	897fffc4 	addi	r5,r17,-1
  809f78:	b2000c2e 	bgeu	r22,r8,809fac <__divdf3+0x808>
  809f7c:	41003f36 	bltu	r8,r4,80a07c <__divdf3+0x8d8>
  809f80:	22006c26 	beq	r4,r8,80a134 <__divdf3+0x990>
  809f84:	4109c83a 	sub	r4,r8,r4
  809f88:	2823883a 	mov	r17,r5
  809f8c:	003f3b06 	br	809c7c <__alt_data_end+0xff809c7c>
  809f90:	ad3ed336 	bltu	r21,r20,809ae0 <__alt_data_end+0xff809ae0>
  809f94:	a804d07a 	srli	r2,r21,1
  809f98:	802e97fa 	slli	r23,r16,31
  809f9c:	a82a97fa 	slli	r21,r21,31
  809fa0:	8020d07a 	srli	r16,r16,1
  809fa4:	b8aeb03a 	or	r23,r23,r2
  809fa8:	003ed006 	br	809aec <__alt_data_end+0xff809aec>
  809fac:	b23ff51e 	bne	r22,r8,809f84 <__alt_data_end+0xff809f84>
  809fb0:	d9800017 	ldw	r6,0(sp)
  809fb4:	a9bff12e 	bgeu	r21,r6,809f7c <__alt_data_end+0xff809f7c>
  809fb8:	b109c83a 	sub	r4,r22,r4
  809fbc:	2823883a 	mov	r17,r5
  809fc0:	003f2e06 	br	809c7c <__alt_data_end+0xff809c7c>
  809fc4:	2021883a 	mov	r16,r4
  809fc8:	003eff06 	br	809bc8 <__alt_data_end+0xff809bc8>
  809fcc:	2023883a 	mov	r17,r4
  809fd0:	003ee406 	br	809b64 <__alt_data_end+0xff809b64>
  809fd4:	a8bfe236 	bltu	r21,r2,809f60 <__alt_data_end+0xff809f60>
  809fd8:	0009883a 	mov	r4,zero
  809fdc:	003f2706 	br	809c7c <__alt_data_end+0xff809c7c>
  809fe0:	81002d36 	bltu	r16,r4,80a098 <__divdf3+0x8f4>
  809fe4:	24005626 	beq	r4,r16,80a140 <__divdf3+0x99c>
  809fe8:	2829883a 	mov	r20,r5
  809fec:	003f8006 	br	809df0 <__alt_data_end+0xff809df0>
  809ff0:	053fffc4 	movi	r20,-1
  809ff4:	003f7f06 	br	809df4 <__alt_data_end+0xff809df4>
  809ff8:	200f883a 	mov	r7,r4
  809ffc:	003f3c06 	br	809cf0 <__alt_data_end+0xff809cf0>
  80a000:	1011883a 	mov	r8,r2
  80a004:	003f5506 	br	809d5c <__alt_data_end+0xff809d5c>
  80a008:	e027883a 	mov	r19,fp
  80a00c:	003f7906 	br	809df4 <__alt_data_end+0xff809df4>
  80a010:	010007c4 	movi	r4,31
  80a014:	20c02816 	blt	r4,r3,80a0b8 <__divdf3+0x914>
  80a018:	00800804 	movi	r2,32
  80a01c:	10c5c83a 	sub	r2,r2,r3
  80a020:	888a983a 	sll	r5,r17,r2
  80a024:	a0c8d83a 	srl	r4,r20,r3
  80a028:	a084983a 	sll	r2,r20,r2
  80a02c:	88e2d83a 	srl	r17,r17,r3
  80a030:	2906b03a 	or	r3,r5,r4
  80a034:	1004c03a 	cmpne	r2,r2,zero
  80a038:	1886b03a 	or	r3,r3,r2
  80a03c:	188001cc 	andi	r2,r3,7
  80a040:	10000726 	beq	r2,zero,80a060 <__divdf3+0x8bc>
  80a044:	188003cc 	andi	r2,r3,15
  80a048:	01000104 	movi	r4,4
  80a04c:	11000426 	beq	r2,r4,80a060 <__divdf3+0x8bc>
  80a050:	1805883a 	mov	r2,r3
  80a054:	10c00104 	addi	r3,r2,4
  80a058:	1885803a 	cmpltu	r2,r3,r2
  80a05c:	88a3883a 	add	r17,r17,r2
  80a060:	8880202c 	andhi	r2,r17,128
  80a064:	10002926 	beq	r2,zero,80a10c <__divdf3+0x968>
  80a068:	9900004c 	andi	r4,r19,1
  80a06c:	00800044 	movi	r2,1
  80a070:	0021883a 	mov	r16,zero
  80a074:	002b883a 	mov	r21,zero
  80a078:	003e2906 	br	809920 <__alt_data_end+0xff809920>
  80a07c:	d9800017 	ldw	r6,0(sp)
  80a080:	8c7fff84 	addi	r17,r17,-2
  80a084:	a9ab883a 	add	r21,r21,r6
  80a088:	a98b803a 	cmpltu	r5,r21,r6
  80a08c:	2d8b883a 	add	r5,r5,r22
  80a090:	2a11883a 	add	r8,r5,r8
  80a094:	003ef806 	br	809c78 <__alt_data_end+0xff809c78>
  80a098:	d9800017 	ldw	r6,0(sp)
  80a09c:	318f883a 	add	r7,r6,r6
  80a0a0:	398b803a 	cmpltu	r5,r7,r6
  80a0a4:	2d8d883a 	add	r6,r5,r22
  80a0a8:	81a1883a 	add	r16,r16,r6
  80a0ac:	a17fff84 	addi	r5,r20,-2
  80a0b0:	d9c00015 	stw	r7,0(sp)
  80a0b4:	003f8806 	br	809ed8 <__alt_data_end+0xff809ed8>
  80a0b8:	013ff844 	movi	r4,-31
  80a0bc:	2085c83a 	sub	r2,r4,r2
  80a0c0:	8888d83a 	srl	r4,r17,r2
  80a0c4:	00800804 	movi	r2,32
  80a0c8:	18802126 	beq	r3,r2,80a150 <__divdf3+0x9ac>
  80a0cc:	04001004 	movi	r16,64
  80a0d0:	80c7c83a 	sub	r3,r16,r3
  80a0d4:	88e0983a 	sll	r16,r17,r3
  80a0d8:	8504b03a 	or	r2,r16,r20
  80a0dc:	1004c03a 	cmpne	r2,r2,zero
  80a0e0:	2084b03a 	or	r2,r4,r2
  80a0e4:	144001cc 	andi	r17,r2,7
  80a0e8:	88000d1e 	bne	r17,zero,80a120 <__divdf3+0x97c>
  80a0ec:	0021883a 	mov	r16,zero
  80a0f0:	102ad0fa 	srli	r21,r2,3
  80a0f4:	9900004c 	andi	r4,r19,1
  80a0f8:	0005883a 	mov	r2,zero
  80a0fc:	ac6ab03a 	or	r21,r21,r17
  80a100:	003e0706 	br	809920 <__alt_data_end+0xff809920>
  80a104:	1007883a 	mov	r3,r2
  80a108:	0023883a 	mov	r17,zero
  80a10c:	8820927a 	slli	r16,r17,9
  80a110:	1805883a 	mov	r2,r3
  80a114:	8822977a 	slli	r17,r17,29
  80a118:	8020d33a 	srli	r16,r16,12
  80a11c:	003ff406 	br	80a0f0 <__alt_data_end+0xff80a0f0>
  80a120:	10c003cc 	andi	r3,r2,15
  80a124:	01000104 	movi	r4,4
  80a128:	193ff626 	beq	r3,r4,80a104 <__alt_data_end+0xff80a104>
  80a12c:	0023883a 	mov	r17,zero
  80a130:	003fc806 	br	80a054 <__alt_data_end+0xff80a054>
  80a134:	a8bfd136 	bltu	r21,r2,80a07c <__alt_data_end+0xff80a07c>
  80a138:	2823883a 	mov	r17,r5
  80a13c:	003fa606 	br	809fd8 <__alt_data_end+0xff809fd8>
  80a140:	d9800017 	ldw	r6,0(sp)
  80a144:	30bfd436 	bltu	r6,r2,80a098 <__alt_data_end+0xff80a098>
  80a148:	2829883a 	mov	r20,r5
  80a14c:	003f6406 	br	809ee0 <__alt_data_end+0xff809ee0>
  80a150:	0021883a 	mov	r16,zero
  80a154:	003fe006 	br	80a0d8 <__alt_data_end+0xff80a0d8>
  80a158:	00800434 	movhi	r2,16
  80a15c:	8c000234 	orhi	r16,r17,8
  80a160:	10bfffc4 	addi	r2,r2,-1
  80a164:	e009883a 	mov	r4,fp
  80a168:	80a0703a 	and	r16,r16,r2
  80a16c:	a02b883a 	mov	r21,r20
  80a170:	003e4e06 	br	809aac <__alt_data_end+0xff809aac>

0080a174 <__eqdf2>:
  80a174:	2804d53a 	srli	r2,r5,20
  80a178:	3806d53a 	srli	r3,r7,20
  80a17c:	02000434 	movhi	r8,16
  80a180:	423fffc4 	addi	r8,r8,-1
  80a184:	1081ffcc 	andi	r2,r2,2047
  80a188:	0281ffc4 	movi	r10,2047
  80a18c:	2a12703a 	and	r9,r5,r8
  80a190:	18c1ffcc 	andi	r3,r3,2047
  80a194:	3a10703a 	and	r8,r7,r8
  80a198:	280ad7fa 	srli	r5,r5,31
  80a19c:	380ed7fa 	srli	r7,r7,31
  80a1a0:	12801026 	beq	r2,r10,80a1e4 <__eqdf2+0x70>
  80a1a4:	0281ffc4 	movi	r10,2047
  80a1a8:	1a800a26 	beq	r3,r10,80a1d4 <__eqdf2+0x60>
  80a1ac:	10c00226 	beq	r2,r3,80a1b8 <__eqdf2+0x44>
  80a1b0:	00800044 	movi	r2,1
  80a1b4:	f800283a 	ret
  80a1b8:	4a3ffd1e 	bne	r9,r8,80a1b0 <__alt_data_end+0xff80a1b0>
  80a1bc:	21bffc1e 	bne	r4,r6,80a1b0 <__alt_data_end+0xff80a1b0>
  80a1c0:	29c00c26 	beq	r5,r7,80a1f4 <__eqdf2+0x80>
  80a1c4:	103ffa1e 	bne	r2,zero,80a1b0 <__alt_data_end+0xff80a1b0>
  80a1c8:	2244b03a 	or	r2,r4,r9
  80a1cc:	1004c03a 	cmpne	r2,r2,zero
  80a1d0:	f800283a 	ret
  80a1d4:	3214b03a 	or	r10,r6,r8
  80a1d8:	503ff426 	beq	r10,zero,80a1ac <__alt_data_end+0xff80a1ac>
  80a1dc:	00800044 	movi	r2,1
  80a1e0:	f800283a 	ret
  80a1e4:	2254b03a 	or	r10,r4,r9
  80a1e8:	503fee26 	beq	r10,zero,80a1a4 <__alt_data_end+0xff80a1a4>
  80a1ec:	00800044 	movi	r2,1
  80a1f0:	f800283a 	ret
  80a1f4:	0005883a 	mov	r2,zero
  80a1f8:	f800283a 	ret

0080a1fc <__gedf2>:
  80a1fc:	2804d53a 	srli	r2,r5,20
  80a200:	3806d53a 	srli	r3,r7,20
  80a204:	02000434 	movhi	r8,16
  80a208:	423fffc4 	addi	r8,r8,-1
  80a20c:	1081ffcc 	andi	r2,r2,2047
  80a210:	0241ffc4 	movi	r9,2047
  80a214:	2a14703a 	and	r10,r5,r8
  80a218:	18c1ffcc 	andi	r3,r3,2047
  80a21c:	3a10703a 	and	r8,r7,r8
  80a220:	280ad7fa 	srli	r5,r5,31
  80a224:	380ed7fa 	srli	r7,r7,31
  80a228:	12401d26 	beq	r2,r9,80a2a0 <__gedf2+0xa4>
  80a22c:	0241ffc4 	movi	r9,2047
  80a230:	1a401226 	beq	r3,r9,80a27c <__gedf2+0x80>
  80a234:	1000081e 	bne	r2,zero,80a258 <__gedf2+0x5c>
  80a238:	2296b03a 	or	r11,r4,r10
  80a23c:	5813003a 	cmpeq	r9,r11,zero
  80a240:	1800091e 	bne	r3,zero,80a268 <__gedf2+0x6c>
  80a244:	3218b03a 	or	r12,r6,r8
  80a248:	6000071e 	bne	r12,zero,80a268 <__gedf2+0x6c>
  80a24c:	0005883a 	mov	r2,zero
  80a250:	5800101e 	bne	r11,zero,80a294 <__gedf2+0x98>
  80a254:	f800283a 	ret
  80a258:	18000c1e 	bne	r3,zero,80a28c <__gedf2+0x90>
  80a25c:	3212b03a 	or	r9,r6,r8
  80a260:	48000c26 	beq	r9,zero,80a294 <__gedf2+0x98>
  80a264:	0013883a 	mov	r9,zero
  80a268:	39c03fcc 	andi	r7,r7,255
  80a26c:	48000826 	beq	r9,zero,80a290 <__gedf2+0x94>
  80a270:	38000926 	beq	r7,zero,80a298 <__gedf2+0x9c>
  80a274:	00800044 	movi	r2,1
  80a278:	f800283a 	ret
  80a27c:	3212b03a 	or	r9,r6,r8
  80a280:	483fec26 	beq	r9,zero,80a234 <__alt_data_end+0xff80a234>
  80a284:	00bfff84 	movi	r2,-2
  80a288:	f800283a 	ret
  80a28c:	39c03fcc 	andi	r7,r7,255
  80a290:	29c00626 	beq	r5,r7,80a2ac <__gedf2+0xb0>
  80a294:	283ff726 	beq	r5,zero,80a274 <__alt_data_end+0xff80a274>
  80a298:	00bfffc4 	movi	r2,-1
  80a29c:	f800283a 	ret
  80a2a0:	2292b03a 	or	r9,r4,r10
  80a2a4:	483fe126 	beq	r9,zero,80a22c <__alt_data_end+0xff80a22c>
  80a2a8:	003ff606 	br	80a284 <__alt_data_end+0xff80a284>
  80a2ac:	18bff916 	blt	r3,r2,80a294 <__alt_data_end+0xff80a294>
  80a2b0:	10c00316 	blt	r2,r3,80a2c0 <__gedf2+0xc4>
  80a2b4:	42bff736 	bltu	r8,r10,80a294 <__alt_data_end+0xff80a294>
  80a2b8:	52000326 	beq	r10,r8,80a2c8 <__gedf2+0xcc>
  80a2bc:	5200042e 	bgeu	r10,r8,80a2d0 <__gedf2+0xd4>
  80a2c0:	283fec1e 	bne	r5,zero,80a274 <__alt_data_end+0xff80a274>
  80a2c4:	003ff406 	br	80a298 <__alt_data_end+0xff80a298>
  80a2c8:	313ff236 	bltu	r6,r4,80a294 <__alt_data_end+0xff80a294>
  80a2cc:	21bffc36 	bltu	r4,r6,80a2c0 <__alt_data_end+0xff80a2c0>
  80a2d0:	0005883a 	mov	r2,zero
  80a2d4:	f800283a 	ret

0080a2d8 <__ledf2>:
  80a2d8:	2804d53a 	srli	r2,r5,20
  80a2dc:	3810d53a 	srli	r8,r7,20
  80a2e0:	00c00434 	movhi	r3,16
  80a2e4:	18ffffc4 	addi	r3,r3,-1
  80a2e8:	1081ffcc 	andi	r2,r2,2047
  80a2ec:	0241ffc4 	movi	r9,2047
  80a2f0:	28d4703a 	and	r10,r5,r3
  80a2f4:	4201ffcc 	andi	r8,r8,2047
  80a2f8:	38c6703a 	and	r3,r7,r3
  80a2fc:	280ad7fa 	srli	r5,r5,31
  80a300:	380ed7fa 	srli	r7,r7,31
  80a304:	12401f26 	beq	r2,r9,80a384 <__ledf2+0xac>
  80a308:	0241ffc4 	movi	r9,2047
  80a30c:	42401426 	beq	r8,r9,80a360 <__ledf2+0x88>
  80a310:	1000091e 	bne	r2,zero,80a338 <__ledf2+0x60>
  80a314:	2296b03a 	or	r11,r4,r10
  80a318:	5813003a 	cmpeq	r9,r11,zero
  80a31c:	29403fcc 	andi	r5,r5,255
  80a320:	40000a1e 	bne	r8,zero,80a34c <__ledf2+0x74>
  80a324:	30d8b03a 	or	r12,r6,r3
  80a328:	6000081e 	bne	r12,zero,80a34c <__ledf2+0x74>
  80a32c:	0005883a 	mov	r2,zero
  80a330:	5800111e 	bne	r11,zero,80a378 <__ledf2+0xa0>
  80a334:	f800283a 	ret
  80a338:	29403fcc 	andi	r5,r5,255
  80a33c:	40000c1e 	bne	r8,zero,80a370 <__ledf2+0x98>
  80a340:	30d2b03a 	or	r9,r6,r3
  80a344:	48000c26 	beq	r9,zero,80a378 <__ledf2+0xa0>
  80a348:	0013883a 	mov	r9,zero
  80a34c:	39c03fcc 	andi	r7,r7,255
  80a350:	48000826 	beq	r9,zero,80a374 <__ledf2+0x9c>
  80a354:	38001126 	beq	r7,zero,80a39c <__ledf2+0xc4>
  80a358:	00800044 	movi	r2,1
  80a35c:	f800283a 	ret
  80a360:	30d2b03a 	or	r9,r6,r3
  80a364:	483fea26 	beq	r9,zero,80a310 <__alt_data_end+0xff80a310>
  80a368:	00800084 	movi	r2,2
  80a36c:	f800283a 	ret
  80a370:	39c03fcc 	andi	r7,r7,255
  80a374:	39400726 	beq	r7,r5,80a394 <__ledf2+0xbc>
  80a378:	2800081e 	bne	r5,zero,80a39c <__ledf2+0xc4>
  80a37c:	00800044 	movi	r2,1
  80a380:	f800283a 	ret
  80a384:	2292b03a 	or	r9,r4,r10
  80a388:	483fdf26 	beq	r9,zero,80a308 <__alt_data_end+0xff80a308>
  80a38c:	00800084 	movi	r2,2
  80a390:	f800283a 	ret
  80a394:	4080030e 	bge	r8,r2,80a3a4 <__ledf2+0xcc>
  80a398:	383fef26 	beq	r7,zero,80a358 <__alt_data_end+0xff80a358>
  80a39c:	00bfffc4 	movi	r2,-1
  80a3a0:	f800283a 	ret
  80a3a4:	123feb16 	blt	r2,r8,80a354 <__alt_data_end+0xff80a354>
  80a3a8:	1abff336 	bltu	r3,r10,80a378 <__alt_data_end+0xff80a378>
  80a3ac:	50c00326 	beq	r10,r3,80a3bc <__ledf2+0xe4>
  80a3b0:	50c0042e 	bgeu	r10,r3,80a3c4 <__ledf2+0xec>
  80a3b4:	283fe81e 	bne	r5,zero,80a358 <__alt_data_end+0xff80a358>
  80a3b8:	003ff806 	br	80a39c <__alt_data_end+0xff80a39c>
  80a3bc:	313fee36 	bltu	r6,r4,80a378 <__alt_data_end+0xff80a378>
  80a3c0:	21bffc36 	bltu	r4,r6,80a3b4 <__alt_data_end+0xff80a3b4>
  80a3c4:	0005883a 	mov	r2,zero
  80a3c8:	f800283a 	ret

0080a3cc <__muldf3>:
  80a3cc:	deffee04 	addi	sp,sp,-72
  80a3d0:	dd000c15 	stw	r20,48(sp)
  80a3d4:	2828d53a 	srli	r20,r5,20
  80a3d8:	ddc00f15 	stw	r23,60(sp)
  80a3dc:	282ed7fa 	srli	r23,r5,31
  80a3e0:	dc000815 	stw	r16,32(sp)
  80a3e4:	04000434 	movhi	r16,16
  80a3e8:	dcc00b15 	stw	r19,44(sp)
  80a3ec:	843fffc4 	addi	r16,r16,-1
  80a3f0:	dfc01115 	stw	ra,68(sp)
  80a3f4:	df001015 	stw	fp,64(sp)
  80a3f8:	dd800e15 	stw	r22,56(sp)
  80a3fc:	dd400d15 	stw	r21,52(sp)
  80a400:	dc800a15 	stw	r18,40(sp)
  80a404:	dc400915 	stw	r17,36(sp)
  80a408:	a501ffcc 	andi	r20,r20,2047
  80a40c:	2c20703a 	and	r16,r5,r16
  80a410:	b827883a 	mov	r19,r23
  80a414:	ba403fcc 	andi	r9,r23,255
  80a418:	a0006026 	beq	r20,zero,80a59c <__muldf3+0x1d0>
  80a41c:	0081ffc4 	movi	r2,2047
  80a420:	202d883a 	mov	r22,r4
  80a424:	a0803626 	beq	r20,r2,80a500 <__muldf3+0x134>
  80a428:	84000434 	orhi	r16,r16,16
  80a42c:	200ad77a 	srli	r5,r4,29
  80a430:	800490fa 	slli	r2,r16,3
  80a434:	202c90fa 	slli	r22,r4,3
  80a438:	a53f0044 	addi	r20,r20,-1023
  80a43c:	28a0b03a 	or	r16,r5,r2
  80a440:	002b883a 	mov	r21,zero
  80a444:	000b883a 	mov	r5,zero
  80a448:	3804d53a 	srli	r2,r7,20
  80a44c:	3838d7fa 	srli	fp,r7,31
  80a450:	04400434 	movhi	r17,16
  80a454:	8c7fffc4 	addi	r17,r17,-1
  80a458:	1081ffcc 	andi	r2,r2,2047
  80a45c:	3025883a 	mov	r18,r6
  80a460:	3c62703a 	and	r17,r7,r17
  80a464:	e2803fcc 	andi	r10,fp,255
  80a468:	10006d26 	beq	r2,zero,80a620 <__muldf3+0x254>
  80a46c:	00c1ffc4 	movi	r3,2047
  80a470:	10c06526 	beq	r2,r3,80a608 <__muldf3+0x23c>
  80a474:	8c400434 	orhi	r17,r17,16
  80a478:	300ed77a 	srli	r7,r6,29
  80a47c:	880690fa 	slli	r3,r17,3
  80a480:	302490fa 	slli	r18,r6,3
  80a484:	10bf0044 	addi	r2,r2,-1023
  80a488:	38e2b03a 	or	r17,r7,r3
  80a48c:	000f883a 	mov	r7,zero
  80a490:	a087883a 	add	r3,r20,r2
  80a494:	010003c4 	movi	r4,15
  80a498:	3d44b03a 	or	r2,r7,r21
  80a49c:	e5ccf03a 	xor	r6,fp,r23
  80a4a0:	1a000044 	addi	r8,r3,1
  80a4a4:	20809b36 	bltu	r4,r2,80a714 <__muldf3+0x348>
  80a4a8:	100490ba 	slli	r2,r2,2
  80a4ac:	01002074 	movhi	r4,129
  80a4b0:	21293004 	addi	r4,r4,-23360
  80a4b4:	1105883a 	add	r2,r2,r4
  80a4b8:	10800017 	ldw	r2,0(r2)
  80a4bc:	1000683a 	jmp	r2
  80a4c0:	0080a714 	movui	r2,668
  80a4c4:	0080a520 	cmpeqi	r2,zero,660
  80a4c8:	0080a520 	cmpeqi	r2,zero,660
  80a4cc:	0080a51c 	xori	r2,zero,660
  80a4d0:	0080a6f0 	cmpltui	r2,zero,667
  80a4d4:	0080a6f0 	cmpltui	r2,zero,667
  80a4d8:	0080a6d8 	cmpnei	r2,zero,667
  80a4dc:	0080a51c 	xori	r2,zero,660
  80a4e0:	0080a6f0 	cmpltui	r2,zero,667
  80a4e4:	0080a6d8 	cmpnei	r2,zero,667
  80a4e8:	0080a6f0 	cmpltui	r2,zero,667
  80a4ec:	0080a51c 	xori	r2,zero,660
  80a4f0:	0080a700 	call	80a70 <__alt_mem_sdram-0x77f590>
  80a4f4:	0080a700 	call	80a70 <__alt_mem_sdram-0x77f590>
  80a4f8:	0080a700 	call	80a70 <__alt_mem_sdram-0x77f590>
  80a4fc:	0080aa60 	cmpeqi	r2,zero,681
  80a500:	2404b03a 	or	r2,r4,r16
  80a504:	1000711e 	bne	r2,zero,80a6cc <__muldf3+0x300>
  80a508:	05400204 	movi	r21,8
  80a50c:	0021883a 	mov	r16,zero
  80a510:	002d883a 	mov	r22,zero
  80a514:	01400084 	movi	r5,2
  80a518:	003fcb06 	br	80a448 <__alt_data_end+0xff80a448>
  80a51c:	500d883a 	mov	r6,r10
  80a520:	00800084 	movi	r2,2
  80a524:	38805926 	beq	r7,r2,80a68c <__muldf3+0x2c0>
  80a528:	008000c4 	movi	r2,3
  80a52c:	3881bb26 	beq	r7,r2,80ac1c <__muldf3+0x850>
  80a530:	00800044 	movi	r2,1
  80a534:	3881961e 	bne	r7,r2,80ab90 <__muldf3+0x7c4>
  80a538:	3027883a 	mov	r19,r6
  80a53c:	0005883a 	mov	r2,zero
  80a540:	0021883a 	mov	r16,zero
  80a544:	002d883a 	mov	r22,zero
  80a548:	1004953a 	slli	r2,r2,20
  80a54c:	98c03fcc 	andi	r3,r19,255
  80a550:	04400434 	movhi	r17,16
  80a554:	8c7fffc4 	addi	r17,r17,-1
  80a558:	180697fa 	slli	r3,r3,31
  80a55c:	8460703a 	and	r16,r16,r17
  80a560:	80a0b03a 	or	r16,r16,r2
  80a564:	80c6b03a 	or	r3,r16,r3
  80a568:	b005883a 	mov	r2,r22
  80a56c:	dfc01117 	ldw	ra,68(sp)
  80a570:	df001017 	ldw	fp,64(sp)
  80a574:	ddc00f17 	ldw	r23,60(sp)
  80a578:	dd800e17 	ldw	r22,56(sp)
  80a57c:	dd400d17 	ldw	r21,52(sp)
  80a580:	dd000c17 	ldw	r20,48(sp)
  80a584:	dcc00b17 	ldw	r19,44(sp)
  80a588:	dc800a17 	ldw	r18,40(sp)
  80a58c:	dc400917 	ldw	r17,36(sp)
  80a590:	dc000817 	ldw	r16,32(sp)
  80a594:	dec01204 	addi	sp,sp,72
  80a598:	f800283a 	ret
  80a59c:	2404b03a 	or	r2,r4,r16
  80a5a0:	202b883a 	mov	r21,r4
  80a5a4:	10004426 	beq	r2,zero,80a6b8 <__muldf3+0x2ec>
  80a5a8:	80015126 	beq	r16,zero,80aaf0 <__muldf3+0x724>
  80a5ac:	8009883a 	mov	r4,r16
  80a5b0:	d9800715 	stw	r6,28(sp)
  80a5b4:	d9c00215 	stw	r7,8(sp)
  80a5b8:	da400415 	stw	r9,16(sp)
  80a5bc:	080b7380 	call	80b738 <__clzsi2>
  80a5c0:	d9800717 	ldw	r6,28(sp)
  80a5c4:	d9c00217 	ldw	r7,8(sp)
  80a5c8:	da400417 	ldw	r9,16(sp)
  80a5cc:	113ffd44 	addi	r4,r2,-11
  80a5d0:	00c00704 	movi	r3,28
  80a5d4:	19014216 	blt	r3,r4,80aae0 <__muldf3+0x714>
  80a5d8:	00c00744 	movi	r3,29
  80a5dc:	15bffe04 	addi	r22,r2,-8
  80a5e0:	1907c83a 	sub	r3,r3,r4
  80a5e4:	85a0983a 	sll	r16,r16,r22
  80a5e8:	a8c6d83a 	srl	r3,r21,r3
  80a5ec:	adac983a 	sll	r22,r21,r22
  80a5f0:	1c20b03a 	or	r16,r3,r16
  80a5f4:	1080fcc4 	addi	r2,r2,1011
  80a5f8:	00a9c83a 	sub	r20,zero,r2
  80a5fc:	002b883a 	mov	r21,zero
  80a600:	000b883a 	mov	r5,zero
  80a604:	003f9006 	br	80a448 <__alt_data_end+0xff80a448>
  80a608:	3446b03a 	or	r3,r6,r17
  80a60c:	1800281e 	bne	r3,zero,80a6b0 <__muldf3+0x2e4>
  80a610:	0023883a 	mov	r17,zero
  80a614:	0025883a 	mov	r18,zero
  80a618:	01c00084 	movi	r7,2
  80a61c:	003f9c06 	br	80a490 <__alt_data_end+0xff80a490>
  80a620:	3446b03a 	or	r3,r6,r17
  80a624:	18001e26 	beq	r3,zero,80a6a0 <__muldf3+0x2d4>
  80a628:	88012126 	beq	r17,zero,80aab0 <__muldf3+0x6e4>
  80a62c:	8809883a 	mov	r4,r17
  80a630:	d9400215 	stw	r5,8(sp)
  80a634:	d9800715 	stw	r6,28(sp)
  80a638:	da400415 	stw	r9,16(sp)
  80a63c:	da800315 	stw	r10,12(sp)
  80a640:	080b7380 	call	80b738 <__clzsi2>
  80a644:	d9400217 	ldw	r5,8(sp)
  80a648:	d9800717 	ldw	r6,28(sp)
  80a64c:	da400417 	ldw	r9,16(sp)
  80a650:	da800317 	ldw	r10,12(sp)
  80a654:	113ffd44 	addi	r4,r2,-11
  80a658:	00c00704 	movi	r3,28
  80a65c:	19011016 	blt	r3,r4,80aaa0 <__muldf3+0x6d4>
  80a660:	00c00744 	movi	r3,29
  80a664:	14bffe04 	addi	r18,r2,-8
  80a668:	1907c83a 	sub	r3,r3,r4
  80a66c:	8ca2983a 	sll	r17,r17,r18
  80a670:	30c6d83a 	srl	r3,r6,r3
  80a674:	34a4983a 	sll	r18,r6,r18
  80a678:	1c62b03a 	or	r17,r3,r17
  80a67c:	1080fcc4 	addi	r2,r2,1011
  80a680:	0085c83a 	sub	r2,zero,r2
  80a684:	000f883a 	mov	r7,zero
  80a688:	003f8106 	br	80a490 <__alt_data_end+0xff80a490>
  80a68c:	3027883a 	mov	r19,r6
  80a690:	0081ffc4 	movi	r2,2047
  80a694:	0021883a 	mov	r16,zero
  80a698:	002d883a 	mov	r22,zero
  80a69c:	003faa06 	br	80a548 <__alt_data_end+0xff80a548>
  80a6a0:	0023883a 	mov	r17,zero
  80a6a4:	0025883a 	mov	r18,zero
  80a6a8:	01c00044 	movi	r7,1
  80a6ac:	003f7806 	br	80a490 <__alt_data_end+0xff80a490>
  80a6b0:	01c000c4 	movi	r7,3
  80a6b4:	003f7606 	br	80a490 <__alt_data_end+0xff80a490>
  80a6b8:	05400104 	movi	r21,4
  80a6bc:	0021883a 	mov	r16,zero
  80a6c0:	002d883a 	mov	r22,zero
  80a6c4:	01400044 	movi	r5,1
  80a6c8:	003f5f06 	br	80a448 <__alt_data_end+0xff80a448>
  80a6cc:	05400304 	movi	r21,12
  80a6d0:	014000c4 	movi	r5,3
  80a6d4:	003f5c06 	br	80a448 <__alt_data_end+0xff80a448>
  80a6d8:	04000434 	movhi	r16,16
  80a6dc:	0027883a 	mov	r19,zero
  80a6e0:	843fffc4 	addi	r16,r16,-1
  80a6e4:	05bfffc4 	movi	r22,-1
  80a6e8:	0081ffc4 	movi	r2,2047
  80a6ec:	003f9606 	br	80a548 <__alt_data_end+0xff80a548>
  80a6f0:	8023883a 	mov	r17,r16
  80a6f4:	b025883a 	mov	r18,r22
  80a6f8:	280f883a 	mov	r7,r5
  80a6fc:	003f8806 	br	80a520 <__alt_data_end+0xff80a520>
  80a700:	8023883a 	mov	r17,r16
  80a704:	b025883a 	mov	r18,r22
  80a708:	480d883a 	mov	r6,r9
  80a70c:	280f883a 	mov	r7,r5
  80a710:	003f8306 	br	80a520 <__alt_data_end+0xff80a520>
  80a714:	b026d43a 	srli	r19,r22,16
  80a718:	902ed43a 	srli	r23,r18,16
  80a71c:	b5bfffcc 	andi	r22,r22,65535
  80a720:	94bfffcc 	andi	r18,r18,65535
  80a724:	b00b883a 	mov	r5,r22
  80a728:	9009883a 	mov	r4,r18
  80a72c:	d8c00515 	stw	r3,20(sp)
  80a730:	d9800715 	stw	r6,28(sp)
  80a734:	da000615 	stw	r8,24(sp)
  80a738:	0808ed00 	call	808ed0 <__mulsi3>
  80a73c:	980b883a 	mov	r5,r19
  80a740:	9009883a 	mov	r4,r18
  80a744:	1029883a 	mov	r20,r2
  80a748:	0808ed00 	call	808ed0 <__mulsi3>
  80a74c:	b80b883a 	mov	r5,r23
  80a750:	9809883a 	mov	r4,r19
  80a754:	102b883a 	mov	r21,r2
  80a758:	0808ed00 	call	808ed0 <__mulsi3>
  80a75c:	b809883a 	mov	r4,r23
  80a760:	b00b883a 	mov	r5,r22
  80a764:	1039883a 	mov	fp,r2
  80a768:	0808ed00 	call	808ed0 <__mulsi3>
  80a76c:	a008d43a 	srli	r4,r20,16
  80a770:	1545883a 	add	r2,r2,r21
  80a774:	d8c00517 	ldw	r3,20(sp)
  80a778:	2085883a 	add	r2,r4,r2
  80a77c:	d9800717 	ldw	r6,28(sp)
  80a780:	da000617 	ldw	r8,24(sp)
  80a784:	1540022e 	bgeu	r2,r21,80a790 <__muldf3+0x3c4>
  80a788:	01000074 	movhi	r4,1
  80a78c:	e139883a 	add	fp,fp,r4
  80a790:	100e943a 	slli	r7,r2,16
  80a794:	1004d43a 	srli	r2,r2,16
  80a798:	882ad43a 	srli	r21,r17,16
  80a79c:	a53fffcc 	andi	r20,r20,65535
  80a7a0:	8c7fffcc 	andi	r17,r17,65535
  80a7a4:	3d29883a 	add	r20,r7,r20
  80a7a8:	b00b883a 	mov	r5,r22
  80a7ac:	8809883a 	mov	r4,r17
  80a7b0:	d8c00515 	stw	r3,20(sp)
  80a7b4:	d9800715 	stw	r6,28(sp)
  80a7b8:	da000615 	stw	r8,24(sp)
  80a7bc:	dd000115 	stw	r20,4(sp)
  80a7c0:	d8800015 	stw	r2,0(sp)
  80a7c4:	0808ed00 	call	808ed0 <__mulsi3>
  80a7c8:	980b883a 	mov	r5,r19
  80a7cc:	8809883a 	mov	r4,r17
  80a7d0:	d8800215 	stw	r2,8(sp)
  80a7d4:	0808ed00 	call	808ed0 <__mulsi3>
  80a7d8:	9809883a 	mov	r4,r19
  80a7dc:	a80b883a 	mov	r5,r21
  80a7e0:	1029883a 	mov	r20,r2
  80a7e4:	0808ed00 	call	808ed0 <__mulsi3>
  80a7e8:	b00b883a 	mov	r5,r22
  80a7ec:	a809883a 	mov	r4,r21
  80a7f0:	d8800415 	stw	r2,16(sp)
  80a7f4:	0808ed00 	call	808ed0 <__mulsi3>
  80a7f8:	d9c00217 	ldw	r7,8(sp)
  80a7fc:	1505883a 	add	r2,r2,r20
  80a800:	d8c00517 	ldw	r3,20(sp)
  80a804:	3826d43a 	srli	r19,r7,16
  80a808:	d9800717 	ldw	r6,28(sp)
  80a80c:	da000617 	ldw	r8,24(sp)
  80a810:	9885883a 	add	r2,r19,r2
  80a814:	da400417 	ldw	r9,16(sp)
  80a818:	1500022e 	bgeu	r2,r20,80a824 <__muldf3+0x458>
  80a81c:	01000074 	movhi	r4,1
  80a820:	4913883a 	add	r9,r9,r4
  80a824:	1028d43a 	srli	r20,r2,16
  80a828:	1004943a 	slli	r2,r2,16
  80a82c:	802cd43a 	srli	r22,r16,16
  80a830:	843fffcc 	andi	r16,r16,65535
  80a834:	3cffffcc 	andi	r19,r7,65535
  80a838:	9009883a 	mov	r4,r18
  80a83c:	800b883a 	mov	r5,r16
  80a840:	a269883a 	add	r20,r20,r9
  80a844:	d8c00515 	stw	r3,20(sp)
  80a848:	d9800715 	stw	r6,28(sp)
  80a84c:	da000615 	stw	r8,24(sp)
  80a850:	14e7883a 	add	r19,r2,r19
  80a854:	0808ed00 	call	808ed0 <__mulsi3>
  80a858:	9009883a 	mov	r4,r18
  80a85c:	b00b883a 	mov	r5,r22
  80a860:	d8800315 	stw	r2,12(sp)
  80a864:	0808ed00 	call	808ed0 <__mulsi3>
  80a868:	b809883a 	mov	r4,r23
  80a86c:	b00b883a 	mov	r5,r22
  80a870:	d8800215 	stw	r2,8(sp)
  80a874:	0808ed00 	call	808ed0 <__mulsi3>
  80a878:	b80b883a 	mov	r5,r23
  80a87c:	8009883a 	mov	r4,r16
  80a880:	d8800415 	stw	r2,16(sp)
  80a884:	0808ed00 	call	808ed0 <__mulsi3>
  80a888:	da800317 	ldw	r10,12(sp)
  80a88c:	d9c00217 	ldw	r7,8(sp)
  80a890:	d9000017 	ldw	r4,0(sp)
  80a894:	502ed43a 	srli	r23,r10,16
  80a898:	11c5883a 	add	r2,r2,r7
  80a89c:	24e5883a 	add	r18,r4,r19
  80a8a0:	b885883a 	add	r2,r23,r2
  80a8a4:	d8c00517 	ldw	r3,20(sp)
  80a8a8:	d9800717 	ldw	r6,28(sp)
  80a8ac:	da000617 	ldw	r8,24(sp)
  80a8b0:	da400417 	ldw	r9,16(sp)
  80a8b4:	11c0022e 	bgeu	r2,r7,80a8c0 <__muldf3+0x4f4>
  80a8b8:	01000074 	movhi	r4,1
  80a8bc:	4913883a 	add	r9,r9,r4
  80a8c0:	100ed43a 	srli	r7,r2,16
  80a8c4:	1004943a 	slli	r2,r2,16
  80a8c8:	55ffffcc 	andi	r23,r10,65535
  80a8cc:	3a53883a 	add	r9,r7,r9
  80a8d0:	8809883a 	mov	r4,r17
  80a8d4:	800b883a 	mov	r5,r16
  80a8d8:	d8c00515 	stw	r3,20(sp)
  80a8dc:	d9800715 	stw	r6,28(sp)
  80a8e0:	da000615 	stw	r8,24(sp)
  80a8e4:	da400415 	stw	r9,16(sp)
  80a8e8:	15ef883a 	add	r23,r2,r23
  80a8ec:	0808ed00 	call	808ed0 <__mulsi3>
  80a8f0:	8809883a 	mov	r4,r17
  80a8f4:	b00b883a 	mov	r5,r22
  80a8f8:	d8800215 	stw	r2,8(sp)
  80a8fc:	0808ed00 	call	808ed0 <__mulsi3>
  80a900:	b00b883a 	mov	r5,r22
  80a904:	a809883a 	mov	r4,r21
  80a908:	d8800315 	stw	r2,12(sp)
  80a90c:	0808ed00 	call	808ed0 <__mulsi3>
  80a910:	8009883a 	mov	r4,r16
  80a914:	a80b883a 	mov	r5,r21
  80a918:	1023883a 	mov	r17,r2
  80a91c:	0808ed00 	call	808ed0 <__mulsi3>
  80a920:	d9c00217 	ldw	r7,8(sp)
  80a924:	da800317 	ldw	r10,12(sp)
  80a928:	d8c00517 	ldw	r3,20(sp)
  80a92c:	3808d43a 	srli	r4,r7,16
  80a930:	1285883a 	add	r2,r2,r10
  80a934:	d9800717 	ldw	r6,28(sp)
  80a938:	2085883a 	add	r2,r4,r2
  80a93c:	da000617 	ldw	r8,24(sp)
  80a940:	da400417 	ldw	r9,16(sp)
  80a944:	1280022e 	bgeu	r2,r10,80a950 <__muldf3+0x584>
  80a948:	01000074 	movhi	r4,1
  80a94c:	8923883a 	add	r17,r17,r4
  80a950:	1008943a 	slli	r4,r2,16
  80a954:	39ffffcc 	andi	r7,r7,65535
  80a958:	e4b9883a 	add	fp,fp,r18
  80a95c:	21cf883a 	add	r7,r4,r7
  80a960:	e4e7803a 	cmpltu	r19,fp,r19
  80a964:	3d0f883a 	add	r7,r7,r20
  80a968:	bf39883a 	add	fp,r23,fp
  80a96c:	99c9883a 	add	r4,r19,r7
  80a970:	e5ef803a 	cmpltu	r23,fp,r23
  80a974:	490b883a 	add	r5,r9,r4
  80a978:	1004d43a 	srli	r2,r2,16
  80a97c:	b965883a 	add	r18,r23,r5
  80a980:	24c9803a 	cmpltu	r4,r4,r19
  80a984:	3d29803a 	cmpltu	r20,r7,r20
  80a988:	a128b03a 	or	r20,r20,r4
  80a98c:	95ef803a 	cmpltu	r23,r18,r23
  80a990:	2a53803a 	cmpltu	r9,r5,r9
  80a994:	a0a9883a 	add	r20,r20,r2
  80a998:	4deeb03a 	or	r23,r9,r23
  80a99c:	a5ef883a 	add	r23,r20,r23
  80a9a0:	bc63883a 	add	r17,r23,r17
  80a9a4:	e004927a 	slli	r2,fp,9
  80a9a8:	d9000117 	ldw	r4,4(sp)
  80a9ac:	882e927a 	slli	r23,r17,9
  80a9b0:	9022d5fa 	srli	r17,r18,23
  80a9b4:	e038d5fa 	srli	fp,fp,23
  80a9b8:	1104b03a 	or	r2,r2,r4
  80a9bc:	9024927a 	slli	r18,r18,9
  80a9c0:	1004c03a 	cmpne	r2,r2,zero
  80a9c4:	bc62b03a 	or	r17,r23,r17
  80a9c8:	1738b03a 	or	fp,r2,fp
  80a9cc:	8880402c 	andhi	r2,r17,256
  80a9d0:	e4a4b03a 	or	r18,fp,r18
  80a9d4:	10000726 	beq	r2,zero,80a9f4 <__muldf3+0x628>
  80a9d8:	9006d07a 	srli	r3,r18,1
  80a9dc:	880497fa 	slli	r2,r17,31
  80a9e0:	9480004c 	andi	r18,r18,1
  80a9e4:	8822d07a 	srli	r17,r17,1
  80a9e8:	1ca4b03a 	or	r18,r3,r18
  80a9ec:	14a4b03a 	or	r18,r2,r18
  80a9f0:	4007883a 	mov	r3,r8
  80a9f4:	1880ffc4 	addi	r2,r3,1023
  80a9f8:	0080460e 	bge	zero,r2,80ab14 <__muldf3+0x748>
  80a9fc:	910001cc 	andi	r4,r18,7
  80aa00:	20000726 	beq	r4,zero,80aa20 <__muldf3+0x654>
  80aa04:	910003cc 	andi	r4,r18,15
  80aa08:	01400104 	movi	r5,4
  80aa0c:	21400426 	beq	r4,r5,80aa20 <__muldf3+0x654>
  80aa10:	9149883a 	add	r4,r18,r5
  80aa14:	24a5803a 	cmpltu	r18,r4,r18
  80aa18:	8ca3883a 	add	r17,r17,r18
  80aa1c:	2025883a 	mov	r18,r4
  80aa20:	8900402c 	andhi	r4,r17,256
  80aa24:	20000426 	beq	r4,zero,80aa38 <__muldf3+0x66c>
  80aa28:	18810004 	addi	r2,r3,1024
  80aa2c:	00ffc034 	movhi	r3,65280
  80aa30:	18ffffc4 	addi	r3,r3,-1
  80aa34:	88e2703a 	and	r17,r17,r3
  80aa38:	00c1ff84 	movi	r3,2046
  80aa3c:	18bf1316 	blt	r3,r2,80a68c <__alt_data_end+0xff80a68c>
  80aa40:	882c977a 	slli	r22,r17,29
  80aa44:	9024d0fa 	srli	r18,r18,3
  80aa48:	8822927a 	slli	r17,r17,9
  80aa4c:	1081ffcc 	andi	r2,r2,2047
  80aa50:	b4acb03a 	or	r22,r22,r18
  80aa54:	8820d33a 	srli	r16,r17,12
  80aa58:	3027883a 	mov	r19,r6
  80aa5c:	003eba06 	br	80a548 <__alt_data_end+0xff80a548>
  80aa60:	8080022c 	andhi	r2,r16,8
  80aa64:	10000926 	beq	r2,zero,80aa8c <__muldf3+0x6c0>
  80aa68:	8880022c 	andhi	r2,r17,8
  80aa6c:	1000071e 	bne	r2,zero,80aa8c <__muldf3+0x6c0>
  80aa70:	00800434 	movhi	r2,16
  80aa74:	8c000234 	orhi	r16,r17,8
  80aa78:	10bfffc4 	addi	r2,r2,-1
  80aa7c:	e027883a 	mov	r19,fp
  80aa80:	80a0703a 	and	r16,r16,r2
  80aa84:	902d883a 	mov	r22,r18
  80aa88:	003f1706 	br	80a6e8 <__alt_data_end+0xff80a6e8>
  80aa8c:	00800434 	movhi	r2,16
  80aa90:	84000234 	orhi	r16,r16,8
  80aa94:	10bfffc4 	addi	r2,r2,-1
  80aa98:	80a0703a 	and	r16,r16,r2
  80aa9c:	003f1206 	br	80a6e8 <__alt_data_end+0xff80a6e8>
  80aaa0:	147ff604 	addi	r17,r2,-40
  80aaa4:	3462983a 	sll	r17,r6,r17
  80aaa8:	0025883a 	mov	r18,zero
  80aaac:	003ef306 	br	80a67c <__alt_data_end+0xff80a67c>
  80aab0:	3009883a 	mov	r4,r6
  80aab4:	d9400215 	stw	r5,8(sp)
  80aab8:	d9800715 	stw	r6,28(sp)
  80aabc:	da400415 	stw	r9,16(sp)
  80aac0:	da800315 	stw	r10,12(sp)
  80aac4:	080b7380 	call	80b738 <__clzsi2>
  80aac8:	10800804 	addi	r2,r2,32
  80aacc:	da800317 	ldw	r10,12(sp)
  80aad0:	da400417 	ldw	r9,16(sp)
  80aad4:	d9800717 	ldw	r6,28(sp)
  80aad8:	d9400217 	ldw	r5,8(sp)
  80aadc:	003edd06 	br	80a654 <__alt_data_end+0xff80a654>
  80aae0:	143ff604 	addi	r16,r2,-40
  80aae4:	ac20983a 	sll	r16,r21,r16
  80aae8:	002d883a 	mov	r22,zero
  80aaec:	003ec106 	br	80a5f4 <__alt_data_end+0xff80a5f4>
  80aaf0:	d9800715 	stw	r6,28(sp)
  80aaf4:	d9c00215 	stw	r7,8(sp)
  80aaf8:	da400415 	stw	r9,16(sp)
  80aafc:	080b7380 	call	80b738 <__clzsi2>
  80ab00:	10800804 	addi	r2,r2,32
  80ab04:	da400417 	ldw	r9,16(sp)
  80ab08:	d9c00217 	ldw	r7,8(sp)
  80ab0c:	d9800717 	ldw	r6,28(sp)
  80ab10:	003eae06 	br	80a5cc <__alt_data_end+0xff80a5cc>
  80ab14:	00c00044 	movi	r3,1
  80ab18:	1887c83a 	sub	r3,r3,r2
  80ab1c:	01000e04 	movi	r4,56
  80ab20:	20fe8516 	blt	r4,r3,80a538 <__alt_data_end+0xff80a538>
  80ab24:	010007c4 	movi	r4,31
  80ab28:	20c01b16 	blt	r4,r3,80ab98 <__muldf3+0x7cc>
  80ab2c:	00800804 	movi	r2,32
  80ab30:	10c5c83a 	sub	r2,r2,r3
  80ab34:	888a983a 	sll	r5,r17,r2
  80ab38:	90c8d83a 	srl	r4,r18,r3
  80ab3c:	9084983a 	sll	r2,r18,r2
  80ab40:	88e2d83a 	srl	r17,r17,r3
  80ab44:	2906b03a 	or	r3,r5,r4
  80ab48:	1004c03a 	cmpne	r2,r2,zero
  80ab4c:	1886b03a 	or	r3,r3,r2
  80ab50:	188001cc 	andi	r2,r3,7
  80ab54:	10000726 	beq	r2,zero,80ab74 <__muldf3+0x7a8>
  80ab58:	188003cc 	andi	r2,r3,15
  80ab5c:	01000104 	movi	r4,4
  80ab60:	11000426 	beq	r2,r4,80ab74 <__muldf3+0x7a8>
  80ab64:	1805883a 	mov	r2,r3
  80ab68:	10c00104 	addi	r3,r2,4
  80ab6c:	1885803a 	cmpltu	r2,r3,r2
  80ab70:	88a3883a 	add	r17,r17,r2
  80ab74:	8880202c 	andhi	r2,r17,128
  80ab78:	10001c26 	beq	r2,zero,80abec <__muldf3+0x820>
  80ab7c:	3027883a 	mov	r19,r6
  80ab80:	00800044 	movi	r2,1
  80ab84:	0021883a 	mov	r16,zero
  80ab88:	002d883a 	mov	r22,zero
  80ab8c:	003e6e06 	br	80a548 <__alt_data_end+0xff80a548>
  80ab90:	4007883a 	mov	r3,r8
  80ab94:	003f9706 	br	80a9f4 <__alt_data_end+0xff80a9f4>
  80ab98:	017ff844 	movi	r5,-31
  80ab9c:	2885c83a 	sub	r2,r5,r2
  80aba0:	888ad83a 	srl	r5,r17,r2
  80aba4:	00800804 	movi	r2,32
  80aba8:	18801a26 	beq	r3,r2,80ac14 <__muldf3+0x848>
  80abac:	01001004 	movi	r4,64
  80abb0:	20c7c83a 	sub	r3,r4,r3
  80abb4:	88e2983a 	sll	r17,r17,r3
  80abb8:	8ca4b03a 	or	r18,r17,r18
  80abbc:	9004c03a 	cmpne	r2,r18,zero
  80abc0:	2884b03a 	or	r2,r5,r2
  80abc4:	144001cc 	andi	r17,r2,7
  80abc8:	88000d1e 	bne	r17,zero,80ac00 <__muldf3+0x834>
  80abcc:	0021883a 	mov	r16,zero
  80abd0:	102cd0fa 	srli	r22,r2,3
  80abd4:	3027883a 	mov	r19,r6
  80abd8:	0005883a 	mov	r2,zero
  80abdc:	b46cb03a 	or	r22,r22,r17
  80abe0:	003e5906 	br	80a548 <__alt_data_end+0xff80a548>
  80abe4:	1007883a 	mov	r3,r2
  80abe8:	0023883a 	mov	r17,zero
  80abec:	8820927a 	slli	r16,r17,9
  80abf0:	1805883a 	mov	r2,r3
  80abf4:	8822977a 	slli	r17,r17,29
  80abf8:	8020d33a 	srli	r16,r16,12
  80abfc:	003ff406 	br	80abd0 <__alt_data_end+0xff80abd0>
  80ac00:	10c003cc 	andi	r3,r2,15
  80ac04:	01000104 	movi	r4,4
  80ac08:	193ff626 	beq	r3,r4,80abe4 <__alt_data_end+0xff80abe4>
  80ac0c:	0023883a 	mov	r17,zero
  80ac10:	003fd506 	br	80ab68 <__alt_data_end+0xff80ab68>
  80ac14:	0023883a 	mov	r17,zero
  80ac18:	003fe706 	br	80abb8 <__alt_data_end+0xff80abb8>
  80ac1c:	00800434 	movhi	r2,16
  80ac20:	8c000234 	orhi	r16,r17,8
  80ac24:	10bfffc4 	addi	r2,r2,-1
  80ac28:	3027883a 	mov	r19,r6
  80ac2c:	80a0703a 	and	r16,r16,r2
  80ac30:	902d883a 	mov	r22,r18
  80ac34:	003eac06 	br	80a6e8 <__alt_data_end+0xff80a6e8>

0080ac38 <__subdf3>:
  80ac38:	02000434 	movhi	r8,16
  80ac3c:	423fffc4 	addi	r8,r8,-1
  80ac40:	defffb04 	addi	sp,sp,-20
  80ac44:	2a14703a 	and	r10,r5,r8
  80ac48:	3812d53a 	srli	r9,r7,20
  80ac4c:	3a10703a 	and	r8,r7,r8
  80ac50:	2006d77a 	srli	r3,r4,29
  80ac54:	3004d77a 	srli	r2,r6,29
  80ac58:	dc000015 	stw	r16,0(sp)
  80ac5c:	501490fa 	slli	r10,r10,3
  80ac60:	2820d53a 	srli	r16,r5,20
  80ac64:	401090fa 	slli	r8,r8,3
  80ac68:	dc800215 	stw	r18,8(sp)
  80ac6c:	dc400115 	stw	r17,4(sp)
  80ac70:	dfc00415 	stw	ra,16(sp)
  80ac74:	202290fa 	slli	r17,r4,3
  80ac78:	dcc00315 	stw	r19,12(sp)
  80ac7c:	4a41ffcc 	andi	r9,r9,2047
  80ac80:	0101ffc4 	movi	r4,2047
  80ac84:	2824d7fa 	srli	r18,r5,31
  80ac88:	8401ffcc 	andi	r16,r16,2047
  80ac8c:	50c6b03a 	or	r3,r10,r3
  80ac90:	380ed7fa 	srli	r7,r7,31
  80ac94:	408ab03a 	or	r5,r8,r2
  80ac98:	300c90fa 	slli	r6,r6,3
  80ac9c:	49009626 	beq	r9,r4,80aef8 <__subdf3+0x2c0>
  80aca0:	39c0005c 	xori	r7,r7,1
  80aca4:	8245c83a 	sub	r2,r16,r9
  80aca8:	3c807426 	beq	r7,r18,80ae7c <__subdf3+0x244>
  80acac:	0080af0e 	bge	zero,r2,80af6c <__subdf3+0x334>
  80acb0:	48002a1e 	bne	r9,zero,80ad5c <__subdf3+0x124>
  80acb4:	2988b03a 	or	r4,r5,r6
  80acb8:	20009a1e 	bne	r4,zero,80af24 <__subdf3+0x2ec>
  80acbc:	888001cc 	andi	r2,r17,7
  80acc0:	10000726 	beq	r2,zero,80ace0 <__subdf3+0xa8>
  80acc4:	888003cc 	andi	r2,r17,15
  80acc8:	01000104 	movi	r4,4
  80accc:	11000426 	beq	r2,r4,80ace0 <__subdf3+0xa8>
  80acd0:	890b883a 	add	r5,r17,r4
  80acd4:	2c63803a 	cmpltu	r17,r5,r17
  80acd8:	1c47883a 	add	r3,r3,r17
  80acdc:	2823883a 	mov	r17,r5
  80ace0:	1880202c 	andhi	r2,r3,128
  80ace4:	10005926 	beq	r2,zero,80ae4c <__subdf3+0x214>
  80ace8:	84000044 	addi	r16,r16,1
  80acec:	0081ffc4 	movi	r2,2047
  80acf0:	8080be26 	beq	r16,r2,80afec <__subdf3+0x3b4>
  80acf4:	017fe034 	movhi	r5,65408
  80acf8:	297fffc4 	addi	r5,r5,-1
  80acfc:	1946703a 	and	r3,r3,r5
  80ad00:	1804977a 	slli	r2,r3,29
  80ad04:	1806927a 	slli	r3,r3,9
  80ad08:	8822d0fa 	srli	r17,r17,3
  80ad0c:	8401ffcc 	andi	r16,r16,2047
  80ad10:	180ad33a 	srli	r5,r3,12
  80ad14:	9100004c 	andi	r4,r18,1
  80ad18:	1444b03a 	or	r2,r2,r17
  80ad1c:	80c1ffcc 	andi	r3,r16,2047
  80ad20:	1820953a 	slli	r16,r3,20
  80ad24:	20c03fcc 	andi	r3,r4,255
  80ad28:	180897fa 	slli	r4,r3,31
  80ad2c:	00c00434 	movhi	r3,16
  80ad30:	18ffffc4 	addi	r3,r3,-1
  80ad34:	28c6703a 	and	r3,r5,r3
  80ad38:	1c06b03a 	or	r3,r3,r16
  80ad3c:	1906b03a 	or	r3,r3,r4
  80ad40:	dfc00417 	ldw	ra,16(sp)
  80ad44:	dcc00317 	ldw	r19,12(sp)
  80ad48:	dc800217 	ldw	r18,8(sp)
  80ad4c:	dc400117 	ldw	r17,4(sp)
  80ad50:	dc000017 	ldw	r16,0(sp)
  80ad54:	dec00504 	addi	sp,sp,20
  80ad58:	f800283a 	ret
  80ad5c:	0101ffc4 	movi	r4,2047
  80ad60:	813fd626 	beq	r16,r4,80acbc <__alt_data_end+0xff80acbc>
  80ad64:	29402034 	orhi	r5,r5,128
  80ad68:	01000e04 	movi	r4,56
  80ad6c:	2080a316 	blt	r4,r2,80affc <__subdf3+0x3c4>
  80ad70:	010007c4 	movi	r4,31
  80ad74:	2080c616 	blt	r4,r2,80b090 <__subdf3+0x458>
  80ad78:	01000804 	movi	r4,32
  80ad7c:	2089c83a 	sub	r4,r4,r2
  80ad80:	2910983a 	sll	r8,r5,r4
  80ad84:	308ed83a 	srl	r7,r6,r2
  80ad88:	3108983a 	sll	r4,r6,r4
  80ad8c:	2884d83a 	srl	r2,r5,r2
  80ad90:	41ccb03a 	or	r6,r8,r7
  80ad94:	2008c03a 	cmpne	r4,r4,zero
  80ad98:	310cb03a 	or	r6,r6,r4
  80ad9c:	898dc83a 	sub	r6,r17,r6
  80ada0:	89a3803a 	cmpltu	r17,r17,r6
  80ada4:	1887c83a 	sub	r3,r3,r2
  80ada8:	1c47c83a 	sub	r3,r3,r17
  80adac:	3023883a 	mov	r17,r6
  80adb0:	1880202c 	andhi	r2,r3,128
  80adb4:	10002326 	beq	r2,zero,80ae44 <__subdf3+0x20c>
  80adb8:	04c02034 	movhi	r19,128
  80adbc:	9cffffc4 	addi	r19,r19,-1
  80adc0:	1ce6703a 	and	r19,r3,r19
  80adc4:	98007a26 	beq	r19,zero,80afb0 <__subdf3+0x378>
  80adc8:	9809883a 	mov	r4,r19
  80adcc:	080b7380 	call	80b738 <__clzsi2>
  80add0:	113ffe04 	addi	r4,r2,-8
  80add4:	00c007c4 	movi	r3,31
  80add8:	19007b16 	blt	r3,r4,80afc8 <__subdf3+0x390>
  80addc:	00800804 	movi	r2,32
  80ade0:	1105c83a 	sub	r2,r2,r4
  80ade4:	8884d83a 	srl	r2,r17,r2
  80ade8:	9906983a 	sll	r3,r19,r4
  80adec:	8922983a 	sll	r17,r17,r4
  80adf0:	10c4b03a 	or	r2,r2,r3
  80adf4:	24007816 	blt	r4,r16,80afd8 <__subdf3+0x3a0>
  80adf8:	2421c83a 	sub	r16,r4,r16
  80adfc:	80c00044 	addi	r3,r16,1
  80ae00:	010007c4 	movi	r4,31
  80ae04:	20c09516 	blt	r4,r3,80b05c <__subdf3+0x424>
  80ae08:	01400804 	movi	r5,32
  80ae0c:	28cbc83a 	sub	r5,r5,r3
  80ae10:	88c8d83a 	srl	r4,r17,r3
  80ae14:	8962983a 	sll	r17,r17,r5
  80ae18:	114a983a 	sll	r5,r2,r5
  80ae1c:	10c6d83a 	srl	r3,r2,r3
  80ae20:	8804c03a 	cmpne	r2,r17,zero
  80ae24:	290ab03a 	or	r5,r5,r4
  80ae28:	28a2b03a 	or	r17,r5,r2
  80ae2c:	0021883a 	mov	r16,zero
  80ae30:	003fa206 	br	80acbc <__alt_data_end+0xff80acbc>
  80ae34:	2090b03a 	or	r8,r4,r2
  80ae38:	40018e26 	beq	r8,zero,80b474 <__subdf3+0x83c>
  80ae3c:	1007883a 	mov	r3,r2
  80ae40:	2023883a 	mov	r17,r4
  80ae44:	888001cc 	andi	r2,r17,7
  80ae48:	103f9e1e 	bne	r2,zero,80acc4 <__alt_data_end+0xff80acc4>
  80ae4c:	1804977a 	slli	r2,r3,29
  80ae50:	8822d0fa 	srli	r17,r17,3
  80ae54:	1810d0fa 	srli	r8,r3,3
  80ae58:	9100004c 	andi	r4,r18,1
  80ae5c:	1444b03a 	or	r2,r2,r17
  80ae60:	00c1ffc4 	movi	r3,2047
  80ae64:	80c02826 	beq	r16,r3,80af08 <__subdf3+0x2d0>
  80ae68:	01400434 	movhi	r5,16
  80ae6c:	297fffc4 	addi	r5,r5,-1
  80ae70:	80e0703a 	and	r16,r16,r3
  80ae74:	414a703a 	and	r5,r8,r5
  80ae78:	003fa806 	br	80ad1c <__alt_data_end+0xff80ad1c>
  80ae7c:	0080630e 	bge	zero,r2,80b00c <__subdf3+0x3d4>
  80ae80:	48003026 	beq	r9,zero,80af44 <__subdf3+0x30c>
  80ae84:	0101ffc4 	movi	r4,2047
  80ae88:	813f8c26 	beq	r16,r4,80acbc <__alt_data_end+0xff80acbc>
  80ae8c:	29402034 	orhi	r5,r5,128
  80ae90:	01000e04 	movi	r4,56
  80ae94:	2080a90e 	bge	r4,r2,80b13c <__subdf3+0x504>
  80ae98:	298cb03a 	or	r6,r5,r6
  80ae9c:	3012c03a 	cmpne	r9,r6,zero
  80aea0:	0005883a 	mov	r2,zero
  80aea4:	4c53883a 	add	r9,r9,r17
  80aea8:	4c63803a 	cmpltu	r17,r9,r17
  80aeac:	10c7883a 	add	r3,r2,r3
  80aeb0:	88c7883a 	add	r3,r17,r3
  80aeb4:	4823883a 	mov	r17,r9
  80aeb8:	1880202c 	andhi	r2,r3,128
  80aebc:	1000d026 	beq	r2,zero,80b200 <__subdf3+0x5c8>
  80aec0:	84000044 	addi	r16,r16,1
  80aec4:	0081ffc4 	movi	r2,2047
  80aec8:	8080fe26 	beq	r16,r2,80b2c4 <__subdf3+0x68c>
  80aecc:	00bfe034 	movhi	r2,65408
  80aed0:	10bfffc4 	addi	r2,r2,-1
  80aed4:	1886703a 	and	r3,r3,r2
  80aed8:	880ad07a 	srli	r5,r17,1
  80aedc:	180497fa 	slli	r2,r3,31
  80aee0:	8900004c 	andi	r4,r17,1
  80aee4:	2922b03a 	or	r17,r5,r4
  80aee8:	1806d07a 	srli	r3,r3,1
  80aeec:	1462b03a 	or	r17,r2,r17
  80aef0:	3825883a 	mov	r18,r7
  80aef4:	003f7106 	br	80acbc <__alt_data_end+0xff80acbc>
  80aef8:	2984b03a 	or	r2,r5,r6
  80aefc:	103f6826 	beq	r2,zero,80aca0 <__alt_data_end+0xff80aca0>
  80af00:	39c03fcc 	andi	r7,r7,255
  80af04:	003f6706 	br	80aca4 <__alt_data_end+0xff80aca4>
  80af08:	4086b03a 	or	r3,r8,r2
  80af0c:	18015226 	beq	r3,zero,80b458 <__subdf3+0x820>
  80af10:	00c00434 	movhi	r3,16
  80af14:	41400234 	orhi	r5,r8,8
  80af18:	18ffffc4 	addi	r3,r3,-1
  80af1c:	28ca703a 	and	r5,r5,r3
  80af20:	003f7e06 	br	80ad1c <__alt_data_end+0xff80ad1c>
  80af24:	10bfffc4 	addi	r2,r2,-1
  80af28:	1000491e 	bne	r2,zero,80b050 <__subdf3+0x418>
  80af2c:	898fc83a 	sub	r7,r17,r6
  80af30:	89e3803a 	cmpltu	r17,r17,r7
  80af34:	1947c83a 	sub	r3,r3,r5
  80af38:	1c47c83a 	sub	r3,r3,r17
  80af3c:	3823883a 	mov	r17,r7
  80af40:	003f9b06 	br	80adb0 <__alt_data_end+0xff80adb0>
  80af44:	2988b03a 	or	r4,r5,r6
  80af48:	203f5c26 	beq	r4,zero,80acbc <__alt_data_end+0xff80acbc>
  80af4c:	10bfffc4 	addi	r2,r2,-1
  80af50:	1000931e 	bne	r2,zero,80b1a0 <__subdf3+0x568>
  80af54:	898d883a 	add	r6,r17,r6
  80af58:	3463803a 	cmpltu	r17,r6,r17
  80af5c:	1947883a 	add	r3,r3,r5
  80af60:	88c7883a 	add	r3,r17,r3
  80af64:	3023883a 	mov	r17,r6
  80af68:	003fd306 	br	80aeb8 <__alt_data_end+0xff80aeb8>
  80af6c:	1000541e 	bne	r2,zero,80b0c0 <__subdf3+0x488>
  80af70:	80800044 	addi	r2,r16,1
  80af74:	1081ffcc 	andi	r2,r2,2047
  80af78:	01000044 	movi	r4,1
  80af7c:	2080a20e 	bge	r4,r2,80b208 <__subdf3+0x5d0>
  80af80:	8989c83a 	sub	r4,r17,r6
  80af84:	8905803a 	cmpltu	r2,r17,r4
  80af88:	1967c83a 	sub	r19,r3,r5
  80af8c:	98a7c83a 	sub	r19,r19,r2
  80af90:	9880202c 	andhi	r2,r19,128
  80af94:	10006326 	beq	r2,zero,80b124 <__subdf3+0x4ec>
  80af98:	3463c83a 	sub	r17,r6,r17
  80af9c:	28c7c83a 	sub	r3,r5,r3
  80afa0:	344d803a 	cmpltu	r6,r6,r17
  80afa4:	19a7c83a 	sub	r19,r3,r6
  80afa8:	3825883a 	mov	r18,r7
  80afac:	983f861e 	bne	r19,zero,80adc8 <__alt_data_end+0xff80adc8>
  80afb0:	8809883a 	mov	r4,r17
  80afb4:	080b7380 	call	80b738 <__clzsi2>
  80afb8:	10800804 	addi	r2,r2,32
  80afbc:	113ffe04 	addi	r4,r2,-8
  80afc0:	00c007c4 	movi	r3,31
  80afc4:	193f850e 	bge	r3,r4,80addc <__alt_data_end+0xff80addc>
  80afc8:	10bff604 	addi	r2,r2,-40
  80afcc:	8884983a 	sll	r2,r17,r2
  80afd0:	0023883a 	mov	r17,zero
  80afd4:	243f880e 	bge	r4,r16,80adf8 <__alt_data_end+0xff80adf8>
  80afd8:	00ffe034 	movhi	r3,65408
  80afdc:	18ffffc4 	addi	r3,r3,-1
  80afe0:	8121c83a 	sub	r16,r16,r4
  80afe4:	10c6703a 	and	r3,r2,r3
  80afe8:	003f3406 	br	80acbc <__alt_data_end+0xff80acbc>
  80afec:	9100004c 	andi	r4,r18,1
  80aff0:	000b883a 	mov	r5,zero
  80aff4:	0005883a 	mov	r2,zero
  80aff8:	003f4806 	br	80ad1c <__alt_data_end+0xff80ad1c>
  80affc:	298cb03a 	or	r6,r5,r6
  80b000:	300cc03a 	cmpne	r6,r6,zero
  80b004:	0005883a 	mov	r2,zero
  80b008:	003f6406 	br	80ad9c <__alt_data_end+0xff80ad9c>
  80b00c:	10009a1e 	bne	r2,zero,80b278 <__subdf3+0x640>
  80b010:	82400044 	addi	r9,r16,1
  80b014:	4881ffcc 	andi	r2,r9,2047
  80b018:	02800044 	movi	r10,1
  80b01c:	5080670e 	bge	r10,r2,80b1bc <__subdf3+0x584>
  80b020:	0081ffc4 	movi	r2,2047
  80b024:	4880af26 	beq	r9,r2,80b2e4 <__subdf3+0x6ac>
  80b028:	898d883a 	add	r6,r17,r6
  80b02c:	1945883a 	add	r2,r3,r5
  80b030:	3447803a 	cmpltu	r3,r6,r17
  80b034:	1887883a 	add	r3,r3,r2
  80b038:	182297fa 	slli	r17,r3,31
  80b03c:	300cd07a 	srli	r6,r6,1
  80b040:	1806d07a 	srli	r3,r3,1
  80b044:	4821883a 	mov	r16,r9
  80b048:	89a2b03a 	or	r17,r17,r6
  80b04c:	003f1b06 	br	80acbc <__alt_data_end+0xff80acbc>
  80b050:	0101ffc4 	movi	r4,2047
  80b054:	813f441e 	bne	r16,r4,80ad68 <__alt_data_end+0xff80ad68>
  80b058:	003f1806 	br	80acbc <__alt_data_end+0xff80acbc>
  80b05c:	843ff844 	addi	r16,r16,-31
  80b060:	01400804 	movi	r5,32
  80b064:	1408d83a 	srl	r4,r2,r16
  80b068:	19405026 	beq	r3,r5,80b1ac <__subdf3+0x574>
  80b06c:	01401004 	movi	r5,64
  80b070:	28c7c83a 	sub	r3,r5,r3
  80b074:	10c4983a 	sll	r2,r2,r3
  80b078:	88a2b03a 	or	r17,r17,r2
  80b07c:	8822c03a 	cmpne	r17,r17,zero
  80b080:	2462b03a 	or	r17,r4,r17
  80b084:	0007883a 	mov	r3,zero
  80b088:	0021883a 	mov	r16,zero
  80b08c:	003f6d06 	br	80ae44 <__alt_data_end+0xff80ae44>
  80b090:	11fff804 	addi	r7,r2,-32
  80b094:	01000804 	movi	r4,32
  80b098:	29ced83a 	srl	r7,r5,r7
  80b09c:	11004526 	beq	r2,r4,80b1b4 <__subdf3+0x57c>
  80b0a0:	01001004 	movi	r4,64
  80b0a4:	2089c83a 	sub	r4,r4,r2
  80b0a8:	2904983a 	sll	r2,r5,r4
  80b0ac:	118cb03a 	or	r6,r2,r6
  80b0b0:	300cc03a 	cmpne	r6,r6,zero
  80b0b4:	398cb03a 	or	r6,r7,r6
  80b0b8:	0005883a 	mov	r2,zero
  80b0bc:	003f3706 	br	80ad9c <__alt_data_end+0xff80ad9c>
  80b0c0:	80002a26 	beq	r16,zero,80b16c <__subdf3+0x534>
  80b0c4:	0101ffc4 	movi	r4,2047
  80b0c8:	49006626 	beq	r9,r4,80b264 <__subdf3+0x62c>
  80b0cc:	0085c83a 	sub	r2,zero,r2
  80b0d0:	18c02034 	orhi	r3,r3,128
  80b0d4:	01000e04 	movi	r4,56
  80b0d8:	20807e16 	blt	r4,r2,80b2d4 <__subdf3+0x69c>
  80b0dc:	010007c4 	movi	r4,31
  80b0e0:	2080e716 	blt	r4,r2,80b480 <__subdf3+0x848>
  80b0e4:	01000804 	movi	r4,32
  80b0e8:	2089c83a 	sub	r4,r4,r2
  80b0ec:	1914983a 	sll	r10,r3,r4
  80b0f0:	8890d83a 	srl	r8,r17,r2
  80b0f4:	8908983a 	sll	r4,r17,r4
  80b0f8:	1884d83a 	srl	r2,r3,r2
  80b0fc:	5222b03a 	or	r17,r10,r8
  80b100:	2006c03a 	cmpne	r3,r4,zero
  80b104:	88e2b03a 	or	r17,r17,r3
  80b108:	3463c83a 	sub	r17,r6,r17
  80b10c:	2885c83a 	sub	r2,r5,r2
  80b110:	344d803a 	cmpltu	r6,r6,r17
  80b114:	1187c83a 	sub	r3,r2,r6
  80b118:	4821883a 	mov	r16,r9
  80b11c:	3825883a 	mov	r18,r7
  80b120:	003f2306 	br	80adb0 <__alt_data_end+0xff80adb0>
  80b124:	24d0b03a 	or	r8,r4,r19
  80b128:	40001b1e 	bne	r8,zero,80b198 <__subdf3+0x560>
  80b12c:	0005883a 	mov	r2,zero
  80b130:	0009883a 	mov	r4,zero
  80b134:	0021883a 	mov	r16,zero
  80b138:	003f4906 	br	80ae60 <__alt_data_end+0xff80ae60>
  80b13c:	010007c4 	movi	r4,31
  80b140:	20803a16 	blt	r4,r2,80b22c <__subdf3+0x5f4>
  80b144:	01000804 	movi	r4,32
  80b148:	2089c83a 	sub	r4,r4,r2
  80b14c:	2912983a 	sll	r9,r5,r4
  80b150:	3090d83a 	srl	r8,r6,r2
  80b154:	3108983a 	sll	r4,r6,r4
  80b158:	2884d83a 	srl	r2,r5,r2
  80b15c:	4a12b03a 	or	r9,r9,r8
  80b160:	2008c03a 	cmpne	r4,r4,zero
  80b164:	4912b03a 	or	r9,r9,r4
  80b168:	003f4e06 	br	80aea4 <__alt_data_end+0xff80aea4>
  80b16c:	1c48b03a 	or	r4,r3,r17
  80b170:	20003c26 	beq	r4,zero,80b264 <__subdf3+0x62c>
  80b174:	0084303a 	nor	r2,zero,r2
  80b178:	1000381e 	bne	r2,zero,80b25c <__subdf3+0x624>
  80b17c:	3463c83a 	sub	r17,r6,r17
  80b180:	28c5c83a 	sub	r2,r5,r3
  80b184:	344d803a 	cmpltu	r6,r6,r17
  80b188:	1187c83a 	sub	r3,r2,r6
  80b18c:	4821883a 	mov	r16,r9
  80b190:	3825883a 	mov	r18,r7
  80b194:	003f0606 	br	80adb0 <__alt_data_end+0xff80adb0>
  80b198:	2023883a 	mov	r17,r4
  80b19c:	003f0906 	br	80adc4 <__alt_data_end+0xff80adc4>
  80b1a0:	0101ffc4 	movi	r4,2047
  80b1a4:	813f3a1e 	bne	r16,r4,80ae90 <__alt_data_end+0xff80ae90>
  80b1a8:	003ec406 	br	80acbc <__alt_data_end+0xff80acbc>
  80b1ac:	0005883a 	mov	r2,zero
  80b1b0:	003fb106 	br	80b078 <__alt_data_end+0xff80b078>
  80b1b4:	0005883a 	mov	r2,zero
  80b1b8:	003fbc06 	br	80b0ac <__alt_data_end+0xff80b0ac>
  80b1bc:	1c44b03a 	or	r2,r3,r17
  80b1c0:	80008e1e 	bne	r16,zero,80b3fc <__subdf3+0x7c4>
  80b1c4:	1000c826 	beq	r2,zero,80b4e8 <__subdf3+0x8b0>
  80b1c8:	2984b03a 	or	r2,r5,r6
  80b1cc:	103ebb26 	beq	r2,zero,80acbc <__alt_data_end+0xff80acbc>
  80b1d0:	8989883a 	add	r4,r17,r6
  80b1d4:	1945883a 	add	r2,r3,r5
  80b1d8:	2447803a 	cmpltu	r3,r4,r17
  80b1dc:	1887883a 	add	r3,r3,r2
  80b1e0:	1880202c 	andhi	r2,r3,128
  80b1e4:	2023883a 	mov	r17,r4
  80b1e8:	103f1626 	beq	r2,zero,80ae44 <__alt_data_end+0xff80ae44>
  80b1ec:	00bfe034 	movhi	r2,65408
  80b1f0:	10bfffc4 	addi	r2,r2,-1
  80b1f4:	5021883a 	mov	r16,r10
  80b1f8:	1886703a 	and	r3,r3,r2
  80b1fc:	003eaf06 	br	80acbc <__alt_data_end+0xff80acbc>
  80b200:	3825883a 	mov	r18,r7
  80b204:	003f0f06 	br	80ae44 <__alt_data_end+0xff80ae44>
  80b208:	1c44b03a 	or	r2,r3,r17
  80b20c:	8000251e 	bne	r16,zero,80b2a4 <__subdf3+0x66c>
  80b210:	1000661e 	bne	r2,zero,80b3ac <__subdf3+0x774>
  80b214:	2990b03a 	or	r8,r5,r6
  80b218:	40009626 	beq	r8,zero,80b474 <__subdf3+0x83c>
  80b21c:	2807883a 	mov	r3,r5
  80b220:	3023883a 	mov	r17,r6
  80b224:	3825883a 	mov	r18,r7
  80b228:	003ea406 	br	80acbc <__alt_data_end+0xff80acbc>
  80b22c:	127ff804 	addi	r9,r2,-32
  80b230:	01000804 	movi	r4,32
  80b234:	2a52d83a 	srl	r9,r5,r9
  80b238:	11008c26 	beq	r2,r4,80b46c <__subdf3+0x834>
  80b23c:	01001004 	movi	r4,64
  80b240:	2085c83a 	sub	r2,r4,r2
  80b244:	2884983a 	sll	r2,r5,r2
  80b248:	118cb03a 	or	r6,r2,r6
  80b24c:	300cc03a 	cmpne	r6,r6,zero
  80b250:	4992b03a 	or	r9,r9,r6
  80b254:	0005883a 	mov	r2,zero
  80b258:	003f1206 	br	80aea4 <__alt_data_end+0xff80aea4>
  80b25c:	0101ffc4 	movi	r4,2047
  80b260:	493f9c1e 	bne	r9,r4,80b0d4 <__alt_data_end+0xff80b0d4>
  80b264:	2807883a 	mov	r3,r5
  80b268:	3023883a 	mov	r17,r6
  80b26c:	4821883a 	mov	r16,r9
  80b270:	3825883a 	mov	r18,r7
  80b274:	003e9106 	br	80acbc <__alt_data_end+0xff80acbc>
  80b278:	80001f1e 	bne	r16,zero,80b2f8 <__subdf3+0x6c0>
  80b27c:	1c48b03a 	or	r4,r3,r17
  80b280:	20005a26 	beq	r4,zero,80b3ec <__subdf3+0x7b4>
  80b284:	0084303a 	nor	r2,zero,r2
  80b288:	1000561e 	bne	r2,zero,80b3e4 <__subdf3+0x7ac>
  80b28c:	89a3883a 	add	r17,r17,r6
  80b290:	1945883a 	add	r2,r3,r5
  80b294:	898d803a 	cmpltu	r6,r17,r6
  80b298:	3087883a 	add	r3,r6,r2
  80b29c:	4821883a 	mov	r16,r9
  80b2a0:	003f0506 	br	80aeb8 <__alt_data_end+0xff80aeb8>
  80b2a4:	10002b1e 	bne	r2,zero,80b354 <__subdf3+0x71c>
  80b2a8:	2984b03a 	or	r2,r5,r6
  80b2ac:	10008026 	beq	r2,zero,80b4b0 <__subdf3+0x878>
  80b2b0:	2807883a 	mov	r3,r5
  80b2b4:	3023883a 	mov	r17,r6
  80b2b8:	3825883a 	mov	r18,r7
  80b2bc:	0401ffc4 	movi	r16,2047
  80b2c0:	003e7e06 	br	80acbc <__alt_data_end+0xff80acbc>
  80b2c4:	3809883a 	mov	r4,r7
  80b2c8:	0011883a 	mov	r8,zero
  80b2cc:	0005883a 	mov	r2,zero
  80b2d0:	003ee306 	br	80ae60 <__alt_data_end+0xff80ae60>
  80b2d4:	1c62b03a 	or	r17,r3,r17
  80b2d8:	8822c03a 	cmpne	r17,r17,zero
  80b2dc:	0005883a 	mov	r2,zero
  80b2e0:	003f8906 	br	80b108 <__alt_data_end+0xff80b108>
  80b2e4:	3809883a 	mov	r4,r7
  80b2e8:	4821883a 	mov	r16,r9
  80b2ec:	0011883a 	mov	r8,zero
  80b2f0:	0005883a 	mov	r2,zero
  80b2f4:	003eda06 	br	80ae60 <__alt_data_end+0xff80ae60>
  80b2f8:	0101ffc4 	movi	r4,2047
  80b2fc:	49003b26 	beq	r9,r4,80b3ec <__subdf3+0x7b4>
  80b300:	0085c83a 	sub	r2,zero,r2
  80b304:	18c02034 	orhi	r3,r3,128
  80b308:	01000e04 	movi	r4,56
  80b30c:	20806e16 	blt	r4,r2,80b4c8 <__subdf3+0x890>
  80b310:	010007c4 	movi	r4,31
  80b314:	20807716 	blt	r4,r2,80b4f4 <__subdf3+0x8bc>
  80b318:	01000804 	movi	r4,32
  80b31c:	2089c83a 	sub	r4,r4,r2
  80b320:	1914983a 	sll	r10,r3,r4
  80b324:	8890d83a 	srl	r8,r17,r2
  80b328:	8908983a 	sll	r4,r17,r4
  80b32c:	1884d83a 	srl	r2,r3,r2
  80b330:	5222b03a 	or	r17,r10,r8
  80b334:	2006c03a 	cmpne	r3,r4,zero
  80b338:	88e2b03a 	or	r17,r17,r3
  80b33c:	89a3883a 	add	r17,r17,r6
  80b340:	1145883a 	add	r2,r2,r5
  80b344:	898d803a 	cmpltu	r6,r17,r6
  80b348:	3087883a 	add	r3,r6,r2
  80b34c:	4821883a 	mov	r16,r9
  80b350:	003ed906 	br	80aeb8 <__alt_data_end+0xff80aeb8>
  80b354:	2984b03a 	or	r2,r5,r6
  80b358:	10004226 	beq	r2,zero,80b464 <__subdf3+0x82c>
  80b35c:	1808d0fa 	srli	r4,r3,3
  80b360:	8822d0fa 	srli	r17,r17,3
  80b364:	1806977a 	slli	r3,r3,29
  80b368:	2080022c 	andhi	r2,r4,8
  80b36c:	1c62b03a 	or	r17,r3,r17
  80b370:	10000826 	beq	r2,zero,80b394 <__subdf3+0x75c>
  80b374:	2812d0fa 	srli	r9,r5,3
  80b378:	4880022c 	andhi	r2,r9,8
  80b37c:	1000051e 	bne	r2,zero,80b394 <__subdf3+0x75c>
  80b380:	300cd0fa 	srli	r6,r6,3
  80b384:	2804977a 	slli	r2,r5,29
  80b388:	4809883a 	mov	r4,r9
  80b38c:	3825883a 	mov	r18,r7
  80b390:	11a2b03a 	or	r17,r2,r6
  80b394:	8806d77a 	srli	r3,r17,29
  80b398:	200890fa 	slli	r4,r4,3
  80b39c:	882290fa 	slli	r17,r17,3
  80b3a0:	0401ffc4 	movi	r16,2047
  80b3a4:	1906b03a 	or	r3,r3,r4
  80b3a8:	003e4406 	br	80acbc <__alt_data_end+0xff80acbc>
  80b3ac:	2984b03a 	or	r2,r5,r6
  80b3b0:	103e4226 	beq	r2,zero,80acbc <__alt_data_end+0xff80acbc>
  80b3b4:	8989c83a 	sub	r4,r17,r6
  80b3b8:	8911803a 	cmpltu	r8,r17,r4
  80b3bc:	1945c83a 	sub	r2,r3,r5
  80b3c0:	1205c83a 	sub	r2,r2,r8
  80b3c4:	1200202c 	andhi	r8,r2,128
  80b3c8:	403e9a26 	beq	r8,zero,80ae34 <__alt_data_end+0xff80ae34>
  80b3cc:	3463c83a 	sub	r17,r6,r17
  80b3d0:	28c5c83a 	sub	r2,r5,r3
  80b3d4:	344d803a 	cmpltu	r6,r6,r17
  80b3d8:	1187c83a 	sub	r3,r2,r6
  80b3dc:	3825883a 	mov	r18,r7
  80b3e0:	003e3606 	br	80acbc <__alt_data_end+0xff80acbc>
  80b3e4:	0101ffc4 	movi	r4,2047
  80b3e8:	493fc71e 	bne	r9,r4,80b308 <__alt_data_end+0xff80b308>
  80b3ec:	2807883a 	mov	r3,r5
  80b3f0:	3023883a 	mov	r17,r6
  80b3f4:	4821883a 	mov	r16,r9
  80b3f8:	003e3006 	br	80acbc <__alt_data_end+0xff80acbc>
  80b3fc:	10003626 	beq	r2,zero,80b4d8 <__subdf3+0x8a0>
  80b400:	2984b03a 	or	r2,r5,r6
  80b404:	10001726 	beq	r2,zero,80b464 <__subdf3+0x82c>
  80b408:	1808d0fa 	srli	r4,r3,3
  80b40c:	8822d0fa 	srli	r17,r17,3
  80b410:	1806977a 	slli	r3,r3,29
  80b414:	2080022c 	andhi	r2,r4,8
  80b418:	1c62b03a 	or	r17,r3,r17
  80b41c:	10000726 	beq	r2,zero,80b43c <__subdf3+0x804>
  80b420:	2812d0fa 	srli	r9,r5,3
  80b424:	4880022c 	andhi	r2,r9,8
  80b428:	1000041e 	bne	r2,zero,80b43c <__subdf3+0x804>
  80b42c:	300cd0fa 	srli	r6,r6,3
  80b430:	2804977a 	slli	r2,r5,29
  80b434:	4809883a 	mov	r4,r9
  80b438:	11a2b03a 	or	r17,r2,r6
  80b43c:	8806d77a 	srli	r3,r17,29
  80b440:	200890fa 	slli	r4,r4,3
  80b444:	882290fa 	slli	r17,r17,3
  80b448:	3825883a 	mov	r18,r7
  80b44c:	1906b03a 	or	r3,r3,r4
  80b450:	0401ffc4 	movi	r16,2047
  80b454:	003e1906 	br	80acbc <__alt_data_end+0xff80acbc>
  80b458:	000b883a 	mov	r5,zero
  80b45c:	0005883a 	mov	r2,zero
  80b460:	003e2e06 	br	80ad1c <__alt_data_end+0xff80ad1c>
  80b464:	0401ffc4 	movi	r16,2047
  80b468:	003e1406 	br	80acbc <__alt_data_end+0xff80acbc>
  80b46c:	0005883a 	mov	r2,zero
  80b470:	003f7506 	br	80b248 <__alt_data_end+0xff80b248>
  80b474:	0005883a 	mov	r2,zero
  80b478:	0009883a 	mov	r4,zero
  80b47c:	003e7806 	br	80ae60 <__alt_data_end+0xff80ae60>
  80b480:	123ff804 	addi	r8,r2,-32
  80b484:	01000804 	movi	r4,32
  80b488:	1a10d83a 	srl	r8,r3,r8
  80b48c:	11002526 	beq	r2,r4,80b524 <__subdf3+0x8ec>
  80b490:	01001004 	movi	r4,64
  80b494:	2085c83a 	sub	r2,r4,r2
  80b498:	1884983a 	sll	r2,r3,r2
  80b49c:	1444b03a 	or	r2,r2,r17
  80b4a0:	1004c03a 	cmpne	r2,r2,zero
  80b4a4:	40a2b03a 	or	r17,r8,r2
  80b4a8:	0005883a 	mov	r2,zero
  80b4ac:	003f1606 	br	80b108 <__alt_data_end+0xff80b108>
  80b4b0:	02000434 	movhi	r8,16
  80b4b4:	0009883a 	mov	r4,zero
  80b4b8:	423fffc4 	addi	r8,r8,-1
  80b4bc:	00bfffc4 	movi	r2,-1
  80b4c0:	0401ffc4 	movi	r16,2047
  80b4c4:	003e6606 	br	80ae60 <__alt_data_end+0xff80ae60>
  80b4c8:	1c62b03a 	or	r17,r3,r17
  80b4cc:	8822c03a 	cmpne	r17,r17,zero
  80b4d0:	0005883a 	mov	r2,zero
  80b4d4:	003f9906 	br	80b33c <__alt_data_end+0xff80b33c>
  80b4d8:	2807883a 	mov	r3,r5
  80b4dc:	3023883a 	mov	r17,r6
  80b4e0:	0401ffc4 	movi	r16,2047
  80b4e4:	003df506 	br	80acbc <__alt_data_end+0xff80acbc>
  80b4e8:	2807883a 	mov	r3,r5
  80b4ec:	3023883a 	mov	r17,r6
  80b4f0:	003df206 	br	80acbc <__alt_data_end+0xff80acbc>
  80b4f4:	123ff804 	addi	r8,r2,-32
  80b4f8:	01000804 	movi	r4,32
  80b4fc:	1a10d83a 	srl	r8,r3,r8
  80b500:	11000a26 	beq	r2,r4,80b52c <__subdf3+0x8f4>
  80b504:	01001004 	movi	r4,64
  80b508:	2085c83a 	sub	r2,r4,r2
  80b50c:	1884983a 	sll	r2,r3,r2
  80b510:	1444b03a 	or	r2,r2,r17
  80b514:	1004c03a 	cmpne	r2,r2,zero
  80b518:	40a2b03a 	or	r17,r8,r2
  80b51c:	0005883a 	mov	r2,zero
  80b520:	003f8606 	br	80b33c <__alt_data_end+0xff80b33c>
  80b524:	0005883a 	mov	r2,zero
  80b528:	003fdc06 	br	80b49c <__alt_data_end+0xff80b49c>
  80b52c:	0005883a 	mov	r2,zero
  80b530:	003ff706 	br	80b510 <__alt_data_end+0xff80b510>

0080b534 <__fixdfsi>:
  80b534:	280cd53a 	srli	r6,r5,20
  80b538:	00c00434 	movhi	r3,16
  80b53c:	18ffffc4 	addi	r3,r3,-1
  80b540:	3181ffcc 	andi	r6,r6,2047
  80b544:	01c0ff84 	movi	r7,1022
  80b548:	28c6703a 	and	r3,r5,r3
  80b54c:	280ad7fa 	srli	r5,r5,31
  80b550:	3980120e 	bge	r7,r6,80b59c <__fixdfsi+0x68>
  80b554:	00810744 	movi	r2,1053
  80b558:	11800c16 	blt	r2,r6,80b58c <__fixdfsi+0x58>
  80b55c:	00810cc4 	movi	r2,1075
  80b560:	1185c83a 	sub	r2,r2,r6
  80b564:	01c007c4 	movi	r7,31
  80b568:	18c00434 	orhi	r3,r3,16
  80b56c:	38800d16 	blt	r7,r2,80b5a4 <__fixdfsi+0x70>
  80b570:	31befb44 	addi	r6,r6,-1043
  80b574:	2084d83a 	srl	r2,r4,r2
  80b578:	1986983a 	sll	r3,r3,r6
  80b57c:	1884b03a 	or	r2,r3,r2
  80b580:	28000726 	beq	r5,zero,80b5a0 <__fixdfsi+0x6c>
  80b584:	0085c83a 	sub	r2,zero,r2
  80b588:	f800283a 	ret
  80b58c:	00a00034 	movhi	r2,32768
  80b590:	10bfffc4 	addi	r2,r2,-1
  80b594:	2885883a 	add	r2,r5,r2
  80b598:	f800283a 	ret
  80b59c:	0005883a 	mov	r2,zero
  80b5a0:	f800283a 	ret
  80b5a4:	008104c4 	movi	r2,1043
  80b5a8:	1185c83a 	sub	r2,r2,r6
  80b5ac:	1884d83a 	srl	r2,r3,r2
  80b5b0:	003ff306 	br	80b580 <__alt_data_end+0xff80b580>

0080b5b4 <__floatsidf>:
  80b5b4:	defffd04 	addi	sp,sp,-12
  80b5b8:	dfc00215 	stw	ra,8(sp)
  80b5bc:	dc400115 	stw	r17,4(sp)
  80b5c0:	dc000015 	stw	r16,0(sp)
  80b5c4:	20002b26 	beq	r4,zero,80b674 <__floatsidf+0xc0>
  80b5c8:	2023883a 	mov	r17,r4
  80b5cc:	2020d7fa 	srli	r16,r4,31
  80b5d0:	20002d16 	blt	r4,zero,80b688 <__floatsidf+0xd4>
  80b5d4:	8809883a 	mov	r4,r17
  80b5d8:	080b7380 	call	80b738 <__clzsi2>
  80b5dc:	01410784 	movi	r5,1054
  80b5e0:	288bc83a 	sub	r5,r5,r2
  80b5e4:	01010cc4 	movi	r4,1075
  80b5e8:	2149c83a 	sub	r4,r4,r5
  80b5ec:	00c007c4 	movi	r3,31
  80b5f0:	1900160e 	bge	r3,r4,80b64c <__floatsidf+0x98>
  80b5f4:	00c104c4 	movi	r3,1043
  80b5f8:	1947c83a 	sub	r3,r3,r5
  80b5fc:	88c6983a 	sll	r3,r17,r3
  80b600:	00800434 	movhi	r2,16
  80b604:	10bfffc4 	addi	r2,r2,-1
  80b608:	1886703a 	and	r3,r3,r2
  80b60c:	2941ffcc 	andi	r5,r5,2047
  80b610:	800d883a 	mov	r6,r16
  80b614:	0005883a 	mov	r2,zero
  80b618:	280a953a 	slli	r5,r5,20
  80b61c:	31803fcc 	andi	r6,r6,255
  80b620:	01000434 	movhi	r4,16
  80b624:	300c97fa 	slli	r6,r6,31
  80b628:	213fffc4 	addi	r4,r4,-1
  80b62c:	1906703a 	and	r3,r3,r4
  80b630:	1946b03a 	or	r3,r3,r5
  80b634:	1986b03a 	or	r3,r3,r6
  80b638:	dfc00217 	ldw	ra,8(sp)
  80b63c:	dc400117 	ldw	r17,4(sp)
  80b640:	dc000017 	ldw	r16,0(sp)
  80b644:	dec00304 	addi	sp,sp,12
  80b648:	f800283a 	ret
  80b64c:	00c002c4 	movi	r3,11
  80b650:	1887c83a 	sub	r3,r3,r2
  80b654:	88c6d83a 	srl	r3,r17,r3
  80b658:	8904983a 	sll	r2,r17,r4
  80b65c:	01000434 	movhi	r4,16
  80b660:	213fffc4 	addi	r4,r4,-1
  80b664:	2941ffcc 	andi	r5,r5,2047
  80b668:	1906703a 	and	r3,r3,r4
  80b66c:	800d883a 	mov	r6,r16
  80b670:	003fe906 	br	80b618 <__alt_data_end+0xff80b618>
  80b674:	000d883a 	mov	r6,zero
  80b678:	000b883a 	mov	r5,zero
  80b67c:	0007883a 	mov	r3,zero
  80b680:	0005883a 	mov	r2,zero
  80b684:	003fe406 	br	80b618 <__alt_data_end+0xff80b618>
  80b688:	0123c83a 	sub	r17,zero,r4
  80b68c:	003fd106 	br	80b5d4 <__alt_data_end+0xff80b5d4>

0080b690 <__floatunsidf>:
  80b690:	defffe04 	addi	sp,sp,-8
  80b694:	dc000015 	stw	r16,0(sp)
  80b698:	dfc00115 	stw	ra,4(sp)
  80b69c:	2021883a 	mov	r16,r4
  80b6a0:	20002226 	beq	r4,zero,80b72c <__floatunsidf+0x9c>
  80b6a4:	080b7380 	call	80b738 <__clzsi2>
  80b6a8:	01010784 	movi	r4,1054
  80b6ac:	2089c83a 	sub	r4,r4,r2
  80b6b0:	01810cc4 	movi	r6,1075
  80b6b4:	310dc83a 	sub	r6,r6,r4
  80b6b8:	00c007c4 	movi	r3,31
  80b6bc:	1980120e 	bge	r3,r6,80b708 <__floatunsidf+0x78>
  80b6c0:	00c104c4 	movi	r3,1043
  80b6c4:	1907c83a 	sub	r3,r3,r4
  80b6c8:	80ca983a 	sll	r5,r16,r3
  80b6cc:	00800434 	movhi	r2,16
  80b6d0:	10bfffc4 	addi	r2,r2,-1
  80b6d4:	2101ffcc 	andi	r4,r4,2047
  80b6d8:	0021883a 	mov	r16,zero
  80b6dc:	288a703a 	and	r5,r5,r2
  80b6e0:	2008953a 	slli	r4,r4,20
  80b6e4:	00c00434 	movhi	r3,16
  80b6e8:	18ffffc4 	addi	r3,r3,-1
  80b6ec:	28c6703a 	and	r3,r5,r3
  80b6f0:	8005883a 	mov	r2,r16
  80b6f4:	1906b03a 	or	r3,r3,r4
  80b6f8:	dfc00117 	ldw	ra,4(sp)
  80b6fc:	dc000017 	ldw	r16,0(sp)
  80b700:	dec00204 	addi	sp,sp,8
  80b704:	f800283a 	ret
  80b708:	00c002c4 	movi	r3,11
  80b70c:	188bc83a 	sub	r5,r3,r2
  80b710:	814ad83a 	srl	r5,r16,r5
  80b714:	00c00434 	movhi	r3,16
  80b718:	18ffffc4 	addi	r3,r3,-1
  80b71c:	81a0983a 	sll	r16,r16,r6
  80b720:	2101ffcc 	andi	r4,r4,2047
  80b724:	28ca703a 	and	r5,r5,r3
  80b728:	003fed06 	br	80b6e0 <__alt_data_end+0xff80b6e0>
  80b72c:	0009883a 	mov	r4,zero
  80b730:	000b883a 	mov	r5,zero
  80b734:	003fea06 	br	80b6e0 <__alt_data_end+0xff80b6e0>

0080b738 <__clzsi2>:
  80b738:	00bfffd4 	movui	r2,65535
  80b73c:	11000536 	bltu	r2,r4,80b754 <__clzsi2+0x1c>
  80b740:	00803fc4 	movi	r2,255
  80b744:	11000f36 	bltu	r2,r4,80b784 <__clzsi2+0x4c>
  80b748:	00800804 	movi	r2,32
  80b74c:	0007883a 	mov	r3,zero
  80b750:	00000506 	br	80b768 <__clzsi2+0x30>
  80b754:	00804034 	movhi	r2,256
  80b758:	10bfffc4 	addi	r2,r2,-1
  80b75c:	11000c2e 	bgeu	r2,r4,80b790 <__clzsi2+0x58>
  80b760:	00800204 	movi	r2,8
  80b764:	00c00604 	movi	r3,24
  80b768:	20c8d83a 	srl	r4,r4,r3
  80b76c:	00c02074 	movhi	r3,129
  80b770:	18feac04 	addi	r3,r3,-1360
  80b774:	1909883a 	add	r4,r3,r4
  80b778:	20c00003 	ldbu	r3,0(r4)
  80b77c:	10c5c83a 	sub	r2,r2,r3
  80b780:	f800283a 	ret
  80b784:	00800604 	movi	r2,24
  80b788:	00c00204 	movi	r3,8
  80b78c:	003ff606 	br	80b768 <__alt_data_end+0xff80b768>
  80b790:	00800404 	movi	r2,16
  80b794:	1007883a 	mov	r3,r2
  80b798:	003ff306 	br	80b768 <__alt_data_end+0xff80b768>

0080b79c <alt_getchar>:
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
  80b79c:	defffe04 	addi	sp,sp,-8
  80b7a0:	dfc00115 	stw	ra,4(sp)
  80b7a4:	df000015 	stw	fp,0(sp)
  80b7a8:	d839883a 	mov	fp,sp
    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
    }
    return c;
#else
    return getchar();
  80b7ac:	d0a00117 	ldw	r2,-32764(gp)
  80b7b0:	10800117 	ldw	r2,4(r2)
  80b7b4:	1009883a 	mov	r4,r2
  80b7b8:	080ddb00 	call	80ddb0 <getc>
#endif
#endif
}
  80b7bc:	e037883a 	mov	sp,fp
  80b7c0:	dfc00117 	ldw	ra,4(sp)
  80b7c4:	df000017 	ldw	fp,0(sp)
  80b7c8:	dec00204 	addi	sp,sp,8
  80b7cc:	f800283a 	ret

0080b7d0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80b7d0:	defffc04 	addi	sp,sp,-16
  80b7d4:	df000315 	stw	fp,12(sp)
  80b7d8:	df000304 	addi	fp,sp,12
  80b7dc:	e13ffd15 	stw	r4,-12(fp)
  80b7e0:	e17ffe15 	stw	r5,-8(fp)
  80b7e4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80b7e8:	e0fffe17 	ldw	r3,-8(fp)
  80b7ec:	e0bffd17 	ldw	r2,-12(fp)
  80b7f0:	18800c26 	beq	r3,r2,80b824 <alt_load_section+0x54>
  {
    while( to != end )
  80b7f4:	00000806 	br	80b818 <alt_load_section+0x48>
    {
      *to++ = *from++;
  80b7f8:	e0bffe17 	ldw	r2,-8(fp)
  80b7fc:	10c00104 	addi	r3,r2,4
  80b800:	e0fffe15 	stw	r3,-8(fp)
  80b804:	e0fffd17 	ldw	r3,-12(fp)
  80b808:	19000104 	addi	r4,r3,4
  80b80c:	e13ffd15 	stw	r4,-12(fp)
  80b810:	18c00017 	ldw	r3,0(r3)
  80b814:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80b818:	e0fffe17 	ldw	r3,-8(fp)
  80b81c:	e0bfff17 	ldw	r2,-4(fp)
  80b820:	18bff51e 	bne	r3,r2,80b7f8 <__alt_data_end+0xff80b7f8>
    {
      *to++ = *from++;
    }
  }
}
  80b824:	0001883a 	nop
  80b828:	e037883a 	mov	sp,fp
  80b82c:	df000017 	ldw	fp,0(sp)
  80b830:	dec00104 	addi	sp,sp,4
  80b834:	f800283a 	ret

0080b838 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80b838:	defffe04 	addi	sp,sp,-8
  80b83c:	dfc00115 	stw	ra,4(sp)
  80b840:	df000015 	stw	fp,0(sp)
  80b844:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80b848:	01802074 	movhi	r6,129
  80b84c:	3185b104 	addi	r6,r6,5828
  80b850:	01402074 	movhi	r5,129
  80b854:	297ef704 	addi	r5,r5,-1060
  80b858:	01002074 	movhi	r4,129
  80b85c:	2105b104 	addi	r4,r4,5828
  80b860:	080b7d00 	call	80b7d0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80b864:	01802034 	movhi	r6,128
  80b868:	31809104 	addi	r6,r6,580
  80b86c:	01402034 	movhi	r5,128
  80b870:	29400804 	addi	r5,r5,32
  80b874:	01002034 	movhi	r4,128
  80b878:	21000804 	addi	r4,r4,32
  80b87c:	080b7d00 	call	80b7d0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80b880:	01802074 	movhi	r6,129
  80b884:	31bef704 	addi	r6,r6,-1060
  80b888:	01402074 	movhi	r5,129
  80b88c:	297e2f04 	addi	r5,r5,-1860
  80b890:	01002074 	movhi	r4,129
  80b894:	213e2f04 	addi	r4,r4,-1860
  80b898:	080b7d00 	call	80b7d0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80b89c:	080c8d80 	call	80c8d8 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80b8a0:	080caec0 	call	80caec <alt_icache_flush_all>
}
  80b8a4:	0001883a 	nop
  80b8a8:	e037883a 	mov	sp,fp
  80b8ac:	dfc00117 	ldw	ra,4(sp)
  80b8b0:	df000017 	ldw	fp,0(sp)
  80b8b4:	dec00204 	addi	sp,sp,8
  80b8b8:	f800283a 	ret

0080b8bc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80b8bc:	defffd04 	addi	sp,sp,-12
  80b8c0:	dfc00215 	stw	ra,8(sp)
  80b8c4:	df000115 	stw	fp,4(sp)
  80b8c8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80b8cc:	0009883a 	mov	r4,zero
  80b8d0:	080baa00 	call	80baa0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80b8d4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80b8d8:	080bad80 	call	80bad8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80b8dc:	01802074 	movhi	r6,129
  80b8e0:	31beec04 	addi	r6,r6,-1104
  80b8e4:	01402074 	movhi	r5,129
  80b8e8:	297eec04 	addi	r5,r5,-1104
  80b8ec:	01002074 	movhi	r4,129
  80b8f0:	213eec04 	addi	r4,r4,-1104
  80b8f4:	080cea40 	call	80cea4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80b8f8:	080ca2c0 	call	80ca2c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80b8fc:	01002074 	movhi	r4,129
  80b900:	2132a304 	addi	r4,r4,-13684
  80b904:	080d7780 	call	80d778 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80b908:	d0a6d017 	ldw	r2,-25792(gp)
  80b90c:	d0e6d117 	ldw	r3,-25788(gp)
  80b910:	d126d217 	ldw	r4,-25784(gp)
  80b914:	200d883a 	mov	r6,r4
  80b918:	180b883a 	mov	r5,r3
  80b91c:	1009883a 	mov	r4,r2
  80b920:	08004540 	call	800454 <main>
  80b924:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80b928:	01000044 	movi	r4,1
  80b92c:	080c8000 	call	80c800 <close>
  exit (result);
  80b930:	e13fff17 	ldw	r4,-4(fp)
  80b934:	080d78c0 	call	80d78c <exit>

0080b938 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80b938:	defffe04 	addi	sp,sp,-8
  80b93c:	df000115 	stw	fp,4(sp)
  80b940:	df000104 	addi	fp,sp,4
  80b944:	e13fff15 	stw	r4,-4(fp)
}
  80b948:	0001883a 	nop
  80b94c:	e037883a 	mov	sp,fp
  80b950:	df000017 	ldw	fp,0(sp)
  80b954:	dec00104 	addi	sp,sp,4
  80b958:	f800283a 	ret

0080b95c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80b95c:	defffe04 	addi	sp,sp,-8
  80b960:	df000115 	stw	fp,4(sp)
  80b964:	df000104 	addi	fp,sp,4
  80b968:	e13fff15 	stw	r4,-4(fp)
}
  80b96c:	0001883a 	nop
  80b970:	e037883a 	mov	sp,fp
  80b974:	df000017 	ldw	fp,0(sp)
  80b978:	dec00104 	addi	sp,sp,4
  80b97c:	f800283a 	ret

0080b980 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
  80b980:	defffd04 	addi	sp,sp,-12
  80b984:	dfc00215 	stw	ra,8(sp)
  80b988:	df000115 	stw	fp,4(sp)
  80b98c:	df000104 	addi	fp,sp,4
  80b990:	e13fff15 	stw	r4,-4(fp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
#else
    return fputs(str, stdout);
  80b994:	d0a00117 	ldw	r2,-32764(gp)
  80b998:	10800217 	ldw	r2,8(r2)
  80b99c:	100b883a 	mov	r5,r2
  80b9a0:	e13fff17 	ldw	r4,-4(fp)
  80b9a4:	080d8600 	call	80d860 <fputs>
#endif
#endif
}
  80b9a8:	e037883a 	mov	sp,fp
  80b9ac:	dfc00117 	ldw	ra,4(sp)
  80b9b0:	df000017 	ldw	fp,0(sp)
  80b9b4:	dec00204 	addi	sp,sp,8
  80b9b8:	f800283a 	ret

0080b9bc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80b9bc:	defff904 	addi	sp,sp,-28
  80b9c0:	df000615 	stw	fp,24(sp)
  80b9c4:	df000604 	addi	fp,sp,24
  80b9c8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b9cc:	0005303a 	rdctl	r2,status
  80b9d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b9d4:	e0fffe17 	ldw	r3,-8(fp)
  80b9d8:	00bfff84 	movi	r2,-2
  80b9dc:	1884703a 	and	r2,r3,r2
  80b9e0:	1001703a 	wrctl	status,r2
  
  return context;
  80b9e4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80b9e8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80b9ec:	d0a00517 	ldw	r2,-32748(gp)
  80b9f0:	10c000c4 	addi	r3,r2,3
  80b9f4:	00bfff04 	movi	r2,-4
  80b9f8:	1884703a 	and	r2,r3,r2
  80b9fc:	d0a00515 	stw	r2,-32748(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80ba00:	d0e00517 	ldw	r3,-32748(gp)
  80ba04:	e0bfff17 	ldw	r2,-4(fp)
  80ba08:	1887883a 	add	r3,r3,r2
  80ba0c:	00804034 	movhi	r2,256
  80ba10:	10800004 	addi	r2,r2,0
  80ba14:	10c0062e 	bgeu	r2,r3,80ba30 <sbrk+0x74>
  80ba18:	e0bffb17 	ldw	r2,-20(fp)
  80ba1c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ba20:	e0bffa17 	ldw	r2,-24(fp)
  80ba24:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80ba28:	00bfffc4 	movi	r2,-1
  80ba2c:	00000b06 	br	80ba5c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80ba30:	d0a00517 	ldw	r2,-32748(gp)
  80ba34:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  80ba38:	d0e00517 	ldw	r3,-32748(gp)
  80ba3c:	e0bfff17 	ldw	r2,-4(fp)
  80ba40:	1885883a 	add	r2,r3,r2
  80ba44:	d0a00515 	stw	r2,-32748(gp)
  80ba48:	e0bffb17 	ldw	r2,-20(fp)
  80ba4c:	e0bffc15 	stw	r2,-16(fp)
  80ba50:	e0bffc17 	ldw	r2,-16(fp)
  80ba54:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80ba58:	e0bffd17 	ldw	r2,-12(fp)
} 
  80ba5c:	e037883a 	mov	sp,fp
  80ba60:	df000017 	ldw	fp,0(sp)
  80ba64:	dec00104 	addi	sp,sp,4
  80ba68:	f800283a 	ret

0080ba6c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80ba6c:	defffd04 	addi	sp,sp,-12
  80ba70:	dfc00215 	stw	ra,8(sp)
  80ba74:	df000115 	stw	fp,4(sp)
  80ba78:	df000104 	addi	fp,sp,4
  80ba7c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80ba80:	d1600804 	addi	r5,gp,-32736
  80ba84:	e13fff17 	ldw	r4,-4(fp)
  80ba88:	080c9880 	call	80c988 <alt_dev_llist_insert>
}
  80ba8c:	e037883a 	mov	sp,fp
  80ba90:	dfc00117 	ldw	ra,4(sp)
  80ba94:	df000017 	ldw	fp,0(sp)
  80ba98:	dec00204 	addi	sp,sp,8
  80ba9c:	f800283a 	ret

0080baa0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80baa0:	defffd04 	addi	sp,sp,-12
  80baa4:	dfc00215 	stw	ra,8(sp)
  80baa8:	df000115 	stw	fp,4(sp)
  80baac:	df000104 	addi	fp,sp,4
  80bab0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  80bab4:	080d3cc0 	call	80d3cc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80bab8:	00800044 	movi	r2,1
  80babc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80bac0:	0001883a 	nop
  80bac4:	e037883a 	mov	sp,fp
  80bac8:	dfc00117 	ldw	ra,4(sp)
  80bacc:	df000017 	ldw	fp,0(sp)
  80bad0:	dec00204 	addi	sp,sp,8
  80bad4:	f800283a 	ret

0080bad8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80bad8:	defffe04 	addi	sp,sp,-8
  80badc:	dfc00115 	stw	ra,4(sp)
  80bae0:	df000015 	stw	fp,0(sp)
  80bae4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
  80bae8:	01c0fa04 	movi	r7,1000
  80baec:	01800044 	movi	r6,1
  80baf0:	000b883a 	mov	r5,zero
  80baf4:	01004034 	movhi	r4,256
  80baf8:	21040004 	addi	r4,r4,4096
  80bafc:	080c61c0 	call	80c61c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80bb00:	01800404 	movi	r6,16
  80bb04:	000b883a 	mov	r5,zero
  80bb08:	01002074 	movhi	r4,129
  80bb0c:	21012a04 	addi	r4,r4,1192
  80bb10:	080bca00 	call	80bca0 <altera_avalon_jtag_uart_init>
  80bb14:	01002074 	movhi	r4,129
  80bb18:	21012004 	addi	r4,r4,1152
  80bb1c:	080ba6c0 	call	80ba6c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, sysid);
  80bb20:	0001883a 	nop
}
  80bb24:	0001883a 	nop
  80bb28:	e037883a 	mov	sp,fp
  80bb2c:	dfc00117 	ldw	ra,4(sp)
  80bb30:	df000017 	ldw	fp,0(sp)
  80bb34:	dec00204 	addi	sp,sp,8
  80bb38:	f800283a 	ret

0080bb3c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80bb3c:	defffa04 	addi	sp,sp,-24
  80bb40:	dfc00515 	stw	ra,20(sp)
  80bb44:	df000415 	stw	fp,16(sp)
  80bb48:	df000404 	addi	fp,sp,16
  80bb4c:	e13ffd15 	stw	r4,-12(fp)
  80bb50:	e17ffe15 	stw	r5,-8(fp)
  80bb54:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80bb58:	e0bffd17 	ldw	r2,-12(fp)
  80bb5c:	10800017 	ldw	r2,0(r2)
  80bb60:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80bb64:	e0bffc17 	ldw	r2,-16(fp)
  80bb68:	10c00a04 	addi	r3,r2,40
  80bb6c:	e0bffd17 	ldw	r2,-12(fp)
  80bb70:	10800217 	ldw	r2,8(r2)
  80bb74:	100f883a 	mov	r7,r2
  80bb78:	e1bfff17 	ldw	r6,-4(fp)
  80bb7c:	e17ffe17 	ldw	r5,-8(fp)
  80bb80:	1809883a 	mov	r4,r3
  80bb84:	080c1640 	call	80c164 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80bb88:	e037883a 	mov	sp,fp
  80bb8c:	dfc00117 	ldw	ra,4(sp)
  80bb90:	df000017 	ldw	fp,0(sp)
  80bb94:	dec00204 	addi	sp,sp,8
  80bb98:	f800283a 	ret

0080bb9c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80bb9c:	defffa04 	addi	sp,sp,-24
  80bba0:	dfc00515 	stw	ra,20(sp)
  80bba4:	df000415 	stw	fp,16(sp)
  80bba8:	df000404 	addi	fp,sp,16
  80bbac:	e13ffd15 	stw	r4,-12(fp)
  80bbb0:	e17ffe15 	stw	r5,-8(fp)
  80bbb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80bbb8:	e0bffd17 	ldw	r2,-12(fp)
  80bbbc:	10800017 	ldw	r2,0(r2)
  80bbc0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80bbc4:	e0bffc17 	ldw	r2,-16(fp)
  80bbc8:	10c00a04 	addi	r3,r2,40
  80bbcc:	e0bffd17 	ldw	r2,-12(fp)
  80bbd0:	10800217 	ldw	r2,8(r2)
  80bbd4:	100f883a 	mov	r7,r2
  80bbd8:	e1bfff17 	ldw	r6,-4(fp)
  80bbdc:	e17ffe17 	ldw	r5,-8(fp)
  80bbe0:	1809883a 	mov	r4,r3
  80bbe4:	080c3800 	call	80c380 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80bbe8:	e037883a 	mov	sp,fp
  80bbec:	dfc00117 	ldw	ra,4(sp)
  80bbf0:	df000017 	ldw	fp,0(sp)
  80bbf4:	dec00204 	addi	sp,sp,8
  80bbf8:	f800283a 	ret

0080bbfc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80bbfc:	defffc04 	addi	sp,sp,-16
  80bc00:	dfc00315 	stw	ra,12(sp)
  80bc04:	df000215 	stw	fp,8(sp)
  80bc08:	df000204 	addi	fp,sp,8
  80bc0c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80bc10:	e0bfff17 	ldw	r2,-4(fp)
  80bc14:	10800017 	ldw	r2,0(r2)
  80bc18:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80bc1c:	e0bffe17 	ldw	r2,-8(fp)
  80bc20:	10c00a04 	addi	r3,r2,40
  80bc24:	e0bfff17 	ldw	r2,-4(fp)
  80bc28:	10800217 	ldw	r2,8(r2)
  80bc2c:	100b883a 	mov	r5,r2
  80bc30:	1809883a 	mov	r4,r3
  80bc34:	080c00c0 	call	80c00c <altera_avalon_jtag_uart_close>
}
  80bc38:	e037883a 	mov	sp,fp
  80bc3c:	dfc00117 	ldw	ra,4(sp)
  80bc40:	df000017 	ldw	fp,0(sp)
  80bc44:	dec00204 	addi	sp,sp,8
  80bc48:	f800283a 	ret

0080bc4c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80bc4c:	defffa04 	addi	sp,sp,-24
  80bc50:	dfc00515 	stw	ra,20(sp)
  80bc54:	df000415 	stw	fp,16(sp)
  80bc58:	df000404 	addi	fp,sp,16
  80bc5c:	e13ffd15 	stw	r4,-12(fp)
  80bc60:	e17ffe15 	stw	r5,-8(fp)
  80bc64:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80bc68:	e0bffd17 	ldw	r2,-12(fp)
  80bc6c:	10800017 	ldw	r2,0(r2)
  80bc70:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80bc74:	e0bffc17 	ldw	r2,-16(fp)
  80bc78:	10800a04 	addi	r2,r2,40
  80bc7c:	e1bfff17 	ldw	r6,-4(fp)
  80bc80:	e17ffe17 	ldw	r5,-8(fp)
  80bc84:	1009883a 	mov	r4,r2
  80bc88:	080c0740 	call	80c074 <altera_avalon_jtag_uart_ioctl>
}
  80bc8c:	e037883a 	mov	sp,fp
  80bc90:	dfc00117 	ldw	ra,4(sp)
  80bc94:	df000017 	ldw	fp,0(sp)
  80bc98:	dec00204 	addi	sp,sp,8
  80bc9c:	f800283a 	ret

0080bca0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80bca0:	defffa04 	addi	sp,sp,-24
  80bca4:	dfc00515 	stw	ra,20(sp)
  80bca8:	df000415 	stw	fp,16(sp)
  80bcac:	df000404 	addi	fp,sp,16
  80bcb0:	e13ffd15 	stw	r4,-12(fp)
  80bcb4:	e17ffe15 	stw	r5,-8(fp)
  80bcb8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80bcbc:	e0bffd17 	ldw	r2,-12(fp)
  80bcc0:	00c00044 	movi	r3,1
  80bcc4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80bcc8:	e0bffd17 	ldw	r2,-12(fp)
  80bccc:	10800017 	ldw	r2,0(r2)
  80bcd0:	10800104 	addi	r2,r2,4
  80bcd4:	1007883a 	mov	r3,r2
  80bcd8:	e0bffd17 	ldw	r2,-12(fp)
  80bcdc:	10800817 	ldw	r2,32(r2)
  80bce0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80bce4:	e0bffe17 	ldw	r2,-8(fp)
  80bce8:	e0ffff17 	ldw	r3,-4(fp)
  80bcec:	d8000015 	stw	zero,0(sp)
  80bcf0:	e1fffd17 	ldw	r7,-12(fp)
  80bcf4:	01802074 	movhi	r6,129
  80bcf8:	31af5804 	addi	r6,r6,-17056
  80bcfc:	180b883a 	mov	r5,r3
  80bd00:	1009883a 	mov	r4,r2
  80bd04:	080cb200 	call	80cb20 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80bd08:	e0bffd17 	ldw	r2,-12(fp)
  80bd0c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80bd10:	e0bffd17 	ldw	r2,-12(fp)
  80bd14:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80bd18:	d0e6d417 	ldw	r3,-25776(gp)
  80bd1c:	e1fffd17 	ldw	r7,-12(fp)
  80bd20:	01802074 	movhi	r6,129
  80bd24:	31afdb04 	addi	r6,r6,-16532
  80bd28:	180b883a 	mov	r5,r3
  80bd2c:	1009883a 	mov	r4,r2
  80bd30:	080c6980 	call	80c698 <alt_alarm_start>
  80bd34:	1000040e 	bge	r2,zero,80bd48 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80bd38:	e0fffd17 	ldw	r3,-12(fp)
  80bd3c:	00a00034 	movhi	r2,32768
  80bd40:	10bfffc4 	addi	r2,r2,-1
  80bd44:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80bd48:	0001883a 	nop
  80bd4c:	e037883a 	mov	sp,fp
  80bd50:	dfc00117 	ldw	ra,4(sp)
  80bd54:	df000017 	ldw	fp,0(sp)
  80bd58:	dec00204 	addi	sp,sp,8
  80bd5c:	f800283a 	ret

0080bd60 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80bd60:	defff804 	addi	sp,sp,-32
  80bd64:	df000715 	stw	fp,28(sp)
  80bd68:	df000704 	addi	fp,sp,28
  80bd6c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80bd70:	e0bfff17 	ldw	r2,-4(fp)
  80bd74:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  80bd78:	e0bffb17 	ldw	r2,-20(fp)
  80bd7c:	10800017 	ldw	r2,0(r2)
  80bd80:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80bd84:	e0bffc17 	ldw	r2,-16(fp)
  80bd88:	10800104 	addi	r2,r2,4
  80bd8c:	10800037 	ldwio	r2,0(r2)
  80bd90:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80bd94:	e0bffd17 	ldw	r2,-12(fp)
  80bd98:	1080c00c 	andi	r2,r2,768
  80bd9c:	10006d26 	beq	r2,zero,80bf54 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80bda0:	e0bffd17 	ldw	r2,-12(fp)
  80bda4:	1080400c 	andi	r2,r2,256
  80bda8:	10003526 	beq	r2,zero,80be80 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80bdac:	00800074 	movhi	r2,1
  80bdb0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80bdb4:	e0bffb17 	ldw	r2,-20(fp)
  80bdb8:	10800a17 	ldw	r2,40(r2)
  80bdbc:	10800044 	addi	r2,r2,1
  80bdc0:	1081ffcc 	andi	r2,r2,2047
  80bdc4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  80bdc8:	e0bffb17 	ldw	r2,-20(fp)
  80bdcc:	10c00b17 	ldw	r3,44(r2)
  80bdd0:	e0bffe17 	ldw	r2,-8(fp)
  80bdd4:	18801526 	beq	r3,r2,80be2c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80bdd8:	e0bffc17 	ldw	r2,-16(fp)
  80bddc:	10800037 	ldwio	r2,0(r2)
  80bde0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80bde4:	e0bff917 	ldw	r2,-28(fp)
  80bde8:	10a0000c 	andi	r2,r2,32768
  80bdec:	10001126 	beq	r2,zero,80be34 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80bdf0:	e0bffb17 	ldw	r2,-20(fp)
  80bdf4:	10800a17 	ldw	r2,40(r2)
  80bdf8:	e0fff917 	ldw	r3,-28(fp)
  80bdfc:	1809883a 	mov	r4,r3
  80be00:	e0fffb17 	ldw	r3,-20(fp)
  80be04:	1885883a 	add	r2,r3,r2
  80be08:	10800e04 	addi	r2,r2,56
  80be0c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80be10:	e0bffb17 	ldw	r2,-20(fp)
  80be14:	10800a17 	ldw	r2,40(r2)
  80be18:	10800044 	addi	r2,r2,1
  80be1c:	10c1ffcc 	andi	r3,r2,2047
  80be20:	e0bffb17 	ldw	r2,-20(fp)
  80be24:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80be28:	003fe206 	br	80bdb4 <__alt_data_end+0xff80bdb4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  80be2c:	0001883a 	nop
  80be30:	00000106 	br	80be38 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  80be34:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80be38:	e0bff917 	ldw	r2,-28(fp)
  80be3c:	10bfffec 	andhi	r2,r2,65535
  80be40:	10000f26 	beq	r2,zero,80be80 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80be44:	e0bffb17 	ldw	r2,-20(fp)
  80be48:	10c00817 	ldw	r3,32(r2)
  80be4c:	00bfff84 	movi	r2,-2
  80be50:	1886703a 	and	r3,r3,r2
  80be54:	e0bffb17 	ldw	r2,-20(fp)
  80be58:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80be5c:	e0bffc17 	ldw	r2,-16(fp)
  80be60:	10800104 	addi	r2,r2,4
  80be64:	1007883a 	mov	r3,r2
  80be68:	e0bffb17 	ldw	r2,-20(fp)
  80be6c:	10800817 	ldw	r2,32(r2)
  80be70:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80be74:	e0bffc17 	ldw	r2,-16(fp)
  80be78:	10800104 	addi	r2,r2,4
  80be7c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80be80:	e0bffd17 	ldw	r2,-12(fp)
  80be84:	1080800c 	andi	r2,r2,512
  80be88:	103fbe26 	beq	r2,zero,80bd84 <__alt_data_end+0xff80bd84>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80be8c:	e0bffd17 	ldw	r2,-12(fp)
  80be90:	1004d43a 	srli	r2,r2,16
  80be94:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80be98:	00001406 	br	80beec <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80be9c:	e0bffc17 	ldw	r2,-16(fp)
  80bea0:	e0fffb17 	ldw	r3,-20(fp)
  80bea4:	18c00d17 	ldw	r3,52(r3)
  80bea8:	e13ffb17 	ldw	r4,-20(fp)
  80beac:	20c7883a 	add	r3,r4,r3
  80beb0:	18c20e04 	addi	r3,r3,2104
  80beb4:	18c00003 	ldbu	r3,0(r3)
  80beb8:	18c03fcc 	andi	r3,r3,255
  80bebc:	18c0201c 	xori	r3,r3,128
  80bec0:	18ffe004 	addi	r3,r3,-128
  80bec4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80bec8:	e0bffb17 	ldw	r2,-20(fp)
  80becc:	10800d17 	ldw	r2,52(r2)
  80bed0:	10800044 	addi	r2,r2,1
  80bed4:	10c1ffcc 	andi	r3,r2,2047
  80bed8:	e0bffb17 	ldw	r2,-20(fp)
  80bedc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80bee0:	e0bffa17 	ldw	r2,-24(fp)
  80bee4:	10bfffc4 	addi	r2,r2,-1
  80bee8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80beec:	e0bffa17 	ldw	r2,-24(fp)
  80bef0:	10000526 	beq	r2,zero,80bf08 <altera_avalon_jtag_uart_irq+0x1a8>
  80bef4:	e0bffb17 	ldw	r2,-20(fp)
  80bef8:	10c00d17 	ldw	r3,52(r2)
  80befc:	e0bffb17 	ldw	r2,-20(fp)
  80bf00:	10800c17 	ldw	r2,48(r2)
  80bf04:	18bfe51e 	bne	r3,r2,80be9c <__alt_data_end+0xff80be9c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80bf08:	e0bffa17 	ldw	r2,-24(fp)
  80bf0c:	103f9d26 	beq	r2,zero,80bd84 <__alt_data_end+0xff80bd84>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80bf10:	e0bffb17 	ldw	r2,-20(fp)
  80bf14:	10c00817 	ldw	r3,32(r2)
  80bf18:	00bfff44 	movi	r2,-3
  80bf1c:	1886703a 	and	r3,r3,r2
  80bf20:	e0bffb17 	ldw	r2,-20(fp)
  80bf24:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80bf28:	e0bffb17 	ldw	r2,-20(fp)
  80bf2c:	10800017 	ldw	r2,0(r2)
  80bf30:	10800104 	addi	r2,r2,4
  80bf34:	1007883a 	mov	r3,r2
  80bf38:	e0bffb17 	ldw	r2,-20(fp)
  80bf3c:	10800817 	ldw	r2,32(r2)
  80bf40:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80bf44:	e0bffc17 	ldw	r2,-16(fp)
  80bf48:	10800104 	addi	r2,r2,4
  80bf4c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80bf50:	003f8c06 	br	80bd84 <__alt_data_end+0xff80bd84>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  80bf54:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  80bf58:	0001883a 	nop
  80bf5c:	e037883a 	mov	sp,fp
  80bf60:	df000017 	ldw	fp,0(sp)
  80bf64:	dec00104 	addi	sp,sp,4
  80bf68:	f800283a 	ret

0080bf6c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80bf6c:	defff804 	addi	sp,sp,-32
  80bf70:	df000715 	stw	fp,28(sp)
  80bf74:	df000704 	addi	fp,sp,28
  80bf78:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80bf7c:	e0bffb17 	ldw	r2,-20(fp)
  80bf80:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80bf84:	e0bff917 	ldw	r2,-28(fp)
  80bf88:	10800017 	ldw	r2,0(r2)
  80bf8c:	10800104 	addi	r2,r2,4
  80bf90:	10800037 	ldwio	r2,0(r2)
  80bf94:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80bf98:	e0bffa17 	ldw	r2,-24(fp)
  80bf9c:	1081000c 	andi	r2,r2,1024
  80bfa0:	10000b26 	beq	r2,zero,80bfd0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80bfa4:	e0bff917 	ldw	r2,-28(fp)
  80bfa8:	10800017 	ldw	r2,0(r2)
  80bfac:	10800104 	addi	r2,r2,4
  80bfb0:	1007883a 	mov	r3,r2
  80bfb4:	e0bff917 	ldw	r2,-28(fp)
  80bfb8:	10800817 	ldw	r2,32(r2)
  80bfbc:	10810014 	ori	r2,r2,1024
  80bfc0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  80bfc4:	e0bff917 	ldw	r2,-28(fp)
  80bfc8:	10000915 	stw	zero,36(r2)
  80bfcc:	00000a06 	br	80bff8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80bfd0:	e0bff917 	ldw	r2,-28(fp)
  80bfd4:	10c00917 	ldw	r3,36(r2)
  80bfd8:	00a00034 	movhi	r2,32768
  80bfdc:	10bfff04 	addi	r2,r2,-4
  80bfe0:	10c00536 	bltu	r2,r3,80bff8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  80bfe4:	e0bff917 	ldw	r2,-28(fp)
  80bfe8:	10800917 	ldw	r2,36(r2)
  80bfec:	10c00044 	addi	r3,r2,1
  80bff0:	e0bff917 	ldw	r2,-28(fp)
  80bff4:	10c00915 	stw	r3,36(r2)
  80bff8:	d0a6d417 	ldw	r2,-25776(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80bffc:	e037883a 	mov	sp,fp
  80c000:	df000017 	ldw	fp,0(sp)
  80c004:	dec00104 	addi	sp,sp,4
  80c008:	f800283a 	ret

0080c00c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80c00c:	defffd04 	addi	sp,sp,-12
  80c010:	df000215 	stw	fp,8(sp)
  80c014:	df000204 	addi	fp,sp,8
  80c018:	e13ffe15 	stw	r4,-8(fp)
  80c01c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80c020:	00000506 	br	80c038 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80c024:	e0bfff17 	ldw	r2,-4(fp)
  80c028:	1090000c 	andi	r2,r2,16384
  80c02c:	10000226 	beq	r2,zero,80c038 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80c030:	00bffd44 	movi	r2,-11
  80c034:	00000b06 	br	80c064 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80c038:	e0bffe17 	ldw	r2,-8(fp)
  80c03c:	10c00d17 	ldw	r3,52(r2)
  80c040:	e0bffe17 	ldw	r2,-8(fp)
  80c044:	10800c17 	ldw	r2,48(r2)
  80c048:	18800526 	beq	r3,r2,80c060 <altera_avalon_jtag_uart_close+0x54>
  80c04c:	e0bffe17 	ldw	r2,-8(fp)
  80c050:	10c00917 	ldw	r3,36(r2)
  80c054:	e0bffe17 	ldw	r2,-8(fp)
  80c058:	10800117 	ldw	r2,4(r2)
  80c05c:	18bff136 	bltu	r3,r2,80c024 <__alt_data_end+0xff80c024>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80c060:	0005883a 	mov	r2,zero
}
  80c064:	e037883a 	mov	sp,fp
  80c068:	df000017 	ldw	fp,0(sp)
  80c06c:	dec00104 	addi	sp,sp,4
  80c070:	f800283a 	ret

0080c074 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80c074:	defffa04 	addi	sp,sp,-24
  80c078:	df000515 	stw	fp,20(sp)
  80c07c:	df000504 	addi	fp,sp,20
  80c080:	e13ffd15 	stw	r4,-12(fp)
  80c084:	e17ffe15 	stw	r5,-8(fp)
  80c088:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  80c08c:	00bff9c4 	movi	r2,-25
  80c090:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  80c094:	e0bffe17 	ldw	r2,-8(fp)
  80c098:	10da8060 	cmpeqi	r3,r2,27137
  80c09c:	1800031e 	bne	r3,zero,80c0ac <altera_avalon_jtag_uart_ioctl+0x38>
  80c0a0:	109a80a0 	cmpeqi	r2,r2,27138
  80c0a4:	1000181e 	bne	r2,zero,80c108 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  80c0a8:	00002906 	br	80c150 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80c0ac:	e0bffd17 	ldw	r2,-12(fp)
  80c0b0:	10c00117 	ldw	r3,4(r2)
  80c0b4:	00a00034 	movhi	r2,32768
  80c0b8:	10bfffc4 	addi	r2,r2,-1
  80c0bc:	18802126 	beq	r3,r2,80c144 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  80c0c0:	e0bfff17 	ldw	r2,-4(fp)
  80c0c4:	10800017 	ldw	r2,0(r2)
  80c0c8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80c0cc:	e0bffc17 	ldw	r2,-16(fp)
  80c0d0:	10800090 	cmplti	r2,r2,2
  80c0d4:	1000061e 	bne	r2,zero,80c0f0 <altera_avalon_jtag_uart_ioctl+0x7c>
  80c0d8:	e0fffc17 	ldw	r3,-16(fp)
  80c0dc:	00a00034 	movhi	r2,32768
  80c0e0:	10bfffc4 	addi	r2,r2,-1
  80c0e4:	18800226 	beq	r3,r2,80c0f0 <altera_avalon_jtag_uart_ioctl+0x7c>
  80c0e8:	e0bffc17 	ldw	r2,-16(fp)
  80c0ec:	00000206 	br	80c0f8 <altera_avalon_jtag_uart_ioctl+0x84>
  80c0f0:	00a00034 	movhi	r2,32768
  80c0f4:	10bfff84 	addi	r2,r2,-2
  80c0f8:	e0fffd17 	ldw	r3,-12(fp)
  80c0fc:	18800115 	stw	r2,4(r3)
      rc = 0;
  80c100:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80c104:	00000f06 	br	80c144 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80c108:	e0bffd17 	ldw	r2,-12(fp)
  80c10c:	10c00117 	ldw	r3,4(r2)
  80c110:	00a00034 	movhi	r2,32768
  80c114:	10bfffc4 	addi	r2,r2,-1
  80c118:	18800c26 	beq	r3,r2,80c14c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80c11c:	e0bffd17 	ldw	r2,-12(fp)
  80c120:	10c00917 	ldw	r3,36(r2)
  80c124:	e0bffd17 	ldw	r2,-12(fp)
  80c128:	10800117 	ldw	r2,4(r2)
  80c12c:	1885803a 	cmpltu	r2,r3,r2
  80c130:	10c03fcc 	andi	r3,r2,255
  80c134:	e0bfff17 	ldw	r2,-4(fp)
  80c138:	10c00015 	stw	r3,0(r2)
      rc = 0;
  80c13c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80c140:	00000206 	br	80c14c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  80c144:	0001883a 	nop
  80c148:	00000106 	br	80c150 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  80c14c:	0001883a 	nop

  default:
    break;
  }

  return rc;
  80c150:	e0bffb17 	ldw	r2,-20(fp)
}
  80c154:	e037883a 	mov	sp,fp
  80c158:	df000017 	ldw	fp,0(sp)
  80c15c:	dec00104 	addi	sp,sp,4
  80c160:	f800283a 	ret

0080c164 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80c164:	defff304 	addi	sp,sp,-52
  80c168:	dfc00c15 	stw	ra,48(sp)
  80c16c:	df000b15 	stw	fp,44(sp)
  80c170:	df000b04 	addi	fp,sp,44
  80c174:	e13ffc15 	stw	r4,-16(fp)
  80c178:	e17ffd15 	stw	r5,-12(fp)
  80c17c:	e1bffe15 	stw	r6,-8(fp)
  80c180:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  80c184:	e0bffd17 	ldw	r2,-12(fp)
  80c188:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80c18c:	00004706 	br	80c2ac <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80c190:	e0bffc17 	ldw	r2,-16(fp)
  80c194:	10800a17 	ldw	r2,40(r2)
  80c198:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80c19c:	e0bffc17 	ldw	r2,-16(fp)
  80c1a0:	10800b17 	ldw	r2,44(r2)
  80c1a4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  80c1a8:	e0fff717 	ldw	r3,-36(fp)
  80c1ac:	e0bff817 	ldw	r2,-32(fp)
  80c1b0:	18800536 	bltu	r3,r2,80c1c8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80c1b4:	e0fff717 	ldw	r3,-36(fp)
  80c1b8:	e0bff817 	ldw	r2,-32(fp)
  80c1bc:	1885c83a 	sub	r2,r3,r2
  80c1c0:	e0bff615 	stw	r2,-40(fp)
  80c1c4:	00000406 	br	80c1d8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80c1c8:	00c20004 	movi	r3,2048
  80c1cc:	e0bff817 	ldw	r2,-32(fp)
  80c1d0:	1885c83a 	sub	r2,r3,r2
  80c1d4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80c1d8:	e0bff617 	ldw	r2,-40(fp)
  80c1dc:	10001e26 	beq	r2,zero,80c258 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  80c1e0:	e0fffe17 	ldw	r3,-8(fp)
  80c1e4:	e0bff617 	ldw	r2,-40(fp)
  80c1e8:	1880022e 	bgeu	r3,r2,80c1f4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  80c1ec:	e0bffe17 	ldw	r2,-8(fp)
  80c1f0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80c1f4:	e0bffc17 	ldw	r2,-16(fp)
  80c1f8:	10c00e04 	addi	r3,r2,56
  80c1fc:	e0bff817 	ldw	r2,-32(fp)
  80c200:	1885883a 	add	r2,r3,r2
  80c204:	e1bff617 	ldw	r6,-40(fp)
  80c208:	100b883a 	mov	r5,r2
  80c20c:	e13ff517 	ldw	r4,-44(fp)
  80c210:	08050680 	call	805068 <memcpy>
      ptr   += n;
  80c214:	e0fff517 	ldw	r3,-44(fp)
  80c218:	e0bff617 	ldw	r2,-40(fp)
  80c21c:	1885883a 	add	r2,r3,r2
  80c220:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  80c224:	e0fffe17 	ldw	r3,-8(fp)
  80c228:	e0bff617 	ldw	r2,-40(fp)
  80c22c:	1885c83a 	sub	r2,r3,r2
  80c230:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c234:	e0fff817 	ldw	r3,-32(fp)
  80c238:	e0bff617 	ldw	r2,-40(fp)
  80c23c:	1885883a 	add	r2,r3,r2
  80c240:	10c1ffcc 	andi	r3,r2,2047
  80c244:	e0bffc17 	ldw	r2,-16(fp)
  80c248:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80c24c:	e0bffe17 	ldw	r2,-8(fp)
  80c250:	00bfcf16 	blt	zero,r2,80c190 <__alt_data_end+0xff80c190>
  80c254:	00000106 	br	80c25c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  80c258:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80c25c:	e0fff517 	ldw	r3,-44(fp)
  80c260:	e0bffd17 	ldw	r2,-12(fp)
  80c264:	1880141e 	bne	r3,r2,80c2b8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80c268:	e0bfff17 	ldw	r2,-4(fp)
  80c26c:	1090000c 	andi	r2,r2,16384
  80c270:	1000131e 	bne	r2,zero,80c2c0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80c274:	0001883a 	nop
  80c278:	e0bffc17 	ldw	r2,-16(fp)
  80c27c:	10c00a17 	ldw	r3,40(r2)
  80c280:	e0bff717 	ldw	r2,-36(fp)
  80c284:	1880051e 	bne	r3,r2,80c29c <altera_avalon_jtag_uart_read+0x138>
  80c288:	e0bffc17 	ldw	r2,-16(fp)
  80c28c:	10c00917 	ldw	r3,36(r2)
  80c290:	e0bffc17 	ldw	r2,-16(fp)
  80c294:	10800117 	ldw	r2,4(r2)
  80c298:	18bff736 	bltu	r3,r2,80c278 <__alt_data_end+0xff80c278>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80c29c:	e0bffc17 	ldw	r2,-16(fp)
  80c2a0:	10c00a17 	ldw	r3,40(r2)
  80c2a4:	e0bff717 	ldw	r2,-36(fp)
  80c2a8:	18800726 	beq	r3,r2,80c2c8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80c2ac:	e0bffe17 	ldw	r2,-8(fp)
  80c2b0:	00bfb716 	blt	zero,r2,80c190 <__alt_data_end+0xff80c190>
  80c2b4:	00000506 	br	80c2cc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  80c2b8:	0001883a 	nop
  80c2bc:	00000306 	br	80c2cc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  80c2c0:	0001883a 	nop
  80c2c4:	00000106 	br	80c2cc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  80c2c8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80c2cc:	e0fff517 	ldw	r3,-44(fp)
  80c2d0:	e0bffd17 	ldw	r2,-12(fp)
  80c2d4:	18801826 	beq	r3,r2,80c338 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c2d8:	0005303a 	rdctl	r2,status
  80c2dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c2e0:	e0fffb17 	ldw	r3,-20(fp)
  80c2e4:	00bfff84 	movi	r2,-2
  80c2e8:	1884703a 	and	r2,r3,r2
  80c2ec:	1001703a 	wrctl	status,r2
  
  return context;
  80c2f0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80c2f4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80c2f8:	e0bffc17 	ldw	r2,-16(fp)
  80c2fc:	10800817 	ldw	r2,32(r2)
  80c300:	10c00054 	ori	r3,r2,1
  80c304:	e0bffc17 	ldw	r2,-16(fp)
  80c308:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80c30c:	e0bffc17 	ldw	r2,-16(fp)
  80c310:	10800017 	ldw	r2,0(r2)
  80c314:	10800104 	addi	r2,r2,4
  80c318:	1007883a 	mov	r3,r2
  80c31c:	e0bffc17 	ldw	r2,-16(fp)
  80c320:	10800817 	ldw	r2,32(r2)
  80c324:	18800035 	stwio	r2,0(r3)
  80c328:	e0bffa17 	ldw	r2,-24(fp)
  80c32c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c330:	e0bff917 	ldw	r2,-28(fp)
  80c334:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80c338:	e0fff517 	ldw	r3,-44(fp)
  80c33c:	e0bffd17 	ldw	r2,-12(fp)
  80c340:	18800426 	beq	r3,r2,80c354 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  80c344:	e0fff517 	ldw	r3,-44(fp)
  80c348:	e0bffd17 	ldw	r2,-12(fp)
  80c34c:	1885c83a 	sub	r2,r3,r2
  80c350:	00000606 	br	80c36c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  80c354:	e0bfff17 	ldw	r2,-4(fp)
  80c358:	1090000c 	andi	r2,r2,16384
  80c35c:	10000226 	beq	r2,zero,80c368 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80c360:	00bffd44 	movi	r2,-11
  80c364:	00000106 	br	80c36c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  80c368:	00bffec4 	movi	r2,-5
}
  80c36c:	e037883a 	mov	sp,fp
  80c370:	dfc00117 	ldw	ra,4(sp)
  80c374:	df000017 	ldw	fp,0(sp)
  80c378:	dec00204 	addi	sp,sp,8
  80c37c:	f800283a 	ret

0080c380 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80c380:	defff304 	addi	sp,sp,-52
  80c384:	dfc00c15 	stw	ra,48(sp)
  80c388:	df000b15 	stw	fp,44(sp)
  80c38c:	df000b04 	addi	fp,sp,44
  80c390:	e13ffc15 	stw	r4,-16(fp)
  80c394:	e17ffd15 	stw	r5,-12(fp)
  80c398:	e1bffe15 	stw	r6,-8(fp)
  80c39c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80c3a0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80c3a4:	e0bffd17 	ldw	r2,-12(fp)
  80c3a8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80c3ac:	00003706 	br	80c48c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80c3b0:	e0bffc17 	ldw	r2,-16(fp)
  80c3b4:	10800c17 	ldw	r2,48(r2)
  80c3b8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  80c3bc:	e0bffc17 	ldw	r2,-16(fp)
  80c3c0:	10800d17 	ldw	r2,52(r2)
  80c3c4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  80c3c8:	e0fff917 	ldw	r3,-28(fp)
  80c3cc:	e0bff517 	ldw	r2,-44(fp)
  80c3d0:	1880062e 	bgeu	r3,r2,80c3ec <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80c3d4:	e0fff517 	ldw	r3,-44(fp)
  80c3d8:	e0bff917 	ldw	r2,-28(fp)
  80c3dc:	1885c83a 	sub	r2,r3,r2
  80c3e0:	10bfffc4 	addi	r2,r2,-1
  80c3e4:	e0bff615 	stw	r2,-40(fp)
  80c3e8:	00000b06 	br	80c418 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  80c3ec:	e0bff517 	ldw	r2,-44(fp)
  80c3f0:	10000526 	beq	r2,zero,80c408 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80c3f4:	00c20004 	movi	r3,2048
  80c3f8:	e0bff917 	ldw	r2,-28(fp)
  80c3fc:	1885c83a 	sub	r2,r3,r2
  80c400:	e0bff615 	stw	r2,-40(fp)
  80c404:	00000406 	br	80c418 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80c408:	00c1ffc4 	movi	r3,2047
  80c40c:	e0bff917 	ldw	r2,-28(fp)
  80c410:	1885c83a 	sub	r2,r3,r2
  80c414:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80c418:	e0bff617 	ldw	r2,-40(fp)
  80c41c:	10001e26 	beq	r2,zero,80c498 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  80c420:	e0fffe17 	ldw	r3,-8(fp)
  80c424:	e0bff617 	ldw	r2,-40(fp)
  80c428:	1880022e 	bgeu	r3,r2,80c434 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  80c42c:	e0bffe17 	ldw	r2,-8(fp)
  80c430:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80c434:	e0bffc17 	ldw	r2,-16(fp)
  80c438:	10c20e04 	addi	r3,r2,2104
  80c43c:	e0bff917 	ldw	r2,-28(fp)
  80c440:	1885883a 	add	r2,r3,r2
  80c444:	e1bff617 	ldw	r6,-40(fp)
  80c448:	e17ffd17 	ldw	r5,-12(fp)
  80c44c:	1009883a 	mov	r4,r2
  80c450:	08050680 	call	805068 <memcpy>
      ptr   += n;
  80c454:	e0fffd17 	ldw	r3,-12(fp)
  80c458:	e0bff617 	ldw	r2,-40(fp)
  80c45c:	1885883a 	add	r2,r3,r2
  80c460:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  80c464:	e0fffe17 	ldw	r3,-8(fp)
  80c468:	e0bff617 	ldw	r2,-40(fp)
  80c46c:	1885c83a 	sub	r2,r3,r2
  80c470:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80c474:	e0fff917 	ldw	r3,-28(fp)
  80c478:	e0bff617 	ldw	r2,-40(fp)
  80c47c:	1885883a 	add	r2,r3,r2
  80c480:	10c1ffcc 	andi	r3,r2,2047
  80c484:	e0bffc17 	ldw	r2,-16(fp)
  80c488:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80c48c:	e0bffe17 	ldw	r2,-8(fp)
  80c490:	00bfc716 	blt	zero,r2,80c3b0 <__alt_data_end+0xff80c3b0>
  80c494:	00000106 	br	80c49c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  80c498:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c49c:	0005303a 	rdctl	r2,status
  80c4a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c4a4:	e0fffb17 	ldw	r3,-20(fp)
  80c4a8:	00bfff84 	movi	r2,-2
  80c4ac:	1884703a 	and	r2,r3,r2
  80c4b0:	1001703a 	wrctl	status,r2
  
  return context;
  80c4b4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80c4b8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80c4bc:	e0bffc17 	ldw	r2,-16(fp)
  80c4c0:	10800817 	ldw	r2,32(r2)
  80c4c4:	10c00094 	ori	r3,r2,2
  80c4c8:	e0bffc17 	ldw	r2,-16(fp)
  80c4cc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80c4d0:	e0bffc17 	ldw	r2,-16(fp)
  80c4d4:	10800017 	ldw	r2,0(r2)
  80c4d8:	10800104 	addi	r2,r2,4
  80c4dc:	1007883a 	mov	r3,r2
  80c4e0:	e0bffc17 	ldw	r2,-16(fp)
  80c4e4:	10800817 	ldw	r2,32(r2)
  80c4e8:	18800035 	stwio	r2,0(r3)
  80c4ec:	e0bffa17 	ldw	r2,-24(fp)
  80c4f0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c4f4:	e0bff817 	ldw	r2,-32(fp)
  80c4f8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80c4fc:	e0bffe17 	ldw	r2,-8(fp)
  80c500:	0080100e 	bge	zero,r2,80c544 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  80c504:	e0bfff17 	ldw	r2,-4(fp)
  80c508:	1090000c 	andi	r2,r2,16384
  80c50c:	1000101e 	bne	r2,zero,80c550 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80c510:	0001883a 	nop
  80c514:	e0bffc17 	ldw	r2,-16(fp)
  80c518:	10c00d17 	ldw	r3,52(r2)
  80c51c:	e0bff517 	ldw	r2,-44(fp)
  80c520:	1880051e 	bne	r3,r2,80c538 <altera_avalon_jtag_uart_write+0x1b8>
  80c524:	e0bffc17 	ldw	r2,-16(fp)
  80c528:	10c00917 	ldw	r3,36(r2)
  80c52c:	e0bffc17 	ldw	r2,-16(fp)
  80c530:	10800117 	ldw	r2,4(r2)
  80c534:	18bff736 	bltu	r3,r2,80c514 <__alt_data_end+0xff80c514>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  80c538:	e0bffc17 	ldw	r2,-16(fp)
  80c53c:	10800917 	ldw	r2,36(r2)
  80c540:	1000051e 	bne	r2,zero,80c558 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  80c544:	e0bffe17 	ldw	r2,-8(fp)
  80c548:	00bfd016 	blt	zero,r2,80c48c <__alt_data_end+0xff80c48c>
  80c54c:	00000306 	br	80c55c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  80c550:	0001883a 	nop
  80c554:	00000106 	br	80c55c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  80c558:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80c55c:	e0fffd17 	ldw	r3,-12(fp)
  80c560:	e0bff717 	ldw	r2,-36(fp)
  80c564:	18800426 	beq	r3,r2,80c578 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  80c568:	e0fffd17 	ldw	r3,-12(fp)
  80c56c:	e0bff717 	ldw	r2,-36(fp)
  80c570:	1885c83a 	sub	r2,r3,r2
  80c574:	00000606 	br	80c590 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  80c578:	e0bfff17 	ldw	r2,-4(fp)
  80c57c:	1090000c 	andi	r2,r2,16384
  80c580:	10000226 	beq	r2,zero,80c58c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  80c584:	00bffd44 	movi	r2,-11
  80c588:	00000106 	br	80c590 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80c58c:	00bffec4 	movi	r2,-5
}
  80c590:	e037883a 	mov	sp,fp
  80c594:	dfc00117 	ldw	ra,4(sp)
  80c598:	df000017 	ldw	fp,0(sp)
  80c59c:	dec00204 	addi	sp,sp,8
  80c5a0:	f800283a 	ret

0080c5a4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80c5a4:	defffa04 	addi	sp,sp,-24
  80c5a8:	dfc00515 	stw	ra,20(sp)
  80c5ac:	df000415 	stw	fp,16(sp)
  80c5b0:	df000404 	addi	fp,sp,16
  80c5b4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80c5b8:	0007883a 	mov	r3,zero
  80c5bc:	e0bfff17 	ldw	r2,-4(fp)
  80c5c0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80c5c4:	e0bfff17 	ldw	r2,-4(fp)
  80c5c8:	10800104 	addi	r2,r2,4
  80c5cc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c5d0:	0005303a 	rdctl	r2,status
  80c5d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c5d8:	e0fffd17 	ldw	r3,-12(fp)
  80c5dc:	00bfff84 	movi	r2,-2
  80c5e0:	1884703a 	and	r2,r3,r2
  80c5e4:	1001703a 	wrctl	status,r2
  
  return context;
  80c5e8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80c5ec:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  80c5f0:	080d2c40 	call	80d2c4 <alt_tick>
  80c5f4:	e0bffc17 	ldw	r2,-16(fp)
  80c5f8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c5fc:	e0bffe17 	ldw	r2,-8(fp)
  80c600:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80c604:	0001883a 	nop
  80c608:	e037883a 	mov	sp,fp
  80c60c:	dfc00117 	ldw	ra,4(sp)
  80c610:	df000017 	ldw	fp,0(sp)
  80c614:	dec00204 	addi	sp,sp,8
  80c618:	f800283a 	ret

0080c61c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80c61c:	defff804 	addi	sp,sp,-32
  80c620:	dfc00715 	stw	ra,28(sp)
  80c624:	df000615 	stw	fp,24(sp)
  80c628:	df000604 	addi	fp,sp,24
  80c62c:	e13ffc15 	stw	r4,-16(fp)
  80c630:	e17ffd15 	stw	r5,-12(fp)
  80c634:	e1bffe15 	stw	r6,-8(fp)
  80c638:	e1ffff15 	stw	r7,-4(fp)
  80c63c:	e0bfff17 	ldw	r2,-4(fp)
  80c640:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80c644:	d0a6d417 	ldw	r2,-25776(gp)
  80c648:	1000021e 	bne	r2,zero,80c654 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  80c64c:	e0bffb17 	ldw	r2,-20(fp)
  80c650:	d0a6d415 	stw	r2,-25776(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80c654:	e0bffc17 	ldw	r2,-16(fp)
  80c658:	10800104 	addi	r2,r2,4
  80c65c:	00c001c4 	movi	r3,7
  80c660:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80c664:	d8000015 	stw	zero,0(sp)
  80c668:	e1fffc17 	ldw	r7,-16(fp)
  80c66c:	01802074 	movhi	r6,129
  80c670:	31b16904 	addi	r6,r6,-14940
  80c674:	e17ffe17 	ldw	r5,-8(fp)
  80c678:	e13ffd17 	ldw	r4,-12(fp)
  80c67c:	080cb200 	call	80cb20 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  80c680:	0001883a 	nop
  80c684:	e037883a 	mov	sp,fp
  80c688:	dfc00117 	ldw	ra,4(sp)
  80c68c:	df000017 	ldw	fp,0(sp)
  80c690:	dec00204 	addi	sp,sp,8
  80c694:	f800283a 	ret

0080c698 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80c698:	defff504 	addi	sp,sp,-44
  80c69c:	df000a15 	stw	fp,40(sp)
  80c6a0:	df000a04 	addi	fp,sp,40
  80c6a4:	e13ffc15 	stw	r4,-16(fp)
  80c6a8:	e17ffd15 	stw	r5,-12(fp)
  80c6ac:	e1bffe15 	stw	r6,-8(fp)
  80c6b0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80c6b4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80c6b8:	d0a6d417 	ldw	r2,-25776(gp)
  
  if (alt_ticks_per_second ())
  80c6bc:	10003c26 	beq	r2,zero,80c7b0 <alt_alarm_start+0x118>
  {
    if (alarm)
  80c6c0:	e0bffc17 	ldw	r2,-16(fp)
  80c6c4:	10003826 	beq	r2,zero,80c7a8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80c6c8:	e0bffc17 	ldw	r2,-16(fp)
  80c6cc:	e0fffe17 	ldw	r3,-8(fp)
  80c6d0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80c6d4:	e0bffc17 	ldw	r2,-16(fp)
  80c6d8:	e0ffff17 	ldw	r3,-4(fp)
  80c6dc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c6e0:	0005303a 	rdctl	r2,status
  80c6e4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c6e8:	e0fff917 	ldw	r3,-28(fp)
  80c6ec:	00bfff84 	movi	r2,-2
  80c6f0:	1884703a 	and	r2,r3,r2
  80c6f4:	1001703a 	wrctl	status,r2
  
  return context;
  80c6f8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  80c6fc:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80c700:	d0a6d517 	ldw	r2,-25772(gp)
      
      current_nticks = alt_nticks();
  80c704:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80c708:	e0fffd17 	ldw	r3,-12(fp)
  80c70c:	e0bff617 	ldw	r2,-40(fp)
  80c710:	1885883a 	add	r2,r3,r2
  80c714:	10c00044 	addi	r3,r2,1
  80c718:	e0bffc17 	ldw	r2,-16(fp)
  80c71c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80c720:	e0bffc17 	ldw	r2,-16(fp)
  80c724:	10c00217 	ldw	r3,8(r2)
  80c728:	e0bff617 	ldw	r2,-40(fp)
  80c72c:	1880042e 	bgeu	r3,r2,80c740 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  80c730:	e0bffc17 	ldw	r2,-16(fp)
  80c734:	00c00044 	movi	r3,1
  80c738:	10c00405 	stb	r3,16(r2)
  80c73c:	00000206 	br	80c748 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  80c740:	e0bffc17 	ldw	r2,-16(fp)
  80c744:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80c748:	e0bffc17 	ldw	r2,-16(fp)
  80c74c:	d0e00d04 	addi	r3,gp,-32716
  80c750:	e0fffa15 	stw	r3,-24(fp)
  80c754:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80c758:	e0bffb17 	ldw	r2,-20(fp)
  80c75c:	e0fffa17 	ldw	r3,-24(fp)
  80c760:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80c764:	e0bffa17 	ldw	r2,-24(fp)
  80c768:	10c00017 	ldw	r3,0(r2)
  80c76c:	e0bffb17 	ldw	r2,-20(fp)
  80c770:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80c774:	e0bffa17 	ldw	r2,-24(fp)
  80c778:	10800017 	ldw	r2,0(r2)
  80c77c:	e0fffb17 	ldw	r3,-20(fp)
  80c780:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80c784:	e0bffa17 	ldw	r2,-24(fp)
  80c788:	e0fffb17 	ldw	r3,-20(fp)
  80c78c:	10c00015 	stw	r3,0(r2)
  80c790:	e0bff817 	ldw	r2,-32(fp)
  80c794:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c798:	e0bff717 	ldw	r2,-36(fp)
  80c79c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80c7a0:	0005883a 	mov	r2,zero
  80c7a4:	00000306 	br	80c7b4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  80c7a8:	00bffa84 	movi	r2,-22
  80c7ac:	00000106 	br	80c7b4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  80c7b0:	00bfde84 	movi	r2,-134
  }
}
  80c7b4:	e037883a 	mov	sp,fp
  80c7b8:	df000017 	ldw	fp,0(sp)
  80c7bc:	dec00104 	addi	sp,sp,4
  80c7c0:	f800283a 	ret

0080c7c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c7c4:	defffe04 	addi	sp,sp,-8
  80c7c8:	dfc00115 	stw	ra,4(sp)
  80c7cc:	df000015 	stw	fp,0(sp)
  80c7d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80c7d4:	d0a00b17 	ldw	r2,-32724(gp)
  80c7d8:	10000326 	beq	r2,zero,80c7e8 <alt_get_errno+0x24>
  80c7dc:	d0a00b17 	ldw	r2,-32724(gp)
  80c7e0:	103ee83a 	callr	r2
  80c7e4:	00000106 	br	80c7ec <alt_get_errno+0x28>
  80c7e8:	d0a6cc04 	addi	r2,gp,-25808
}
  80c7ec:	e037883a 	mov	sp,fp
  80c7f0:	dfc00117 	ldw	ra,4(sp)
  80c7f4:	df000017 	ldw	fp,0(sp)
  80c7f8:	dec00204 	addi	sp,sp,8
  80c7fc:	f800283a 	ret

0080c800 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80c800:	defffb04 	addi	sp,sp,-20
  80c804:	dfc00415 	stw	ra,16(sp)
  80c808:	df000315 	stw	fp,12(sp)
  80c80c:	df000304 	addi	fp,sp,12
  80c810:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80c814:	e0bfff17 	ldw	r2,-4(fp)
  80c818:	10000816 	blt	r2,zero,80c83c <close+0x3c>
  80c81c:	01400304 	movi	r5,12
  80c820:	e13fff17 	ldw	r4,-4(fp)
  80c824:	0808ed00 	call	808ed0 <__mulsi3>
  80c828:	1007883a 	mov	r3,r2
  80c82c:	00802074 	movhi	r2,129
  80c830:	10854204 	addi	r2,r2,5384
  80c834:	1885883a 	add	r2,r3,r2
  80c838:	00000106 	br	80c840 <close+0x40>
  80c83c:	0005883a 	mov	r2,zero
  80c840:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80c844:	e0bffd17 	ldw	r2,-12(fp)
  80c848:	10001926 	beq	r2,zero,80c8b0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80c84c:	e0bffd17 	ldw	r2,-12(fp)
  80c850:	10800017 	ldw	r2,0(r2)
  80c854:	10800417 	ldw	r2,16(r2)
  80c858:	10000626 	beq	r2,zero,80c874 <close+0x74>
  80c85c:	e0bffd17 	ldw	r2,-12(fp)
  80c860:	10800017 	ldw	r2,0(r2)
  80c864:	10800417 	ldw	r2,16(r2)
  80c868:	e13ffd17 	ldw	r4,-12(fp)
  80c86c:	103ee83a 	callr	r2
  80c870:	00000106 	br	80c878 <close+0x78>
  80c874:	0005883a 	mov	r2,zero
  80c878:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80c87c:	e13fff17 	ldw	r4,-4(fp)
  80c880:	080d1a40 	call	80d1a4 <alt_release_fd>
    if (rval < 0)
  80c884:	e0bffe17 	ldw	r2,-8(fp)
  80c888:	1000070e 	bge	r2,zero,80c8a8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
  80c88c:	080c7c40 	call	80c7c4 <alt_get_errno>
  80c890:	1007883a 	mov	r3,r2
  80c894:	e0bffe17 	ldw	r2,-8(fp)
  80c898:	0085c83a 	sub	r2,zero,r2
  80c89c:	18800015 	stw	r2,0(r3)
      return -1;
  80c8a0:	00bfffc4 	movi	r2,-1
  80c8a4:	00000706 	br	80c8c4 <close+0xc4>
    }
    return 0;
  80c8a8:	0005883a 	mov	r2,zero
  80c8ac:	00000506 	br	80c8c4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c8b0:	080c7c40 	call	80c7c4 <alt_get_errno>
  80c8b4:	1007883a 	mov	r3,r2
  80c8b8:	00801444 	movi	r2,81
  80c8bc:	18800015 	stw	r2,0(r3)
    return -1;
  80c8c0:	00bfffc4 	movi	r2,-1
  }
}
  80c8c4:	e037883a 	mov	sp,fp
  80c8c8:	dfc00117 	ldw	ra,4(sp)
  80c8cc:	df000017 	ldw	fp,0(sp)
  80c8d0:	dec00204 	addi	sp,sp,8
  80c8d4:	f800283a 	ret

0080c8d8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80c8d8:	defffe04 	addi	sp,sp,-8
  80c8dc:	df000115 	stw	fp,4(sp)
  80c8e0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80c8e4:	e03fff15 	stw	zero,-4(fp)
  80c8e8:	00000506 	br	80c900 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  80c8ec:	e0bfff17 	ldw	r2,-4(fp)
  80c8f0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80c8f4:	e0bfff17 	ldw	r2,-4(fp)
  80c8f8:	10800804 	addi	r2,r2,32
  80c8fc:	e0bfff15 	stw	r2,-4(fp)
  80c900:	e0bfff17 	ldw	r2,-4(fp)
  80c904:	10820030 	cmpltui	r2,r2,2048
  80c908:	103ff81e 	bne	r2,zero,80c8ec <__alt_data_end+0xff80c8ec>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80c90c:	0001883a 	nop
  80c910:	e037883a 	mov	sp,fp
  80c914:	df000017 	ldw	fp,0(sp)
  80c918:	dec00104 	addi	sp,sp,4
  80c91c:	f800283a 	ret

0080c920 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80c920:	defffc04 	addi	sp,sp,-16
  80c924:	df000315 	stw	fp,12(sp)
  80c928:	df000304 	addi	fp,sp,12
  80c92c:	e13ffd15 	stw	r4,-12(fp)
  80c930:	e17ffe15 	stw	r5,-8(fp)
  80c934:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80c938:	e0bfff17 	ldw	r2,-4(fp)
}
  80c93c:	e037883a 	mov	sp,fp
  80c940:	df000017 	ldw	fp,0(sp)
  80c944:	dec00104 	addi	sp,sp,4
  80c948:	f800283a 	ret

0080c94c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c94c:	defffe04 	addi	sp,sp,-8
  80c950:	dfc00115 	stw	ra,4(sp)
  80c954:	df000015 	stw	fp,0(sp)
  80c958:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80c95c:	d0a00b17 	ldw	r2,-32724(gp)
  80c960:	10000326 	beq	r2,zero,80c970 <alt_get_errno+0x24>
  80c964:	d0a00b17 	ldw	r2,-32724(gp)
  80c968:	103ee83a 	callr	r2
  80c96c:	00000106 	br	80c974 <alt_get_errno+0x28>
  80c970:	d0a6cc04 	addi	r2,gp,-25808
}
  80c974:	e037883a 	mov	sp,fp
  80c978:	dfc00117 	ldw	ra,4(sp)
  80c97c:	df000017 	ldw	fp,0(sp)
  80c980:	dec00204 	addi	sp,sp,8
  80c984:	f800283a 	ret

0080c988 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80c988:	defffa04 	addi	sp,sp,-24
  80c98c:	dfc00515 	stw	ra,20(sp)
  80c990:	df000415 	stw	fp,16(sp)
  80c994:	df000404 	addi	fp,sp,16
  80c998:	e13ffe15 	stw	r4,-8(fp)
  80c99c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80c9a0:	e0bffe17 	ldw	r2,-8(fp)
  80c9a4:	10000326 	beq	r2,zero,80c9b4 <alt_dev_llist_insert+0x2c>
  80c9a8:	e0bffe17 	ldw	r2,-8(fp)
  80c9ac:	10800217 	ldw	r2,8(r2)
  80c9b0:	1000061e 	bne	r2,zero,80c9cc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  80c9b4:	080c94c0 	call	80c94c <alt_get_errno>
  80c9b8:	1007883a 	mov	r3,r2
  80c9bc:	00800584 	movi	r2,22
  80c9c0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80c9c4:	00bffa84 	movi	r2,-22
  80c9c8:	00001306 	br	80ca18 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80c9cc:	e0bffe17 	ldw	r2,-8(fp)
  80c9d0:	e0ffff17 	ldw	r3,-4(fp)
  80c9d4:	e0fffc15 	stw	r3,-16(fp)
  80c9d8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80c9dc:	e0bffd17 	ldw	r2,-12(fp)
  80c9e0:	e0fffc17 	ldw	r3,-16(fp)
  80c9e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80c9e8:	e0bffc17 	ldw	r2,-16(fp)
  80c9ec:	10c00017 	ldw	r3,0(r2)
  80c9f0:	e0bffd17 	ldw	r2,-12(fp)
  80c9f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80c9f8:	e0bffc17 	ldw	r2,-16(fp)
  80c9fc:	10800017 	ldw	r2,0(r2)
  80ca00:	e0fffd17 	ldw	r3,-12(fp)
  80ca04:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80ca08:	e0bffc17 	ldw	r2,-16(fp)
  80ca0c:	e0fffd17 	ldw	r3,-12(fp)
  80ca10:	10c00015 	stw	r3,0(r2)

  return 0;  
  80ca14:	0005883a 	mov	r2,zero
}
  80ca18:	e037883a 	mov	sp,fp
  80ca1c:	dfc00117 	ldw	ra,4(sp)
  80ca20:	df000017 	ldw	fp,0(sp)
  80ca24:	dec00204 	addi	sp,sp,8
  80ca28:	f800283a 	ret

0080ca2c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80ca2c:	defffd04 	addi	sp,sp,-12
  80ca30:	dfc00215 	stw	ra,8(sp)
  80ca34:	df000115 	stw	fp,4(sp)
  80ca38:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80ca3c:	00802074 	movhi	r2,129
  80ca40:	10be2e04 	addi	r2,r2,-1864
  80ca44:	e0bfff15 	stw	r2,-4(fp)
  80ca48:	00000606 	br	80ca64 <_do_ctors+0x38>
        (*ctor) (); 
  80ca4c:	e0bfff17 	ldw	r2,-4(fp)
  80ca50:	10800017 	ldw	r2,0(r2)
  80ca54:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80ca58:	e0bfff17 	ldw	r2,-4(fp)
  80ca5c:	10bfff04 	addi	r2,r2,-4
  80ca60:	e0bfff15 	stw	r2,-4(fp)
  80ca64:	e0ffff17 	ldw	r3,-4(fp)
  80ca68:	00802074 	movhi	r2,129
  80ca6c:	10be2f04 	addi	r2,r2,-1860
  80ca70:	18bff62e 	bgeu	r3,r2,80ca4c <__alt_data_end+0xff80ca4c>
        (*ctor) (); 
}
  80ca74:	0001883a 	nop
  80ca78:	e037883a 	mov	sp,fp
  80ca7c:	dfc00117 	ldw	ra,4(sp)
  80ca80:	df000017 	ldw	fp,0(sp)
  80ca84:	dec00204 	addi	sp,sp,8
  80ca88:	f800283a 	ret

0080ca8c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80ca8c:	defffd04 	addi	sp,sp,-12
  80ca90:	dfc00215 	stw	ra,8(sp)
  80ca94:	df000115 	stw	fp,4(sp)
  80ca98:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80ca9c:	00802074 	movhi	r2,129
  80caa0:	10be2e04 	addi	r2,r2,-1864
  80caa4:	e0bfff15 	stw	r2,-4(fp)
  80caa8:	00000606 	br	80cac4 <_do_dtors+0x38>
        (*dtor) (); 
  80caac:	e0bfff17 	ldw	r2,-4(fp)
  80cab0:	10800017 	ldw	r2,0(r2)
  80cab4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80cab8:	e0bfff17 	ldw	r2,-4(fp)
  80cabc:	10bfff04 	addi	r2,r2,-4
  80cac0:	e0bfff15 	stw	r2,-4(fp)
  80cac4:	e0ffff17 	ldw	r3,-4(fp)
  80cac8:	00802074 	movhi	r2,129
  80cacc:	10be2f04 	addi	r2,r2,-1860
  80cad0:	18bff62e 	bgeu	r3,r2,80caac <__alt_data_end+0xff80caac>
        (*dtor) (); 
}
  80cad4:	0001883a 	nop
  80cad8:	e037883a 	mov	sp,fp
  80cadc:	dfc00117 	ldw	ra,4(sp)
  80cae0:	df000017 	ldw	fp,0(sp)
  80cae4:	dec00204 	addi	sp,sp,8
  80cae8:	f800283a 	ret

0080caec <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80caec:	defffe04 	addi	sp,sp,-8
  80caf0:	dfc00115 	stw	ra,4(sp)
  80caf4:	df000015 	stw	fp,0(sp)
  80caf8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80cafc:	01440004 	movi	r5,4096
  80cb00:	0009883a 	mov	r4,zero
  80cb04:	080d64c0 	call	80d64c <alt_icache_flush>
#endif
}
  80cb08:	0001883a 	nop
  80cb0c:	e037883a 	mov	sp,fp
  80cb10:	dfc00117 	ldw	ra,4(sp)
  80cb14:	df000017 	ldw	fp,0(sp)
  80cb18:	dec00204 	addi	sp,sp,8
  80cb1c:	f800283a 	ret

0080cb20 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80cb20:	defff904 	addi	sp,sp,-28
  80cb24:	dfc00615 	stw	ra,24(sp)
  80cb28:	df000515 	stw	fp,20(sp)
  80cb2c:	df000504 	addi	fp,sp,20
  80cb30:	e13ffc15 	stw	r4,-16(fp)
  80cb34:	e17ffd15 	stw	r5,-12(fp)
  80cb38:	e1bffe15 	stw	r6,-8(fp)
  80cb3c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  80cb40:	e0800217 	ldw	r2,8(fp)
  80cb44:	d8800015 	stw	r2,0(sp)
  80cb48:	e1ffff17 	ldw	r7,-4(fp)
  80cb4c:	e1bffe17 	ldw	r6,-8(fp)
  80cb50:	e17ffd17 	ldw	r5,-12(fp)
  80cb54:	e13ffc17 	ldw	r4,-16(fp)
  80cb58:	080ccd00 	call	80ccd0 <alt_iic_isr_register>
}  
  80cb5c:	e037883a 	mov	sp,fp
  80cb60:	dfc00117 	ldw	ra,4(sp)
  80cb64:	df000017 	ldw	fp,0(sp)
  80cb68:	dec00204 	addi	sp,sp,8
  80cb6c:	f800283a 	ret

0080cb70 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  80cb70:	defff904 	addi	sp,sp,-28
  80cb74:	df000615 	stw	fp,24(sp)
  80cb78:	df000604 	addi	fp,sp,24
  80cb7c:	e13ffe15 	stw	r4,-8(fp)
  80cb80:	e17fff15 	stw	r5,-4(fp)
  80cb84:	e0bfff17 	ldw	r2,-4(fp)
  80cb88:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cb8c:	0005303a 	rdctl	r2,status
  80cb90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cb94:	e0fffb17 	ldw	r3,-20(fp)
  80cb98:	00bfff84 	movi	r2,-2
  80cb9c:	1884703a 	and	r2,r3,r2
  80cba0:	1001703a 	wrctl	status,r2
  
  return context;
  80cba4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80cba8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  80cbac:	00c00044 	movi	r3,1
  80cbb0:	e0bffa17 	ldw	r2,-24(fp)
  80cbb4:	1884983a 	sll	r2,r3,r2
  80cbb8:	1007883a 	mov	r3,r2
  80cbbc:	d0a6d317 	ldw	r2,-25780(gp)
  80cbc0:	1884b03a 	or	r2,r3,r2
  80cbc4:	d0a6d315 	stw	r2,-25780(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80cbc8:	d0a6d317 	ldw	r2,-25780(gp)
  80cbcc:	100170fa 	wrctl	ienable,r2
  80cbd0:	e0bffc17 	ldw	r2,-16(fp)
  80cbd4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cbd8:	e0bffd17 	ldw	r2,-12(fp)
  80cbdc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80cbe0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  80cbe4:	0001883a 	nop
}
  80cbe8:	e037883a 	mov	sp,fp
  80cbec:	df000017 	ldw	fp,0(sp)
  80cbf0:	dec00104 	addi	sp,sp,4
  80cbf4:	f800283a 	ret

0080cbf8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  80cbf8:	defff904 	addi	sp,sp,-28
  80cbfc:	df000615 	stw	fp,24(sp)
  80cc00:	df000604 	addi	fp,sp,24
  80cc04:	e13ffe15 	stw	r4,-8(fp)
  80cc08:	e17fff15 	stw	r5,-4(fp)
  80cc0c:	e0bfff17 	ldw	r2,-4(fp)
  80cc10:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cc14:	0005303a 	rdctl	r2,status
  80cc18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cc1c:	e0fffb17 	ldw	r3,-20(fp)
  80cc20:	00bfff84 	movi	r2,-2
  80cc24:	1884703a 	and	r2,r3,r2
  80cc28:	1001703a 	wrctl	status,r2
  
  return context;
  80cc2c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80cc30:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  80cc34:	00c00044 	movi	r3,1
  80cc38:	e0bffa17 	ldw	r2,-24(fp)
  80cc3c:	1884983a 	sll	r2,r3,r2
  80cc40:	0084303a 	nor	r2,zero,r2
  80cc44:	1007883a 	mov	r3,r2
  80cc48:	d0a6d317 	ldw	r2,-25780(gp)
  80cc4c:	1884703a 	and	r2,r3,r2
  80cc50:	d0a6d315 	stw	r2,-25780(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80cc54:	d0a6d317 	ldw	r2,-25780(gp)
  80cc58:	100170fa 	wrctl	ienable,r2
  80cc5c:	e0bffc17 	ldw	r2,-16(fp)
  80cc60:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cc64:	e0bffd17 	ldw	r2,-12(fp)
  80cc68:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80cc6c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  80cc70:	0001883a 	nop
}
  80cc74:	e037883a 	mov	sp,fp
  80cc78:	df000017 	ldw	fp,0(sp)
  80cc7c:	dec00104 	addi	sp,sp,4
  80cc80:	f800283a 	ret

0080cc84 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  80cc84:	defffc04 	addi	sp,sp,-16
  80cc88:	df000315 	stw	fp,12(sp)
  80cc8c:	df000304 	addi	fp,sp,12
  80cc90:	e13ffe15 	stw	r4,-8(fp)
  80cc94:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  80cc98:	000530fa 	rdctl	r2,ienable
  80cc9c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  80cca0:	00c00044 	movi	r3,1
  80cca4:	e0bfff17 	ldw	r2,-4(fp)
  80cca8:	1884983a 	sll	r2,r3,r2
  80ccac:	1007883a 	mov	r3,r2
  80ccb0:	e0bffd17 	ldw	r2,-12(fp)
  80ccb4:	1884703a 	and	r2,r3,r2
  80ccb8:	1004c03a 	cmpne	r2,r2,zero
  80ccbc:	10803fcc 	andi	r2,r2,255
}
  80ccc0:	e037883a 	mov	sp,fp
  80ccc4:	df000017 	ldw	fp,0(sp)
  80ccc8:	dec00104 	addi	sp,sp,4
  80cccc:	f800283a 	ret

0080ccd0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  80ccd0:	defff504 	addi	sp,sp,-44
  80ccd4:	dfc00a15 	stw	ra,40(sp)
  80ccd8:	df000915 	stw	fp,36(sp)
  80ccdc:	df000904 	addi	fp,sp,36
  80cce0:	e13ffc15 	stw	r4,-16(fp)
  80cce4:	e17ffd15 	stw	r5,-12(fp)
  80cce8:	e1bffe15 	stw	r6,-8(fp)
  80ccec:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  80ccf0:	00bffa84 	movi	r2,-22
  80ccf4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  80ccf8:	e0bffd17 	ldw	r2,-12(fp)
  80ccfc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80cd00:	e0bff817 	ldw	r2,-32(fp)
  80cd04:	10800808 	cmpgei	r2,r2,32
  80cd08:	1000271e 	bne	r2,zero,80cda8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cd0c:	0005303a 	rdctl	r2,status
  80cd10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cd14:	e0fffb17 	ldw	r3,-20(fp)
  80cd18:	00bfff84 	movi	r2,-2
  80cd1c:	1884703a 	and	r2,r3,r2
  80cd20:	1001703a 	wrctl	status,r2
  
  return context;
  80cd24:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  80cd28:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  80cd2c:	00802074 	movhi	r2,129
  80cd30:	108c8304 	addi	r2,r2,12812
  80cd34:	e0fff817 	ldw	r3,-32(fp)
  80cd38:	180690fa 	slli	r3,r3,3
  80cd3c:	10c5883a 	add	r2,r2,r3
  80cd40:	e0fffe17 	ldw	r3,-8(fp)
  80cd44:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  80cd48:	00802074 	movhi	r2,129
  80cd4c:	108c8304 	addi	r2,r2,12812
  80cd50:	e0fff817 	ldw	r3,-32(fp)
  80cd54:	180690fa 	slli	r3,r3,3
  80cd58:	10c5883a 	add	r2,r2,r3
  80cd5c:	10800104 	addi	r2,r2,4
  80cd60:	e0ffff17 	ldw	r3,-4(fp)
  80cd64:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  80cd68:	e0bffe17 	ldw	r2,-8(fp)
  80cd6c:	10000526 	beq	r2,zero,80cd84 <alt_iic_isr_register+0xb4>
  80cd70:	e0bff817 	ldw	r2,-32(fp)
  80cd74:	100b883a 	mov	r5,r2
  80cd78:	e13ffc17 	ldw	r4,-16(fp)
  80cd7c:	080cb700 	call	80cb70 <alt_ic_irq_enable>
  80cd80:	00000406 	br	80cd94 <alt_iic_isr_register+0xc4>
  80cd84:	e0bff817 	ldw	r2,-32(fp)
  80cd88:	100b883a 	mov	r5,r2
  80cd8c:	e13ffc17 	ldw	r4,-16(fp)
  80cd90:	080cbf80 	call	80cbf8 <alt_ic_irq_disable>
  80cd94:	e0bff715 	stw	r2,-36(fp)
  80cd98:	e0bffa17 	ldw	r2,-24(fp)
  80cd9c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cda0:	e0bff917 	ldw	r2,-28(fp)
  80cda4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  80cda8:	e0bff717 	ldw	r2,-36(fp)
}
  80cdac:	e037883a 	mov	sp,fp
  80cdb0:	dfc00117 	ldw	ra,4(sp)
  80cdb4:	df000017 	ldw	fp,0(sp)
  80cdb8:	dec00204 	addi	sp,sp,8
  80cdbc:	f800283a 	ret

0080cdc0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80cdc0:	defff804 	addi	sp,sp,-32
  80cdc4:	dfc00715 	stw	ra,28(sp)
  80cdc8:	df000615 	stw	fp,24(sp)
  80cdcc:	dc000515 	stw	r16,20(sp)
  80cdd0:	df000604 	addi	fp,sp,24
  80cdd4:	e13ffb15 	stw	r4,-20(fp)
  80cdd8:	e17ffc15 	stw	r5,-16(fp)
  80cddc:	e1bffd15 	stw	r6,-12(fp)
  80cde0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
  80cde4:	e1bffe17 	ldw	r6,-8(fp)
  80cde8:	e17ffd17 	ldw	r5,-12(fp)
  80cdec:	e13ffc17 	ldw	r4,-16(fp)
  80cdf0:	080d0480 	call	80d048 <open>
  80cdf4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
  80cdf8:	e0bffa17 	ldw	r2,-24(fp)
  80cdfc:	10002216 	blt	r2,zero,80ce88 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
  80ce00:	04002074 	movhi	r16,129
  80ce04:	84054204 	addi	r16,r16,5384
  80ce08:	e0bffa17 	ldw	r2,-24(fp)
  80ce0c:	01400304 	movi	r5,12
  80ce10:	1009883a 	mov	r4,r2
  80ce14:	0808ed00 	call	808ed0 <__mulsi3>
  80ce18:	8085883a 	add	r2,r16,r2
  80ce1c:	10c00017 	ldw	r3,0(r2)
  80ce20:	e0bffb17 	ldw	r2,-20(fp)
  80ce24:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80ce28:	04002074 	movhi	r16,129
  80ce2c:	84054204 	addi	r16,r16,5384
  80ce30:	e0bffa17 	ldw	r2,-24(fp)
  80ce34:	01400304 	movi	r5,12
  80ce38:	1009883a 	mov	r4,r2
  80ce3c:	0808ed00 	call	808ed0 <__mulsi3>
  80ce40:	8085883a 	add	r2,r16,r2
  80ce44:	10800104 	addi	r2,r2,4
  80ce48:	10c00017 	ldw	r3,0(r2)
  80ce4c:	e0bffb17 	ldw	r2,-20(fp)
  80ce50:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80ce54:	04002074 	movhi	r16,129
  80ce58:	84054204 	addi	r16,r16,5384
  80ce5c:	e0bffa17 	ldw	r2,-24(fp)
  80ce60:	01400304 	movi	r5,12
  80ce64:	1009883a 	mov	r4,r2
  80ce68:	0808ed00 	call	808ed0 <__mulsi3>
  80ce6c:	8085883a 	add	r2,r16,r2
  80ce70:	10800204 	addi	r2,r2,8
  80ce74:	10c00017 	ldw	r3,0(r2)
  80ce78:	e0bffb17 	ldw	r2,-20(fp)
  80ce7c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80ce80:	e13ffa17 	ldw	r4,-24(fp)
  80ce84:	080d1a40 	call	80d1a4 <alt_release_fd>
  }
} 
  80ce88:	0001883a 	nop
  80ce8c:	e6ffff04 	addi	sp,fp,-4
  80ce90:	dfc00217 	ldw	ra,8(sp)
  80ce94:	df000117 	ldw	fp,4(sp)
  80ce98:	dc000017 	ldw	r16,0(sp)
  80ce9c:	dec00304 	addi	sp,sp,12
  80cea0:	f800283a 	ret

0080cea4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80cea4:	defffb04 	addi	sp,sp,-20
  80cea8:	dfc00415 	stw	ra,16(sp)
  80ceac:	df000315 	stw	fp,12(sp)
  80ceb0:	df000304 	addi	fp,sp,12
  80ceb4:	e13ffd15 	stw	r4,-12(fp)
  80ceb8:	e17ffe15 	stw	r5,-8(fp)
  80cebc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80cec0:	01c07fc4 	movi	r7,511
  80cec4:	01800044 	movi	r6,1
  80cec8:	e17ffd17 	ldw	r5,-12(fp)
  80cecc:	01002074 	movhi	r4,129
  80ced0:	21054504 	addi	r4,r4,5396
  80ced4:	080cdc00 	call	80cdc0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80ced8:	01c07fc4 	movi	r7,511
  80cedc:	000d883a 	mov	r6,zero
  80cee0:	e17ffe17 	ldw	r5,-8(fp)
  80cee4:	01002074 	movhi	r4,129
  80cee8:	21054204 	addi	r4,r4,5384
  80ceec:	080cdc00 	call	80cdc0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80cef0:	01c07fc4 	movi	r7,511
  80cef4:	01800044 	movi	r6,1
  80cef8:	e17fff17 	ldw	r5,-4(fp)
  80cefc:	01002074 	movhi	r4,129
  80cf00:	21054804 	addi	r4,r4,5408
  80cf04:	080cdc00 	call	80cdc0 <alt_open_fd>
}  
  80cf08:	0001883a 	nop
  80cf0c:	e037883a 	mov	sp,fp
  80cf10:	dfc00117 	ldw	ra,4(sp)
  80cf14:	df000017 	ldw	fp,0(sp)
  80cf18:	dec00204 	addi	sp,sp,8
  80cf1c:	f800283a 	ret

0080cf20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80cf20:	defffe04 	addi	sp,sp,-8
  80cf24:	dfc00115 	stw	ra,4(sp)
  80cf28:	df000015 	stw	fp,0(sp)
  80cf2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80cf30:	d0a00b17 	ldw	r2,-32724(gp)
  80cf34:	10000326 	beq	r2,zero,80cf44 <alt_get_errno+0x24>
  80cf38:	d0a00b17 	ldw	r2,-32724(gp)
  80cf3c:	103ee83a 	callr	r2
  80cf40:	00000106 	br	80cf48 <alt_get_errno+0x28>
  80cf44:	d0a6cc04 	addi	r2,gp,-25808
}
  80cf48:	e037883a 	mov	sp,fp
  80cf4c:	dfc00117 	ldw	ra,4(sp)
  80cf50:	df000017 	ldw	fp,0(sp)
  80cf54:	dec00204 	addi	sp,sp,8
  80cf58:	f800283a 	ret

0080cf5c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80cf5c:	defffb04 	addi	sp,sp,-20
  80cf60:	dfc00415 	stw	ra,16(sp)
  80cf64:	df000315 	stw	fp,12(sp)
  80cf68:	dc000215 	stw	r16,8(sp)
  80cf6c:	df000304 	addi	fp,sp,12
  80cf70:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80cf74:	e0bffe17 	ldw	r2,-8(fp)
  80cf78:	10800217 	ldw	r2,8(r2)
  80cf7c:	10d00034 	orhi	r3,r2,16384
  80cf80:	e0bffe17 	ldw	r2,-8(fp)
  80cf84:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80cf88:	e03ffd15 	stw	zero,-12(fp)
  80cf8c:	00002306 	br	80d01c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80cf90:	04002074 	movhi	r16,129
  80cf94:	84054204 	addi	r16,r16,5384
  80cf98:	e0bffd17 	ldw	r2,-12(fp)
  80cf9c:	01400304 	movi	r5,12
  80cfa0:	1009883a 	mov	r4,r2
  80cfa4:	0808ed00 	call	808ed0 <__mulsi3>
  80cfa8:	8085883a 	add	r2,r16,r2
  80cfac:	10c00017 	ldw	r3,0(r2)
  80cfb0:	e0bffe17 	ldw	r2,-8(fp)
  80cfb4:	10800017 	ldw	r2,0(r2)
  80cfb8:	1880151e 	bne	r3,r2,80d010 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80cfbc:	04002074 	movhi	r16,129
  80cfc0:	84054204 	addi	r16,r16,5384
  80cfc4:	e0bffd17 	ldw	r2,-12(fp)
  80cfc8:	01400304 	movi	r5,12
  80cfcc:	1009883a 	mov	r4,r2
  80cfd0:	0808ed00 	call	808ed0 <__mulsi3>
  80cfd4:	8085883a 	add	r2,r16,r2
  80cfd8:	10800204 	addi	r2,r2,8
  80cfdc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80cfe0:	10000b0e 	bge	r2,zero,80d010 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  80cfe4:	01400304 	movi	r5,12
  80cfe8:	e13ffd17 	ldw	r4,-12(fp)
  80cfec:	0808ed00 	call	808ed0 <__mulsi3>
  80cff0:	1007883a 	mov	r3,r2
  80cff4:	00802074 	movhi	r2,129
  80cff8:	10854204 	addi	r2,r2,5384
  80cffc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80d000:	e0bffe17 	ldw	r2,-8(fp)
  80d004:	18800226 	beq	r3,r2,80d010 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80d008:	00bffcc4 	movi	r2,-13
  80d00c:	00000806 	br	80d030 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80d010:	e0bffd17 	ldw	r2,-12(fp)
  80d014:	10800044 	addi	r2,r2,1
  80d018:	e0bffd15 	stw	r2,-12(fp)
  80d01c:	d0a00a17 	ldw	r2,-32728(gp)
  80d020:	1007883a 	mov	r3,r2
  80d024:	e0bffd17 	ldw	r2,-12(fp)
  80d028:	18bfd92e 	bgeu	r3,r2,80cf90 <__alt_data_end+0xff80cf90>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80d02c:	0005883a 	mov	r2,zero
}
  80d030:	e6ffff04 	addi	sp,fp,-4
  80d034:	dfc00217 	ldw	ra,8(sp)
  80d038:	df000117 	ldw	fp,4(sp)
  80d03c:	dc000017 	ldw	r16,0(sp)
  80d040:	dec00304 	addi	sp,sp,12
  80d044:	f800283a 	ret

0080d048 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80d048:	defff604 	addi	sp,sp,-40
  80d04c:	dfc00915 	stw	ra,36(sp)
  80d050:	df000815 	stw	fp,32(sp)
  80d054:	df000804 	addi	fp,sp,32
  80d058:	e13ffd15 	stw	r4,-12(fp)
  80d05c:	e17ffe15 	stw	r5,-8(fp)
  80d060:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80d064:	00bfffc4 	movi	r2,-1
  80d068:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80d06c:	00bffb44 	movi	r2,-19
  80d070:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  80d074:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80d078:	d1600804 	addi	r5,gp,-32736
  80d07c:	e13ffd17 	ldw	r4,-12(fp)
  80d080:	080d3f00 	call	80d3f0 <alt_find_dev>
  80d084:	e0bff815 	stw	r2,-32(fp)
  80d088:	e0bff817 	ldw	r2,-32(fp)
  80d08c:	1000051e 	bne	r2,zero,80d0a4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80d090:	e13ffd17 	ldw	r4,-12(fp)
  80d094:	080d4800 	call	80d480 <alt_find_file>
  80d098:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  80d09c:	00800044 	movi	r2,1
  80d0a0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80d0a4:	e0bff817 	ldw	r2,-32(fp)
  80d0a8:	10002b26 	beq	r2,zero,80d158 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80d0ac:	e13ff817 	ldw	r4,-32(fp)
  80d0b0:	080d5880 	call	80d588 <alt_get_fd>
  80d0b4:	e0bff915 	stw	r2,-28(fp)
  80d0b8:	e0bff917 	ldw	r2,-28(fp)
  80d0bc:	1000030e 	bge	r2,zero,80d0cc <open+0x84>
    {
      status = index;
  80d0c0:	e0bff917 	ldw	r2,-28(fp)
  80d0c4:	e0bffa15 	stw	r2,-24(fp)
  80d0c8:	00002506 	br	80d160 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
  80d0cc:	01400304 	movi	r5,12
  80d0d0:	e13ff917 	ldw	r4,-28(fp)
  80d0d4:	0808ed00 	call	808ed0 <__mulsi3>
  80d0d8:	1007883a 	mov	r3,r2
  80d0dc:	00802074 	movhi	r2,129
  80d0e0:	10854204 	addi	r2,r2,5384
  80d0e4:	1885883a 	add	r2,r3,r2
  80d0e8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80d0ec:	e0fffe17 	ldw	r3,-8(fp)
  80d0f0:	00900034 	movhi	r2,16384
  80d0f4:	10bfffc4 	addi	r2,r2,-1
  80d0f8:	1886703a 	and	r3,r3,r2
  80d0fc:	e0bffc17 	ldw	r2,-16(fp)
  80d100:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80d104:	e0bffb17 	ldw	r2,-20(fp)
  80d108:	1000051e 	bne	r2,zero,80d120 <open+0xd8>
  80d10c:	e13ffc17 	ldw	r4,-16(fp)
  80d110:	080cf5c0 	call	80cf5c <alt_file_locked>
  80d114:	e0bffa15 	stw	r2,-24(fp)
  80d118:	e0bffa17 	ldw	r2,-24(fp)
  80d11c:	10001016 	blt	r2,zero,80d160 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80d120:	e0bff817 	ldw	r2,-32(fp)
  80d124:	10800317 	ldw	r2,12(r2)
  80d128:	10000826 	beq	r2,zero,80d14c <open+0x104>
  80d12c:	e0bff817 	ldw	r2,-32(fp)
  80d130:	10800317 	ldw	r2,12(r2)
  80d134:	e1ffff17 	ldw	r7,-4(fp)
  80d138:	e1bffe17 	ldw	r6,-8(fp)
  80d13c:	e17ffd17 	ldw	r5,-12(fp)
  80d140:	e13ffc17 	ldw	r4,-16(fp)
  80d144:	103ee83a 	callr	r2
  80d148:	00000106 	br	80d150 <open+0x108>
  80d14c:	0005883a 	mov	r2,zero
  80d150:	e0bffa15 	stw	r2,-24(fp)
  80d154:	00000206 	br	80d160 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80d158:	00bffb44 	movi	r2,-19
  80d15c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80d160:	e0bffa17 	ldw	r2,-24(fp)
  80d164:	1000090e 	bge	r2,zero,80d18c <open+0x144>
  {
    alt_release_fd (index);  
  80d168:	e13ff917 	ldw	r4,-28(fp)
  80d16c:	080d1a40 	call	80d1a4 <alt_release_fd>
    ALT_ERRNO = -status;
  80d170:	080cf200 	call	80cf20 <alt_get_errno>
  80d174:	1007883a 	mov	r3,r2
  80d178:	e0bffa17 	ldw	r2,-24(fp)
  80d17c:	0085c83a 	sub	r2,zero,r2
  80d180:	18800015 	stw	r2,0(r3)
    return -1;
  80d184:	00bfffc4 	movi	r2,-1
  80d188:	00000106 	br	80d190 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
  80d18c:	e0bff917 	ldw	r2,-28(fp)
}
  80d190:	e037883a 	mov	sp,fp
  80d194:	dfc00117 	ldw	ra,4(sp)
  80d198:	df000017 	ldw	fp,0(sp)
  80d19c:	dec00204 	addi	sp,sp,8
  80d1a0:	f800283a 	ret

0080d1a4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80d1a4:	defffc04 	addi	sp,sp,-16
  80d1a8:	dfc00315 	stw	ra,12(sp)
  80d1ac:	df000215 	stw	fp,8(sp)
  80d1b0:	dc000115 	stw	r16,4(sp)
  80d1b4:	df000204 	addi	fp,sp,8
  80d1b8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
  80d1bc:	e0bffe17 	ldw	r2,-8(fp)
  80d1c0:	108000d0 	cmplti	r2,r2,3
  80d1c4:	1000111e 	bne	r2,zero,80d20c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
  80d1c8:	04002074 	movhi	r16,129
  80d1cc:	84054204 	addi	r16,r16,5384
  80d1d0:	e0bffe17 	ldw	r2,-8(fp)
  80d1d4:	01400304 	movi	r5,12
  80d1d8:	1009883a 	mov	r4,r2
  80d1dc:	0808ed00 	call	808ed0 <__mulsi3>
  80d1e0:	8085883a 	add	r2,r16,r2
  80d1e4:	10800204 	addi	r2,r2,8
  80d1e8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80d1ec:	04002074 	movhi	r16,129
  80d1f0:	84054204 	addi	r16,r16,5384
  80d1f4:	e0bffe17 	ldw	r2,-8(fp)
  80d1f8:	01400304 	movi	r5,12
  80d1fc:	1009883a 	mov	r4,r2
  80d200:	0808ed00 	call	808ed0 <__mulsi3>
  80d204:	8085883a 	add	r2,r16,r2
  80d208:	10000015 	stw	zero,0(r2)
  }
}
  80d20c:	0001883a 	nop
  80d210:	e6ffff04 	addi	sp,fp,-4
  80d214:	dfc00217 	ldw	ra,8(sp)
  80d218:	df000117 	ldw	fp,4(sp)
  80d21c:	dc000017 	ldw	r16,0(sp)
  80d220:	dec00304 	addi	sp,sp,12
  80d224:	f800283a 	ret

0080d228 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80d228:	defffa04 	addi	sp,sp,-24
  80d22c:	df000515 	stw	fp,20(sp)
  80d230:	df000504 	addi	fp,sp,20
  80d234:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d238:	0005303a 	rdctl	r2,status
  80d23c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d240:	e0fffc17 	ldw	r3,-16(fp)
  80d244:	00bfff84 	movi	r2,-2
  80d248:	1884703a 	and	r2,r3,r2
  80d24c:	1001703a 	wrctl	status,r2
  
  return context;
  80d250:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80d254:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  80d258:	e0bfff17 	ldw	r2,-4(fp)
  80d25c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80d260:	e0bffd17 	ldw	r2,-12(fp)
  80d264:	10800017 	ldw	r2,0(r2)
  80d268:	e0fffd17 	ldw	r3,-12(fp)
  80d26c:	18c00117 	ldw	r3,4(r3)
  80d270:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  80d274:	e0bffd17 	ldw	r2,-12(fp)
  80d278:	10800117 	ldw	r2,4(r2)
  80d27c:	e0fffd17 	ldw	r3,-12(fp)
  80d280:	18c00017 	ldw	r3,0(r3)
  80d284:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80d288:	e0bffd17 	ldw	r2,-12(fp)
  80d28c:	e0fffd17 	ldw	r3,-12(fp)
  80d290:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80d294:	e0bffd17 	ldw	r2,-12(fp)
  80d298:	e0fffd17 	ldw	r3,-12(fp)
  80d29c:	10c00015 	stw	r3,0(r2)
  80d2a0:	e0bffb17 	ldw	r2,-20(fp)
  80d2a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d2a8:	e0bffe17 	ldw	r2,-8(fp)
  80d2ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80d2b0:	0001883a 	nop
  80d2b4:	e037883a 	mov	sp,fp
  80d2b8:	df000017 	ldw	fp,0(sp)
  80d2bc:	dec00104 	addi	sp,sp,4
  80d2c0:	f800283a 	ret

0080d2c4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80d2c4:	defffb04 	addi	sp,sp,-20
  80d2c8:	dfc00415 	stw	ra,16(sp)
  80d2cc:	df000315 	stw	fp,12(sp)
  80d2d0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80d2d4:	d0a00d17 	ldw	r2,-32716(gp)
  80d2d8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80d2dc:	d0a6d517 	ldw	r2,-25772(gp)
  80d2e0:	10800044 	addi	r2,r2,1
  80d2e4:	d0a6d515 	stw	r2,-25772(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80d2e8:	00002e06 	br	80d3a4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80d2ec:	e0bffd17 	ldw	r2,-12(fp)
  80d2f0:	10800017 	ldw	r2,0(r2)
  80d2f4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80d2f8:	e0bffd17 	ldw	r2,-12(fp)
  80d2fc:	10800403 	ldbu	r2,16(r2)
  80d300:	10803fcc 	andi	r2,r2,255
  80d304:	10000426 	beq	r2,zero,80d318 <alt_tick+0x54>
  80d308:	d0a6d517 	ldw	r2,-25772(gp)
  80d30c:	1000021e 	bne	r2,zero,80d318 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  80d310:	e0bffd17 	ldw	r2,-12(fp)
  80d314:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80d318:	e0bffd17 	ldw	r2,-12(fp)
  80d31c:	10800217 	ldw	r2,8(r2)
  80d320:	d0e6d517 	ldw	r3,-25772(gp)
  80d324:	18801d36 	bltu	r3,r2,80d39c <alt_tick+0xd8>
  80d328:	e0bffd17 	ldw	r2,-12(fp)
  80d32c:	10800403 	ldbu	r2,16(r2)
  80d330:	10803fcc 	andi	r2,r2,255
  80d334:	1000191e 	bne	r2,zero,80d39c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  80d338:	e0bffd17 	ldw	r2,-12(fp)
  80d33c:	10800317 	ldw	r2,12(r2)
  80d340:	e0fffd17 	ldw	r3,-12(fp)
  80d344:	18c00517 	ldw	r3,20(r3)
  80d348:	1809883a 	mov	r4,r3
  80d34c:	103ee83a 	callr	r2
  80d350:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80d354:	e0bfff17 	ldw	r2,-4(fp)
  80d358:	1000031e 	bne	r2,zero,80d368 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  80d35c:	e13ffd17 	ldw	r4,-12(fp)
  80d360:	080d2280 	call	80d228 <alt_alarm_stop>
  80d364:	00000d06 	br	80d39c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  80d368:	e0bffd17 	ldw	r2,-12(fp)
  80d36c:	10c00217 	ldw	r3,8(r2)
  80d370:	e0bfff17 	ldw	r2,-4(fp)
  80d374:	1887883a 	add	r3,r3,r2
  80d378:	e0bffd17 	ldw	r2,-12(fp)
  80d37c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80d380:	e0bffd17 	ldw	r2,-12(fp)
  80d384:	10c00217 	ldw	r3,8(r2)
  80d388:	d0a6d517 	ldw	r2,-25772(gp)
  80d38c:	1880032e 	bgeu	r3,r2,80d39c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  80d390:	e0bffd17 	ldw	r2,-12(fp)
  80d394:	00c00044 	movi	r3,1
  80d398:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  80d39c:	e0bffe17 	ldw	r2,-8(fp)
  80d3a0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80d3a4:	e0fffd17 	ldw	r3,-12(fp)
  80d3a8:	d0a00d04 	addi	r2,gp,-32716
  80d3ac:	18bfcf1e 	bne	r3,r2,80d2ec <__alt_data_end+0xff80d2ec>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80d3b0:	0001883a 	nop
}
  80d3b4:	0001883a 	nop
  80d3b8:	e037883a 	mov	sp,fp
  80d3bc:	dfc00117 	ldw	ra,4(sp)
  80d3c0:	df000017 	ldw	fp,0(sp)
  80d3c4:	dec00204 	addi	sp,sp,8
  80d3c8:	f800283a 	ret

0080d3cc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  80d3cc:	deffff04 	addi	sp,sp,-4
  80d3d0:	df000015 	stw	fp,0(sp)
  80d3d4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80d3d8:	000170fa 	wrctl	ienable,zero
}
  80d3dc:	0001883a 	nop
  80d3e0:	e037883a 	mov	sp,fp
  80d3e4:	df000017 	ldw	fp,0(sp)
  80d3e8:	dec00104 	addi	sp,sp,4
  80d3ec:	f800283a 	ret

0080d3f0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80d3f0:	defffa04 	addi	sp,sp,-24
  80d3f4:	dfc00515 	stw	ra,20(sp)
  80d3f8:	df000415 	stw	fp,16(sp)
  80d3fc:	df000404 	addi	fp,sp,16
  80d400:	e13ffe15 	stw	r4,-8(fp)
  80d404:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80d408:	e0bfff17 	ldw	r2,-4(fp)
  80d40c:	10800017 	ldw	r2,0(r2)
  80d410:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80d414:	e13ffe17 	ldw	r4,-8(fp)
  80d418:	08063b80 	call	8063b8 <strlen>
  80d41c:	10800044 	addi	r2,r2,1
  80d420:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80d424:	00000d06 	br	80d45c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80d428:	e0bffc17 	ldw	r2,-16(fp)
  80d42c:	10800217 	ldw	r2,8(r2)
  80d430:	e0fffd17 	ldw	r3,-12(fp)
  80d434:	180d883a 	mov	r6,r3
  80d438:	e17ffe17 	ldw	r5,-8(fp)
  80d43c:	1009883a 	mov	r4,r2
  80d440:	080de380 	call	80de38 <memcmp>
  80d444:	1000021e 	bne	r2,zero,80d450 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80d448:	e0bffc17 	ldw	r2,-16(fp)
  80d44c:	00000706 	br	80d46c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80d450:	e0bffc17 	ldw	r2,-16(fp)
  80d454:	10800017 	ldw	r2,0(r2)
  80d458:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80d45c:	e0fffc17 	ldw	r3,-16(fp)
  80d460:	e0bfff17 	ldw	r2,-4(fp)
  80d464:	18bff01e 	bne	r3,r2,80d428 <__alt_data_end+0xff80d428>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80d468:	0005883a 	mov	r2,zero
}
  80d46c:	e037883a 	mov	sp,fp
  80d470:	dfc00117 	ldw	ra,4(sp)
  80d474:	df000017 	ldw	fp,0(sp)
  80d478:	dec00204 	addi	sp,sp,8
  80d47c:	f800283a 	ret

0080d480 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80d480:	defffb04 	addi	sp,sp,-20
  80d484:	dfc00415 	stw	ra,16(sp)
  80d488:	df000315 	stw	fp,12(sp)
  80d48c:	df000304 	addi	fp,sp,12
  80d490:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80d494:	d0a00617 	ldw	r2,-32744(gp)
  80d498:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80d49c:	00003106 	br	80d564 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  80d4a0:	e0bffd17 	ldw	r2,-12(fp)
  80d4a4:	10800217 	ldw	r2,8(r2)
  80d4a8:	1009883a 	mov	r4,r2
  80d4ac:	08063b80 	call	8063b8 <strlen>
  80d4b0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  80d4b4:	e0bffd17 	ldw	r2,-12(fp)
  80d4b8:	10c00217 	ldw	r3,8(r2)
  80d4bc:	e0bffe17 	ldw	r2,-8(fp)
  80d4c0:	10bfffc4 	addi	r2,r2,-1
  80d4c4:	1885883a 	add	r2,r3,r2
  80d4c8:	10800003 	ldbu	r2,0(r2)
  80d4cc:	10803fcc 	andi	r2,r2,255
  80d4d0:	1080201c 	xori	r2,r2,128
  80d4d4:	10bfe004 	addi	r2,r2,-128
  80d4d8:	10800bd8 	cmpnei	r2,r2,47
  80d4dc:	1000031e 	bne	r2,zero,80d4ec <alt_find_file+0x6c>
    {
      len -= 1;
  80d4e0:	e0bffe17 	ldw	r2,-8(fp)
  80d4e4:	10bfffc4 	addi	r2,r2,-1
  80d4e8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80d4ec:	e0bffe17 	ldw	r2,-8(fp)
  80d4f0:	e0ffff17 	ldw	r3,-4(fp)
  80d4f4:	1885883a 	add	r2,r3,r2
  80d4f8:	10800003 	ldbu	r2,0(r2)
  80d4fc:	10803fcc 	andi	r2,r2,255
  80d500:	1080201c 	xori	r2,r2,128
  80d504:	10bfe004 	addi	r2,r2,-128
  80d508:	10800be0 	cmpeqi	r2,r2,47
  80d50c:	1000081e 	bne	r2,zero,80d530 <alt_find_file+0xb0>
  80d510:	e0bffe17 	ldw	r2,-8(fp)
  80d514:	e0ffff17 	ldw	r3,-4(fp)
  80d518:	1885883a 	add	r2,r3,r2
  80d51c:	10800003 	ldbu	r2,0(r2)
  80d520:	10803fcc 	andi	r2,r2,255
  80d524:	1080201c 	xori	r2,r2,128
  80d528:	10bfe004 	addi	r2,r2,-128
  80d52c:	10000a1e 	bne	r2,zero,80d558 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  80d530:	e0bffd17 	ldw	r2,-12(fp)
  80d534:	10800217 	ldw	r2,8(r2)
  80d538:	e0fffe17 	ldw	r3,-8(fp)
  80d53c:	180d883a 	mov	r6,r3
  80d540:	e17fff17 	ldw	r5,-4(fp)
  80d544:	1009883a 	mov	r4,r2
  80d548:	080de380 	call	80de38 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80d54c:	1000021e 	bne	r2,zero,80d558 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80d550:	e0bffd17 	ldw	r2,-12(fp)
  80d554:	00000706 	br	80d574 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  80d558:	e0bffd17 	ldw	r2,-12(fp)
  80d55c:	10800017 	ldw	r2,0(r2)
  80d560:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80d564:	e0fffd17 	ldw	r3,-12(fp)
  80d568:	d0a00604 	addi	r2,gp,-32744
  80d56c:	18bfcc1e 	bne	r3,r2,80d4a0 <__alt_data_end+0xff80d4a0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80d570:	0005883a 	mov	r2,zero
}
  80d574:	e037883a 	mov	sp,fp
  80d578:	dfc00117 	ldw	ra,4(sp)
  80d57c:	df000017 	ldw	fp,0(sp)
  80d580:	dec00204 	addi	sp,sp,8
  80d584:	f800283a 	ret

0080d588 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80d588:	defffa04 	addi	sp,sp,-24
  80d58c:	dfc00515 	stw	ra,20(sp)
  80d590:	df000415 	stw	fp,16(sp)
  80d594:	dc000315 	stw	r16,12(sp)
  80d598:	df000404 	addi	fp,sp,16
  80d59c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
  80d5a0:	00bffa04 	movi	r2,-24
  80d5a4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80d5a8:	e03ffc15 	stw	zero,-16(fp)
  80d5ac:	00001d06 	br	80d624 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
  80d5b0:	04002074 	movhi	r16,129
  80d5b4:	84054204 	addi	r16,r16,5384
  80d5b8:	e0bffc17 	ldw	r2,-16(fp)
  80d5bc:	01400304 	movi	r5,12
  80d5c0:	1009883a 	mov	r4,r2
  80d5c4:	0808ed00 	call	808ed0 <__mulsi3>
  80d5c8:	8085883a 	add	r2,r16,r2
  80d5cc:	10800017 	ldw	r2,0(r2)
  80d5d0:	1000111e 	bne	r2,zero,80d618 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
  80d5d4:	04002074 	movhi	r16,129
  80d5d8:	84054204 	addi	r16,r16,5384
  80d5dc:	e0bffc17 	ldw	r2,-16(fp)
  80d5e0:	01400304 	movi	r5,12
  80d5e4:	1009883a 	mov	r4,r2
  80d5e8:	0808ed00 	call	808ed0 <__mulsi3>
  80d5ec:	8085883a 	add	r2,r16,r2
  80d5f0:	e0fffe17 	ldw	r3,-8(fp)
  80d5f4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  80d5f8:	d0e00a17 	ldw	r3,-32728(gp)
  80d5fc:	e0bffc17 	ldw	r2,-16(fp)
  80d600:	1880020e 	bge	r3,r2,80d60c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
  80d604:	e0bffc17 	ldw	r2,-16(fp)
  80d608:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
  80d60c:	e0bffc17 	ldw	r2,-16(fp)
  80d610:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
  80d614:	00000606 	br	80d630 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80d618:	e0bffc17 	ldw	r2,-16(fp)
  80d61c:	10800044 	addi	r2,r2,1
  80d620:	e0bffc15 	stw	r2,-16(fp)
  80d624:	e0bffc17 	ldw	r2,-16(fp)
  80d628:	10800810 	cmplti	r2,r2,32
  80d62c:	103fe01e 	bne	r2,zero,80d5b0 <__alt_data_end+0xff80d5b0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80d630:	e0bffd17 	ldw	r2,-12(fp)
}
  80d634:	e6ffff04 	addi	sp,fp,-4
  80d638:	dfc00217 	ldw	ra,8(sp)
  80d63c:	df000117 	ldw	fp,4(sp)
  80d640:	dc000017 	ldw	r16,0(sp)
  80d644:	dec00304 	addi	sp,sp,12
  80d648:	f800283a 	ret

0080d64c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  80d64c:	defffb04 	addi	sp,sp,-20
  80d650:	df000415 	stw	fp,16(sp)
  80d654:	df000404 	addi	fp,sp,16
  80d658:	e13ffe15 	stw	r4,-8(fp)
  80d65c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  80d660:	e0bfff17 	ldw	r2,-4(fp)
  80d664:	10840070 	cmpltui	r2,r2,4097
  80d668:	1000021e 	bne	r2,zero,80d674 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  80d66c:	00840004 	movi	r2,4096
  80d670:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  80d674:	e0fffe17 	ldw	r3,-8(fp)
  80d678:	e0bfff17 	ldw	r2,-4(fp)
  80d67c:	1885883a 	add	r2,r3,r2
  80d680:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80d684:	e0bffe17 	ldw	r2,-8(fp)
  80d688:	e0bffc15 	stw	r2,-16(fp)
  80d68c:	00000506 	br	80d6a4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  80d690:	e0bffc17 	ldw	r2,-16(fp)
  80d694:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  80d698:	e0bffc17 	ldw	r2,-16(fp)
  80d69c:	10800804 	addi	r2,r2,32
  80d6a0:	e0bffc15 	stw	r2,-16(fp)
  80d6a4:	e0fffc17 	ldw	r3,-16(fp)
  80d6a8:	e0bffd17 	ldw	r2,-12(fp)
  80d6ac:	18bff836 	bltu	r3,r2,80d690 <__alt_data_end+0xff80d690>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  80d6b0:	e0bffe17 	ldw	r2,-8(fp)
  80d6b4:	108007cc 	andi	r2,r2,31
  80d6b8:	10000226 	beq	r2,zero,80d6c4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  80d6bc:	e0bffc17 	ldw	r2,-16(fp)
  80d6c0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  80d6c4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  80d6c8:	0001883a 	nop
  80d6cc:	e037883a 	mov	sp,fp
  80d6d0:	df000017 	ldw	fp,0(sp)
  80d6d4:	dec00104 	addi	sp,sp,4
  80d6d8:	f800283a 	ret

0080d6dc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  80d6dc:	defffe04 	addi	sp,sp,-8
  80d6e0:	df000115 	stw	fp,4(sp)
  80d6e4:	df000104 	addi	fp,sp,4
  80d6e8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  80d6ec:	e0bfff17 	ldw	r2,-4(fp)
  80d6f0:	10bffe84 	addi	r2,r2,-6
  80d6f4:	10c00428 	cmpgeui	r3,r2,16
  80d6f8:	18001a1e 	bne	r3,zero,80d764 <alt_exception_cause_generated_bad_addr+0x88>
  80d6fc:	100690ba 	slli	r3,r2,2
  80d700:	00802074 	movhi	r2,129
  80d704:	10b5c504 	addi	r2,r2,-10476
  80d708:	1885883a 	add	r2,r3,r2
  80d70c:	10800017 	ldw	r2,0(r2)
  80d710:	1000683a 	jmp	r2
  80d714:	0080d754 	movui	r2,861
  80d718:	0080d754 	movui	r2,861
  80d71c:	0080d764 	muli	r2,zero,861
  80d720:	0080d764 	muli	r2,zero,861
  80d724:	0080d764 	muli	r2,zero,861
  80d728:	0080d754 	movui	r2,861
  80d72c:	0080d75c 	xori	r2,zero,861
  80d730:	0080d764 	muli	r2,zero,861
  80d734:	0080d754 	movui	r2,861
  80d738:	0080d754 	movui	r2,861
  80d73c:	0080d764 	muli	r2,zero,861
  80d740:	0080d754 	movui	r2,861
  80d744:	0080d75c 	xori	r2,zero,861
  80d748:	0080d764 	muli	r2,zero,861
  80d74c:	0080d764 	muli	r2,zero,861
  80d750:	0080d754 	movui	r2,861
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  80d754:	00800044 	movi	r2,1
  80d758:	00000306 	br	80d768 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  80d75c:	0005883a 	mov	r2,zero
  80d760:	00000106 	br	80d768 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  80d764:	0005883a 	mov	r2,zero
  }
}
  80d768:	e037883a 	mov	sp,fp
  80d76c:	df000017 	ldw	fp,0(sp)
  80d770:	dec00104 	addi	sp,sp,4
  80d774:	f800283a 	ret

0080d778 <atexit>:
  80d778:	200b883a 	mov	r5,r4
  80d77c:	000f883a 	mov	r7,zero
  80d780:	000d883a 	mov	r6,zero
  80d784:	0009883a 	mov	r4,zero
  80d788:	080e0901 	jmpi	80e090 <__register_exitproc>

0080d78c <exit>:
  80d78c:	defffe04 	addi	sp,sp,-8
  80d790:	000b883a 	mov	r5,zero
  80d794:	dc000015 	stw	r16,0(sp)
  80d798:	dfc00115 	stw	ra,4(sp)
  80d79c:	2021883a 	mov	r16,r4
  80d7a0:	080e1a80 	call	80e1a8 <__call_exitprocs>
  80d7a4:	00802074 	movhi	r2,129
  80d7a8:	1085a204 	addi	r2,r2,5768
  80d7ac:	11000017 	ldw	r4,0(r2)
  80d7b0:	20800f17 	ldw	r2,60(r4)
  80d7b4:	10000126 	beq	r2,zero,80d7bc <exit+0x30>
  80d7b8:	103ee83a 	callr	r2
  80d7bc:	8009883a 	mov	r4,r16
  80d7c0:	080f3180 	call	80f318 <_exit>

0080d7c4 <_fputs_r>:
  80d7c4:	defff804 	addi	sp,sp,-32
  80d7c8:	dc400615 	stw	r17,24(sp)
  80d7cc:	2023883a 	mov	r17,r4
  80d7d0:	2809883a 	mov	r4,r5
  80d7d4:	dc000515 	stw	r16,20(sp)
  80d7d8:	dfc00715 	stw	ra,28(sp)
  80d7dc:	3021883a 	mov	r16,r6
  80d7e0:	d9400315 	stw	r5,12(sp)
  80d7e4:	08063b80 	call	8063b8 <strlen>
  80d7e8:	d8800215 	stw	r2,8(sp)
  80d7ec:	d8800415 	stw	r2,16(sp)
  80d7f0:	d8800304 	addi	r2,sp,12
  80d7f4:	d8800015 	stw	r2,0(sp)
  80d7f8:	00800044 	movi	r2,1
  80d7fc:	d8800115 	stw	r2,4(sp)
  80d800:	88000226 	beq	r17,zero,80d80c <_fputs_r+0x48>
  80d804:	88800e17 	ldw	r2,56(r17)
  80d808:	10001226 	beq	r2,zero,80d854 <_fputs_r+0x90>
  80d80c:	8080030b 	ldhu	r2,12(r16)
  80d810:	10c8000c 	andi	r3,r2,8192
  80d814:	1800061e 	bne	r3,zero,80d830 <_fputs_r+0x6c>
  80d818:	81001917 	ldw	r4,100(r16)
  80d81c:	00f7ffc4 	movi	r3,-8193
  80d820:	10880014 	ori	r2,r2,8192
  80d824:	20c6703a 	and	r3,r4,r3
  80d828:	8080030d 	sth	r2,12(r16)
  80d82c:	80c01915 	stw	r3,100(r16)
  80d830:	d80d883a 	mov	r6,sp
  80d834:	800b883a 	mov	r5,r16
  80d838:	8809883a 	mov	r4,r17
  80d83c:	080d8780 	call	80d878 <__sfvwrite_r>
  80d840:	dfc00717 	ldw	ra,28(sp)
  80d844:	dc400617 	ldw	r17,24(sp)
  80d848:	dc000517 	ldw	r16,20(sp)
  80d84c:	dec00804 	addi	sp,sp,32
  80d850:	f800283a 	ret
  80d854:	8809883a 	mov	r4,r17
  80d858:	080e9300 	call	80e930 <__sinit>
  80d85c:	003feb06 	br	80d80c <__alt_data_end+0xff80d80c>

0080d860 <fputs>:
  80d860:	00802074 	movhi	r2,129
  80d864:	1085a304 	addi	r2,r2,5772
  80d868:	280d883a 	mov	r6,r5
  80d86c:	200b883a 	mov	r5,r4
  80d870:	11000017 	ldw	r4,0(r2)
  80d874:	080d7c41 	jmpi	80d7c4 <_fputs_r>

0080d878 <__sfvwrite_r>:
  80d878:	30800217 	ldw	r2,8(r6)
  80d87c:	10006726 	beq	r2,zero,80da1c <__sfvwrite_r+0x1a4>
  80d880:	28c0030b 	ldhu	r3,12(r5)
  80d884:	defff404 	addi	sp,sp,-48
  80d888:	dd400715 	stw	r21,28(sp)
  80d88c:	dd000615 	stw	r20,24(sp)
  80d890:	dc000215 	stw	r16,8(sp)
  80d894:	dfc00b15 	stw	ra,44(sp)
  80d898:	df000a15 	stw	fp,40(sp)
  80d89c:	ddc00915 	stw	r23,36(sp)
  80d8a0:	dd800815 	stw	r22,32(sp)
  80d8a4:	dcc00515 	stw	r19,20(sp)
  80d8a8:	dc800415 	stw	r18,16(sp)
  80d8ac:	dc400315 	stw	r17,12(sp)
  80d8b0:	1880020c 	andi	r2,r3,8
  80d8b4:	2821883a 	mov	r16,r5
  80d8b8:	202b883a 	mov	r21,r4
  80d8bc:	3029883a 	mov	r20,r6
  80d8c0:	10002726 	beq	r2,zero,80d960 <__sfvwrite_r+0xe8>
  80d8c4:	28800417 	ldw	r2,16(r5)
  80d8c8:	10002526 	beq	r2,zero,80d960 <__sfvwrite_r+0xe8>
  80d8cc:	1880008c 	andi	r2,r3,2
  80d8d0:	a4400017 	ldw	r17,0(r20)
  80d8d4:	10002a26 	beq	r2,zero,80d980 <__sfvwrite_r+0x108>
  80d8d8:	05a00034 	movhi	r22,32768
  80d8dc:	0027883a 	mov	r19,zero
  80d8e0:	0025883a 	mov	r18,zero
  80d8e4:	b5bf0004 	addi	r22,r22,-1024
  80d8e8:	980d883a 	mov	r6,r19
  80d8ec:	a809883a 	mov	r4,r21
  80d8f0:	90004626 	beq	r18,zero,80da0c <__sfvwrite_r+0x194>
  80d8f4:	900f883a 	mov	r7,r18
  80d8f8:	b480022e 	bgeu	r22,r18,80d904 <__sfvwrite_r+0x8c>
  80d8fc:	01e00034 	movhi	r7,32768
  80d900:	39ff0004 	addi	r7,r7,-1024
  80d904:	80800917 	ldw	r2,36(r16)
  80d908:	81400717 	ldw	r5,28(r16)
  80d90c:	103ee83a 	callr	r2
  80d910:	00805a0e 	bge	zero,r2,80da7c <__sfvwrite_r+0x204>
  80d914:	a0c00217 	ldw	r3,8(r20)
  80d918:	98a7883a 	add	r19,r19,r2
  80d91c:	90a5c83a 	sub	r18,r18,r2
  80d920:	1885c83a 	sub	r2,r3,r2
  80d924:	a0800215 	stw	r2,8(r20)
  80d928:	103fef1e 	bne	r2,zero,80d8e8 <__alt_data_end+0xff80d8e8>
  80d92c:	0005883a 	mov	r2,zero
  80d930:	dfc00b17 	ldw	ra,44(sp)
  80d934:	df000a17 	ldw	fp,40(sp)
  80d938:	ddc00917 	ldw	r23,36(sp)
  80d93c:	dd800817 	ldw	r22,32(sp)
  80d940:	dd400717 	ldw	r21,28(sp)
  80d944:	dd000617 	ldw	r20,24(sp)
  80d948:	dcc00517 	ldw	r19,20(sp)
  80d94c:	dc800417 	ldw	r18,16(sp)
  80d950:	dc400317 	ldw	r17,12(sp)
  80d954:	dc000217 	ldw	r16,8(sp)
  80d958:	dec00c04 	addi	sp,sp,48
  80d95c:	f800283a 	ret
  80d960:	800b883a 	mov	r5,r16
  80d964:	a809883a 	mov	r4,r21
  80d968:	080df3c0 	call	80df3c <__swsetup_r>
  80d96c:	1000ee1e 	bne	r2,zero,80dd28 <__sfvwrite_r+0x4b0>
  80d970:	80c0030b 	ldhu	r3,12(r16)
  80d974:	a4400017 	ldw	r17,0(r20)
  80d978:	1880008c 	andi	r2,r3,2
  80d97c:	103fd61e 	bne	r2,zero,80d8d8 <__alt_data_end+0xff80d8d8>
  80d980:	1880004c 	andi	r2,r3,1
  80d984:	1000421e 	bne	r2,zero,80da90 <__sfvwrite_r+0x218>
  80d988:	0039883a 	mov	fp,zero
  80d98c:	0025883a 	mov	r18,zero
  80d990:	90001a26 	beq	r18,zero,80d9fc <__sfvwrite_r+0x184>
  80d994:	1880800c 	andi	r2,r3,512
  80d998:	84c00217 	ldw	r19,8(r16)
  80d99c:	10002126 	beq	r2,zero,80da24 <__sfvwrite_r+0x1ac>
  80d9a0:	982f883a 	mov	r23,r19
  80d9a4:	94c09636 	bltu	r18,r19,80dc00 <__sfvwrite_r+0x388>
  80d9a8:	1881200c 	andi	r2,r3,1152
  80d9ac:	1000a11e 	bne	r2,zero,80dc34 <__sfvwrite_r+0x3bc>
  80d9b0:	81000017 	ldw	r4,0(r16)
  80d9b4:	b80d883a 	mov	r6,r23
  80d9b8:	e00b883a 	mov	r5,fp
  80d9bc:	0807a9c0 	call	807a9c <memmove>
  80d9c0:	80c00217 	ldw	r3,8(r16)
  80d9c4:	81000017 	ldw	r4,0(r16)
  80d9c8:	9005883a 	mov	r2,r18
  80d9cc:	1ce7c83a 	sub	r19,r3,r19
  80d9d0:	25cf883a 	add	r7,r4,r23
  80d9d4:	84c00215 	stw	r19,8(r16)
  80d9d8:	81c00015 	stw	r7,0(r16)
  80d9dc:	a0c00217 	ldw	r3,8(r20)
  80d9e0:	e0b9883a 	add	fp,fp,r2
  80d9e4:	90a5c83a 	sub	r18,r18,r2
  80d9e8:	18a7c83a 	sub	r19,r3,r2
  80d9ec:	a4c00215 	stw	r19,8(r20)
  80d9f0:	983fce26 	beq	r19,zero,80d92c <__alt_data_end+0xff80d92c>
  80d9f4:	80c0030b 	ldhu	r3,12(r16)
  80d9f8:	903fe61e 	bne	r18,zero,80d994 <__alt_data_end+0xff80d994>
  80d9fc:	8f000017 	ldw	fp,0(r17)
  80da00:	8c800117 	ldw	r18,4(r17)
  80da04:	8c400204 	addi	r17,r17,8
  80da08:	003fe106 	br	80d990 <__alt_data_end+0xff80d990>
  80da0c:	8cc00017 	ldw	r19,0(r17)
  80da10:	8c800117 	ldw	r18,4(r17)
  80da14:	8c400204 	addi	r17,r17,8
  80da18:	003fb306 	br	80d8e8 <__alt_data_end+0xff80d8e8>
  80da1c:	0005883a 	mov	r2,zero
  80da20:	f800283a 	ret
  80da24:	81000017 	ldw	r4,0(r16)
  80da28:	80800417 	ldw	r2,16(r16)
  80da2c:	11005a36 	bltu	r2,r4,80db98 <__sfvwrite_r+0x320>
  80da30:	85c00517 	ldw	r23,20(r16)
  80da34:	95c05836 	bltu	r18,r23,80db98 <__sfvwrite_r+0x320>
  80da38:	00a00034 	movhi	r2,32768
  80da3c:	10bfffc4 	addi	r2,r2,-1
  80da40:	9009883a 	mov	r4,r18
  80da44:	1480012e 	bgeu	r2,r18,80da4c <__sfvwrite_r+0x1d4>
  80da48:	1009883a 	mov	r4,r2
  80da4c:	b80b883a 	mov	r5,r23
  80da50:	0808d1c0 	call	808d1c <__divsi3>
  80da54:	b80b883a 	mov	r5,r23
  80da58:	1009883a 	mov	r4,r2
  80da5c:	0808ed00 	call	808ed0 <__mulsi3>
  80da60:	81400717 	ldw	r5,28(r16)
  80da64:	80c00917 	ldw	r3,36(r16)
  80da68:	100f883a 	mov	r7,r2
  80da6c:	e00d883a 	mov	r6,fp
  80da70:	a809883a 	mov	r4,r21
  80da74:	183ee83a 	callr	r3
  80da78:	00bfd816 	blt	zero,r2,80d9dc <__alt_data_end+0xff80d9dc>
  80da7c:	8080030b 	ldhu	r2,12(r16)
  80da80:	10801014 	ori	r2,r2,64
  80da84:	8080030d 	sth	r2,12(r16)
  80da88:	00bfffc4 	movi	r2,-1
  80da8c:	003fa806 	br	80d930 <__alt_data_end+0xff80d930>
  80da90:	0027883a 	mov	r19,zero
  80da94:	0011883a 	mov	r8,zero
  80da98:	0039883a 	mov	fp,zero
  80da9c:	0025883a 	mov	r18,zero
  80daa0:	90001f26 	beq	r18,zero,80db20 <__sfvwrite_r+0x2a8>
  80daa4:	40005a26 	beq	r8,zero,80dc10 <__sfvwrite_r+0x398>
  80daa8:	982d883a 	mov	r22,r19
  80daac:	94c0012e 	bgeu	r18,r19,80dab4 <__sfvwrite_r+0x23c>
  80dab0:	902d883a 	mov	r22,r18
  80dab4:	81000017 	ldw	r4,0(r16)
  80dab8:	80800417 	ldw	r2,16(r16)
  80dabc:	b02f883a 	mov	r23,r22
  80dac0:	81c00517 	ldw	r7,20(r16)
  80dac4:	1100032e 	bgeu	r2,r4,80dad4 <__sfvwrite_r+0x25c>
  80dac8:	80c00217 	ldw	r3,8(r16)
  80dacc:	38c7883a 	add	r3,r7,r3
  80dad0:	1d801816 	blt	r3,r22,80db34 <__sfvwrite_r+0x2bc>
  80dad4:	b1c03e16 	blt	r22,r7,80dbd0 <__sfvwrite_r+0x358>
  80dad8:	80800917 	ldw	r2,36(r16)
  80dadc:	81400717 	ldw	r5,28(r16)
  80dae0:	e00d883a 	mov	r6,fp
  80dae4:	da000115 	stw	r8,4(sp)
  80dae8:	a809883a 	mov	r4,r21
  80daec:	103ee83a 	callr	r2
  80daf0:	102f883a 	mov	r23,r2
  80daf4:	da000117 	ldw	r8,4(sp)
  80daf8:	00bfe00e 	bge	zero,r2,80da7c <__alt_data_end+0xff80da7c>
  80dafc:	9de7c83a 	sub	r19,r19,r23
  80db00:	98001f26 	beq	r19,zero,80db80 <__sfvwrite_r+0x308>
  80db04:	a0800217 	ldw	r2,8(r20)
  80db08:	e5f9883a 	add	fp,fp,r23
  80db0c:	95e5c83a 	sub	r18,r18,r23
  80db10:	15efc83a 	sub	r23,r2,r23
  80db14:	a5c00215 	stw	r23,8(r20)
  80db18:	b83f8426 	beq	r23,zero,80d92c <__alt_data_end+0xff80d92c>
  80db1c:	903fe11e 	bne	r18,zero,80daa4 <__alt_data_end+0xff80daa4>
  80db20:	8f000017 	ldw	fp,0(r17)
  80db24:	8c800117 	ldw	r18,4(r17)
  80db28:	0011883a 	mov	r8,zero
  80db2c:	8c400204 	addi	r17,r17,8
  80db30:	003fdb06 	br	80daa0 <__alt_data_end+0xff80daa0>
  80db34:	180d883a 	mov	r6,r3
  80db38:	e00b883a 	mov	r5,fp
  80db3c:	da000115 	stw	r8,4(sp)
  80db40:	d8c00015 	stw	r3,0(sp)
  80db44:	0807a9c0 	call	807a9c <memmove>
  80db48:	d8c00017 	ldw	r3,0(sp)
  80db4c:	80800017 	ldw	r2,0(r16)
  80db50:	800b883a 	mov	r5,r16
  80db54:	a809883a 	mov	r4,r21
  80db58:	10c5883a 	add	r2,r2,r3
  80db5c:	80800015 	stw	r2,0(r16)
  80db60:	d8c00015 	stw	r3,0(sp)
  80db64:	080e5440 	call	80e544 <_fflush_r>
  80db68:	d8c00017 	ldw	r3,0(sp)
  80db6c:	da000117 	ldw	r8,4(sp)
  80db70:	103fc21e 	bne	r2,zero,80da7c <__alt_data_end+0xff80da7c>
  80db74:	182f883a 	mov	r23,r3
  80db78:	9de7c83a 	sub	r19,r19,r23
  80db7c:	983fe11e 	bne	r19,zero,80db04 <__alt_data_end+0xff80db04>
  80db80:	800b883a 	mov	r5,r16
  80db84:	a809883a 	mov	r4,r21
  80db88:	080e5440 	call	80e544 <_fflush_r>
  80db8c:	103fbb1e 	bne	r2,zero,80da7c <__alt_data_end+0xff80da7c>
  80db90:	0011883a 	mov	r8,zero
  80db94:	003fdb06 	br	80db04 <__alt_data_end+0xff80db04>
  80db98:	94c0012e 	bgeu	r18,r19,80dba0 <__sfvwrite_r+0x328>
  80db9c:	9027883a 	mov	r19,r18
  80dba0:	980d883a 	mov	r6,r19
  80dba4:	e00b883a 	mov	r5,fp
  80dba8:	0807a9c0 	call	807a9c <memmove>
  80dbac:	80800217 	ldw	r2,8(r16)
  80dbb0:	80c00017 	ldw	r3,0(r16)
  80dbb4:	14c5c83a 	sub	r2,r2,r19
  80dbb8:	1cc7883a 	add	r3,r3,r19
  80dbbc:	80800215 	stw	r2,8(r16)
  80dbc0:	80c00015 	stw	r3,0(r16)
  80dbc4:	10004326 	beq	r2,zero,80dcd4 <__sfvwrite_r+0x45c>
  80dbc8:	9805883a 	mov	r2,r19
  80dbcc:	003f8306 	br	80d9dc <__alt_data_end+0xff80d9dc>
  80dbd0:	b00d883a 	mov	r6,r22
  80dbd4:	e00b883a 	mov	r5,fp
  80dbd8:	da000115 	stw	r8,4(sp)
  80dbdc:	0807a9c0 	call	807a9c <memmove>
  80dbe0:	80800217 	ldw	r2,8(r16)
  80dbe4:	80c00017 	ldw	r3,0(r16)
  80dbe8:	da000117 	ldw	r8,4(sp)
  80dbec:	1585c83a 	sub	r2,r2,r22
  80dbf0:	1dad883a 	add	r22,r3,r22
  80dbf4:	80800215 	stw	r2,8(r16)
  80dbf8:	85800015 	stw	r22,0(r16)
  80dbfc:	003fbf06 	br	80dafc <__alt_data_end+0xff80dafc>
  80dc00:	81000017 	ldw	r4,0(r16)
  80dc04:	9027883a 	mov	r19,r18
  80dc08:	902f883a 	mov	r23,r18
  80dc0c:	003f6906 	br	80d9b4 <__alt_data_end+0xff80d9b4>
  80dc10:	900d883a 	mov	r6,r18
  80dc14:	01400284 	movi	r5,10
  80dc18:	e009883a 	mov	r4,fp
  80dc1c:	0804f840 	call	804f84 <memchr>
  80dc20:	10003e26 	beq	r2,zero,80dd1c <__sfvwrite_r+0x4a4>
  80dc24:	10800044 	addi	r2,r2,1
  80dc28:	1727c83a 	sub	r19,r2,fp
  80dc2c:	02000044 	movi	r8,1
  80dc30:	003f9d06 	br	80daa8 <__alt_data_end+0xff80daa8>
  80dc34:	80800517 	ldw	r2,20(r16)
  80dc38:	81400417 	ldw	r5,16(r16)
  80dc3c:	81c00017 	ldw	r7,0(r16)
  80dc40:	10a7883a 	add	r19,r2,r2
  80dc44:	9885883a 	add	r2,r19,r2
  80dc48:	1026d7fa 	srli	r19,r2,31
  80dc4c:	396dc83a 	sub	r22,r7,r5
  80dc50:	b1000044 	addi	r4,r22,1
  80dc54:	9885883a 	add	r2,r19,r2
  80dc58:	1027d07a 	srai	r19,r2,1
  80dc5c:	2485883a 	add	r2,r4,r18
  80dc60:	980d883a 	mov	r6,r19
  80dc64:	9880022e 	bgeu	r19,r2,80dc70 <__sfvwrite_r+0x3f8>
  80dc68:	1027883a 	mov	r19,r2
  80dc6c:	100d883a 	mov	r6,r2
  80dc70:	18c1000c 	andi	r3,r3,1024
  80dc74:	18001c26 	beq	r3,zero,80dce8 <__sfvwrite_r+0x470>
  80dc78:	300b883a 	mov	r5,r6
  80dc7c:	a809883a 	mov	r4,r21
  80dc80:	08005800 	call	800580 <_malloc_r>
  80dc84:	102f883a 	mov	r23,r2
  80dc88:	10002926 	beq	r2,zero,80dd30 <__sfvwrite_r+0x4b8>
  80dc8c:	81400417 	ldw	r5,16(r16)
  80dc90:	b00d883a 	mov	r6,r22
  80dc94:	1009883a 	mov	r4,r2
  80dc98:	08050680 	call	805068 <memcpy>
  80dc9c:	8080030b 	ldhu	r2,12(r16)
  80dca0:	00fedfc4 	movi	r3,-1153
  80dca4:	10c4703a 	and	r2,r2,r3
  80dca8:	10802014 	ori	r2,r2,128
  80dcac:	8080030d 	sth	r2,12(r16)
  80dcb0:	bd89883a 	add	r4,r23,r22
  80dcb4:	9d8fc83a 	sub	r7,r19,r22
  80dcb8:	85c00415 	stw	r23,16(r16)
  80dcbc:	84c00515 	stw	r19,20(r16)
  80dcc0:	81000015 	stw	r4,0(r16)
  80dcc4:	9027883a 	mov	r19,r18
  80dcc8:	81c00215 	stw	r7,8(r16)
  80dccc:	902f883a 	mov	r23,r18
  80dcd0:	003f3806 	br	80d9b4 <__alt_data_end+0xff80d9b4>
  80dcd4:	800b883a 	mov	r5,r16
  80dcd8:	a809883a 	mov	r4,r21
  80dcdc:	080e5440 	call	80e544 <_fflush_r>
  80dce0:	103fb926 	beq	r2,zero,80dbc8 <__alt_data_end+0xff80dbc8>
  80dce4:	003f6506 	br	80da7c <__alt_data_end+0xff80da7c>
  80dce8:	a809883a 	mov	r4,r21
  80dcec:	0807bf80 	call	807bf8 <_realloc_r>
  80dcf0:	102f883a 	mov	r23,r2
  80dcf4:	103fee1e 	bne	r2,zero,80dcb0 <__alt_data_end+0xff80dcb0>
  80dcf8:	81400417 	ldw	r5,16(r16)
  80dcfc:	a809883a 	mov	r4,r21
  80dd00:	0804b980 	call	804b98 <_free_r>
  80dd04:	8080030b 	ldhu	r2,12(r16)
  80dd08:	00ffdfc4 	movi	r3,-129
  80dd0c:	1884703a 	and	r2,r3,r2
  80dd10:	00c00304 	movi	r3,12
  80dd14:	a8c00015 	stw	r3,0(r21)
  80dd18:	003f5906 	br	80da80 <__alt_data_end+0xff80da80>
  80dd1c:	94c00044 	addi	r19,r18,1
  80dd20:	02000044 	movi	r8,1
  80dd24:	003f6006 	br	80daa8 <__alt_data_end+0xff80daa8>
  80dd28:	00bfffc4 	movi	r2,-1
  80dd2c:	003f0006 	br	80d930 <__alt_data_end+0xff80d930>
  80dd30:	00800304 	movi	r2,12
  80dd34:	a8800015 	stw	r2,0(r21)
  80dd38:	8080030b 	ldhu	r2,12(r16)
  80dd3c:	003f5006 	br	80da80 <__alt_data_end+0xff80da80>

0080dd40 <_getc_r>:
  80dd40:	defffd04 	addi	sp,sp,-12
  80dd44:	dc000115 	stw	r16,4(sp)
  80dd48:	dfc00215 	stw	ra,8(sp)
  80dd4c:	2021883a 	mov	r16,r4
  80dd50:	20000226 	beq	r4,zero,80dd5c <_getc_r+0x1c>
  80dd54:	20800e17 	ldw	r2,56(r4)
  80dd58:	10000c26 	beq	r2,zero,80dd8c <_getc_r+0x4c>
  80dd5c:	28800117 	ldw	r2,4(r5)
  80dd60:	10bfffc4 	addi	r2,r2,-1
  80dd64:	28800115 	stw	r2,4(r5)
  80dd68:	10000c16 	blt	r2,zero,80dd9c <_getc_r+0x5c>
  80dd6c:	28800017 	ldw	r2,0(r5)
  80dd70:	10c00044 	addi	r3,r2,1
  80dd74:	28c00015 	stw	r3,0(r5)
  80dd78:	10800003 	ldbu	r2,0(r2)
  80dd7c:	dfc00217 	ldw	ra,8(sp)
  80dd80:	dc000117 	ldw	r16,4(sp)
  80dd84:	dec00304 	addi	sp,sp,12
  80dd88:	f800283a 	ret
  80dd8c:	d9400015 	stw	r5,0(sp)
  80dd90:	080e9300 	call	80e930 <__sinit>
  80dd94:	d9400017 	ldw	r5,0(sp)
  80dd98:	003ff006 	br	80dd5c <__alt_data_end+0xff80dd5c>
  80dd9c:	8009883a 	mov	r4,r16
  80dda0:	dfc00217 	ldw	ra,8(sp)
  80dda4:	dc000117 	ldw	r16,4(sp)
  80dda8:	dec00304 	addi	sp,sp,12
  80ddac:	080deb41 	jmpi	80deb4 <__srget_r>

0080ddb0 <getc>:
  80ddb0:	00802074 	movhi	r2,129
  80ddb4:	defffd04 	addi	sp,sp,-12
  80ddb8:	1085a304 	addi	r2,r2,5772
  80ddbc:	dc400115 	stw	r17,4(sp)
  80ddc0:	14400017 	ldw	r17,0(r2)
  80ddc4:	dc000015 	stw	r16,0(sp)
  80ddc8:	dfc00215 	stw	ra,8(sp)
  80ddcc:	2021883a 	mov	r16,r4
  80ddd0:	88000226 	beq	r17,zero,80dddc <getc+0x2c>
  80ddd4:	88800e17 	ldw	r2,56(r17)
  80ddd8:	10000d26 	beq	r2,zero,80de10 <getc+0x60>
  80dddc:	80800117 	ldw	r2,4(r16)
  80dde0:	10bfffc4 	addi	r2,r2,-1
  80dde4:	80800115 	stw	r2,4(r16)
  80dde8:	10000c16 	blt	r2,zero,80de1c <getc+0x6c>
  80ddec:	80800017 	ldw	r2,0(r16)
  80ddf0:	10c00044 	addi	r3,r2,1
  80ddf4:	80c00015 	stw	r3,0(r16)
  80ddf8:	10800003 	ldbu	r2,0(r2)
  80ddfc:	dfc00217 	ldw	ra,8(sp)
  80de00:	dc400117 	ldw	r17,4(sp)
  80de04:	dc000017 	ldw	r16,0(sp)
  80de08:	dec00304 	addi	sp,sp,12
  80de0c:	f800283a 	ret
  80de10:	8809883a 	mov	r4,r17
  80de14:	080e9300 	call	80e930 <__sinit>
  80de18:	003ff006 	br	80dddc <__alt_data_end+0xff80dddc>
  80de1c:	800b883a 	mov	r5,r16
  80de20:	8809883a 	mov	r4,r17
  80de24:	dfc00217 	ldw	ra,8(sp)
  80de28:	dc400117 	ldw	r17,4(sp)
  80de2c:	dc000017 	ldw	r16,0(sp)
  80de30:	dec00304 	addi	sp,sp,12
  80de34:	080deb41 	jmpi	80deb4 <__srget_r>

0080de38 <memcmp>:
  80de38:	01c000c4 	movi	r7,3
  80de3c:	3980192e 	bgeu	r7,r6,80dea4 <memcmp+0x6c>
  80de40:	2144b03a 	or	r2,r4,r5
  80de44:	11c4703a 	and	r2,r2,r7
  80de48:	10000f26 	beq	r2,zero,80de88 <memcmp+0x50>
  80de4c:	20800003 	ldbu	r2,0(r4)
  80de50:	28c00003 	ldbu	r3,0(r5)
  80de54:	10c0151e 	bne	r2,r3,80deac <memcmp+0x74>
  80de58:	31bfff84 	addi	r6,r6,-2
  80de5c:	01ffffc4 	movi	r7,-1
  80de60:	00000406 	br	80de74 <memcmp+0x3c>
  80de64:	20800003 	ldbu	r2,0(r4)
  80de68:	28c00003 	ldbu	r3,0(r5)
  80de6c:	31bfffc4 	addi	r6,r6,-1
  80de70:	10c00e1e 	bne	r2,r3,80deac <memcmp+0x74>
  80de74:	21000044 	addi	r4,r4,1
  80de78:	29400044 	addi	r5,r5,1
  80de7c:	31fff91e 	bne	r6,r7,80de64 <__alt_data_end+0xff80de64>
  80de80:	0005883a 	mov	r2,zero
  80de84:	f800283a 	ret
  80de88:	20c00017 	ldw	r3,0(r4)
  80de8c:	28800017 	ldw	r2,0(r5)
  80de90:	18bfee1e 	bne	r3,r2,80de4c <__alt_data_end+0xff80de4c>
  80de94:	31bfff04 	addi	r6,r6,-4
  80de98:	21000104 	addi	r4,r4,4
  80de9c:	29400104 	addi	r5,r5,4
  80dea0:	39bff936 	bltu	r7,r6,80de88 <__alt_data_end+0xff80de88>
  80dea4:	303fe91e 	bne	r6,zero,80de4c <__alt_data_end+0xff80de4c>
  80dea8:	003ff506 	br	80de80 <__alt_data_end+0xff80de80>
  80deac:	10c5c83a 	sub	r2,r2,r3
  80deb0:	f800283a 	ret

0080deb4 <__srget_r>:
  80deb4:	defffd04 	addi	sp,sp,-12
  80deb8:	dc400115 	stw	r17,4(sp)
  80debc:	dc000015 	stw	r16,0(sp)
  80dec0:	dfc00215 	stw	ra,8(sp)
  80dec4:	2023883a 	mov	r17,r4
  80dec8:	2821883a 	mov	r16,r5
  80decc:	20000226 	beq	r4,zero,80ded8 <__srget_r+0x24>
  80ded0:	20800e17 	ldw	r2,56(r4)
  80ded4:	10001026 	beq	r2,zero,80df18 <__srget_r+0x64>
  80ded8:	800b883a 	mov	r5,r16
  80dedc:	8809883a 	mov	r4,r17
  80dee0:	080ece00 	call	80ece0 <__srefill_r>
  80dee4:	10000e1e 	bne	r2,zero,80df20 <__srget_r+0x6c>
  80dee8:	80c00017 	ldw	r3,0(r16)
  80deec:	80800117 	ldw	r2,4(r16)
  80def0:	19000044 	addi	r4,r3,1
  80def4:	10bfffc4 	addi	r2,r2,-1
  80def8:	80800115 	stw	r2,4(r16)
  80defc:	81000015 	stw	r4,0(r16)
  80df00:	18800003 	ldbu	r2,0(r3)
  80df04:	dfc00217 	ldw	ra,8(sp)
  80df08:	dc400117 	ldw	r17,4(sp)
  80df0c:	dc000017 	ldw	r16,0(sp)
  80df10:	dec00304 	addi	sp,sp,12
  80df14:	f800283a 	ret
  80df18:	080e9300 	call	80e930 <__sinit>
  80df1c:	003fee06 	br	80ded8 <__alt_data_end+0xff80ded8>
  80df20:	00bfffc4 	movi	r2,-1
  80df24:	003ff706 	br	80df04 <__alt_data_end+0xff80df04>

0080df28 <__srget>:
  80df28:	00802074 	movhi	r2,129
  80df2c:	1085a304 	addi	r2,r2,5772
  80df30:	200b883a 	mov	r5,r4
  80df34:	11000017 	ldw	r4,0(r2)
  80df38:	080deb41 	jmpi	80deb4 <__srget_r>

0080df3c <__swsetup_r>:
  80df3c:	00802074 	movhi	r2,129
  80df40:	defffd04 	addi	sp,sp,-12
  80df44:	1085a304 	addi	r2,r2,5772
  80df48:	dc400115 	stw	r17,4(sp)
  80df4c:	2023883a 	mov	r17,r4
  80df50:	11000017 	ldw	r4,0(r2)
  80df54:	dc000015 	stw	r16,0(sp)
  80df58:	dfc00215 	stw	ra,8(sp)
  80df5c:	2821883a 	mov	r16,r5
  80df60:	20000226 	beq	r4,zero,80df6c <__swsetup_r+0x30>
  80df64:	20800e17 	ldw	r2,56(r4)
  80df68:	10003126 	beq	r2,zero,80e030 <__swsetup_r+0xf4>
  80df6c:	8080030b 	ldhu	r2,12(r16)
  80df70:	10c0020c 	andi	r3,r2,8
  80df74:	1009883a 	mov	r4,r2
  80df78:	18000f26 	beq	r3,zero,80dfb8 <__swsetup_r+0x7c>
  80df7c:	80c00417 	ldw	r3,16(r16)
  80df80:	18001526 	beq	r3,zero,80dfd8 <__swsetup_r+0x9c>
  80df84:	1100004c 	andi	r4,r2,1
  80df88:	20001c1e 	bne	r4,zero,80dffc <__swsetup_r+0xc0>
  80df8c:	1080008c 	andi	r2,r2,2
  80df90:	1000291e 	bne	r2,zero,80e038 <__swsetup_r+0xfc>
  80df94:	80800517 	ldw	r2,20(r16)
  80df98:	80800215 	stw	r2,8(r16)
  80df9c:	18001c26 	beq	r3,zero,80e010 <__swsetup_r+0xd4>
  80dfa0:	0005883a 	mov	r2,zero
  80dfa4:	dfc00217 	ldw	ra,8(sp)
  80dfa8:	dc400117 	ldw	r17,4(sp)
  80dfac:	dc000017 	ldw	r16,0(sp)
  80dfb0:	dec00304 	addi	sp,sp,12
  80dfb4:	f800283a 	ret
  80dfb8:	2080040c 	andi	r2,r4,16
  80dfbc:	10002e26 	beq	r2,zero,80e078 <__swsetup_r+0x13c>
  80dfc0:	2080010c 	andi	r2,r4,4
  80dfc4:	10001e1e 	bne	r2,zero,80e040 <__swsetup_r+0x104>
  80dfc8:	80c00417 	ldw	r3,16(r16)
  80dfcc:	20800214 	ori	r2,r4,8
  80dfd0:	8080030d 	sth	r2,12(r16)
  80dfd4:	183feb1e 	bne	r3,zero,80df84 <__alt_data_end+0xff80df84>
  80dfd8:	1100a00c 	andi	r4,r2,640
  80dfdc:	01408004 	movi	r5,512
  80dfe0:	217fe826 	beq	r4,r5,80df84 <__alt_data_end+0xff80df84>
  80dfe4:	800b883a 	mov	r5,r16
  80dfe8:	8809883a 	mov	r4,r17
  80dfec:	080eb080 	call	80eb08 <__smakebuf_r>
  80dff0:	8080030b 	ldhu	r2,12(r16)
  80dff4:	80c00417 	ldw	r3,16(r16)
  80dff8:	003fe206 	br	80df84 <__alt_data_end+0xff80df84>
  80dffc:	80800517 	ldw	r2,20(r16)
  80e000:	80000215 	stw	zero,8(r16)
  80e004:	0085c83a 	sub	r2,zero,r2
  80e008:	80800615 	stw	r2,24(r16)
  80e00c:	183fe41e 	bne	r3,zero,80dfa0 <__alt_data_end+0xff80dfa0>
  80e010:	80c0030b 	ldhu	r3,12(r16)
  80e014:	0005883a 	mov	r2,zero
  80e018:	1900200c 	andi	r4,r3,128
  80e01c:	203fe126 	beq	r4,zero,80dfa4 <__alt_data_end+0xff80dfa4>
  80e020:	18c01014 	ori	r3,r3,64
  80e024:	80c0030d 	sth	r3,12(r16)
  80e028:	00bfffc4 	movi	r2,-1
  80e02c:	003fdd06 	br	80dfa4 <__alt_data_end+0xff80dfa4>
  80e030:	080e9300 	call	80e930 <__sinit>
  80e034:	003fcd06 	br	80df6c <__alt_data_end+0xff80df6c>
  80e038:	0005883a 	mov	r2,zero
  80e03c:	003fd606 	br	80df98 <__alt_data_end+0xff80df98>
  80e040:	81400c17 	ldw	r5,48(r16)
  80e044:	28000626 	beq	r5,zero,80e060 <__swsetup_r+0x124>
  80e048:	80801004 	addi	r2,r16,64
  80e04c:	28800326 	beq	r5,r2,80e05c <__swsetup_r+0x120>
  80e050:	8809883a 	mov	r4,r17
  80e054:	0804b980 	call	804b98 <_free_r>
  80e058:	8100030b 	ldhu	r4,12(r16)
  80e05c:	80000c15 	stw	zero,48(r16)
  80e060:	80c00417 	ldw	r3,16(r16)
  80e064:	00bff6c4 	movi	r2,-37
  80e068:	1108703a 	and	r4,r2,r4
  80e06c:	80000115 	stw	zero,4(r16)
  80e070:	80c00015 	stw	r3,0(r16)
  80e074:	003fd506 	br	80dfcc <__alt_data_end+0xff80dfcc>
  80e078:	00800244 	movi	r2,9
  80e07c:	88800015 	stw	r2,0(r17)
  80e080:	20801014 	ori	r2,r4,64
  80e084:	8080030d 	sth	r2,12(r16)
  80e088:	00bfffc4 	movi	r2,-1
  80e08c:	003fc506 	br	80dfa4 <__alt_data_end+0xff80dfa4>

0080e090 <__register_exitproc>:
  80e090:	defffa04 	addi	sp,sp,-24
  80e094:	dc000315 	stw	r16,12(sp)
  80e098:	04002074 	movhi	r16,129
  80e09c:	8405a204 	addi	r16,r16,5768
  80e0a0:	80c00017 	ldw	r3,0(r16)
  80e0a4:	dc400415 	stw	r17,16(sp)
  80e0a8:	dfc00515 	stw	ra,20(sp)
  80e0ac:	18805217 	ldw	r2,328(r3)
  80e0b0:	2023883a 	mov	r17,r4
  80e0b4:	10003726 	beq	r2,zero,80e194 <__register_exitproc+0x104>
  80e0b8:	10c00117 	ldw	r3,4(r2)
  80e0bc:	010007c4 	movi	r4,31
  80e0c0:	20c00e16 	blt	r4,r3,80e0fc <__register_exitproc+0x6c>
  80e0c4:	1a000044 	addi	r8,r3,1
  80e0c8:	8800221e 	bne	r17,zero,80e154 <__register_exitproc+0xc4>
  80e0cc:	18c00084 	addi	r3,r3,2
  80e0d0:	18c7883a 	add	r3,r3,r3
  80e0d4:	18c7883a 	add	r3,r3,r3
  80e0d8:	12000115 	stw	r8,4(r2)
  80e0dc:	10c7883a 	add	r3,r2,r3
  80e0e0:	19400015 	stw	r5,0(r3)
  80e0e4:	0005883a 	mov	r2,zero
  80e0e8:	dfc00517 	ldw	ra,20(sp)
  80e0ec:	dc400417 	ldw	r17,16(sp)
  80e0f0:	dc000317 	ldw	r16,12(sp)
  80e0f4:	dec00604 	addi	sp,sp,24
  80e0f8:	f800283a 	ret
  80e0fc:	00802034 	movhi	r2,128
  80e100:	10815604 	addi	r2,r2,1368
  80e104:	10002626 	beq	r2,zero,80e1a0 <__register_exitproc+0x110>
  80e108:	01006404 	movi	r4,400
  80e10c:	d9400015 	stw	r5,0(sp)
  80e110:	d9800115 	stw	r6,4(sp)
  80e114:	d9c00215 	stw	r7,8(sp)
  80e118:	08005580 	call	800558 <malloc>
  80e11c:	d9400017 	ldw	r5,0(sp)
  80e120:	d9800117 	ldw	r6,4(sp)
  80e124:	d9c00217 	ldw	r7,8(sp)
  80e128:	10001d26 	beq	r2,zero,80e1a0 <__register_exitproc+0x110>
  80e12c:	81000017 	ldw	r4,0(r16)
  80e130:	10000115 	stw	zero,4(r2)
  80e134:	02000044 	movi	r8,1
  80e138:	22405217 	ldw	r9,328(r4)
  80e13c:	0007883a 	mov	r3,zero
  80e140:	12400015 	stw	r9,0(r2)
  80e144:	20805215 	stw	r2,328(r4)
  80e148:	10006215 	stw	zero,392(r2)
  80e14c:	10006315 	stw	zero,396(r2)
  80e150:	883fde26 	beq	r17,zero,80e0cc <__alt_data_end+0xff80e0cc>
  80e154:	18c9883a 	add	r4,r3,r3
  80e158:	2109883a 	add	r4,r4,r4
  80e15c:	1109883a 	add	r4,r2,r4
  80e160:	21802215 	stw	r6,136(r4)
  80e164:	01800044 	movi	r6,1
  80e168:	12406217 	ldw	r9,392(r2)
  80e16c:	30cc983a 	sll	r6,r6,r3
  80e170:	4992b03a 	or	r9,r9,r6
  80e174:	12406215 	stw	r9,392(r2)
  80e178:	21c04215 	stw	r7,264(r4)
  80e17c:	01000084 	movi	r4,2
  80e180:	893fd21e 	bne	r17,r4,80e0cc <__alt_data_end+0xff80e0cc>
  80e184:	11006317 	ldw	r4,396(r2)
  80e188:	218cb03a 	or	r6,r4,r6
  80e18c:	11806315 	stw	r6,396(r2)
  80e190:	003fce06 	br	80e0cc <__alt_data_end+0xff80e0cc>
  80e194:	18805304 	addi	r2,r3,332
  80e198:	18805215 	stw	r2,328(r3)
  80e19c:	003fc606 	br	80e0b8 <__alt_data_end+0xff80e0b8>
  80e1a0:	00bfffc4 	movi	r2,-1
  80e1a4:	003fd006 	br	80e0e8 <__alt_data_end+0xff80e0e8>

0080e1a8 <__call_exitprocs>:
  80e1a8:	defff504 	addi	sp,sp,-44
  80e1ac:	df000915 	stw	fp,36(sp)
  80e1b0:	dd400615 	stw	r21,24(sp)
  80e1b4:	dc800315 	stw	r18,12(sp)
  80e1b8:	dfc00a15 	stw	ra,40(sp)
  80e1bc:	ddc00815 	stw	r23,32(sp)
  80e1c0:	dd800715 	stw	r22,28(sp)
  80e1c4:	dd000515 	stw	r20,20(sp)
  80e1c8:	dcc00415 	stw	r19,16(sp)
  80e1cc:	dc400215 	stw	r17,8(sp)
  80e1d0:	dc000115 	stw	r16,4(sp)
  80e1d4:	d9000015 	stw	r4,0(sp)
  80e1d8:	2839883a 	mov	fp,r5
  80e1dc:	04800044 	movi	r18,1
  80e1e0:	057fffc4 	movi	r21,-1
  80e1e4:	00802074 	movhi	r2,129
  80e1e8:	1085a204 	addi	r2,r2,5768
  80e1ec:	12000017 	ldw	r8,0(r2)
  80e1f0:	45005217 	ldw	r20,328(r8)
  80e1f4:	44c05204 	addi	r19,r8,328
  80e1f8:	a0001c26 	beq	r20,zero,80e26c <__call_exitprocs+0xc4>
  80e1fc:	a0800117 	ldw	r2,4(r20)
  80e200:	15ffffc4 	addi	r23,r2,-1
  80e204:	b8000d16 	blt	r23,zero,80e23c <__call_exitprocs+0x94>
  80e208:	14000044 	addi	r16,r2,1
  80e20c:	8421883a 	add	r16,r16,r16
  80e210:	8421883a 	add	r16,r16,r16
  80e214:	84402004 	addi	r17,r16,128
  80e218:	a463883a 	add	r17,r20,r17
  80e21c:	a421883a 	add	r16,r20,r16
  80e220:	e0001e26 	beq	fp,zero,80e29c <__call_exitprocs+0xf4>
  80e224:	80804017 	ldw	r2,256(r16)
  80e228:	e0801c26 	beq	fp,r2,80e29c <__call_exitprocs+0xf4>
  80e22c:	bdffffc4 	addi	r23,r23,-1
  80e230:	843fff04 	addi	r16,r16,-4
  80e234:	8c7fff04 	addi	r17,r17,-4
  80e238:	bd7ff91e 	bne	r23,r21,80e220 <__alt_data_end+0xff80e220>
  80e23c:	00802034 	movhi	r2,128
  80e240:	10815b04 	addi	r2,r2,1388
  80e244:	10000926 	beq	r2,zero,80e26c <__call_exitprocs+0xc4>
  80e248:	a0800117 	ldw	r2,4(r20)
  80e24c:	1000301e 	bne	r2,zero,80e310 <__call_exitprocs+0x168>
  80e250:	a0800017 	ldw	r2,0(r20)
  80e254:	10003226 	beq	r2,zero,80e320 <__call_exitprocs+0x178>
  80e258:	a009883a 	mov	r4,r20
  80e25c:	98800015 	stw	r2,0(r19)
  80e260:	080056c0 	call	80056c <free>
  80e264:	9d000017 	ldw	r20,0(r19)
  80e268:	a03fe41e 	bne	r20,zero,80e1fc <__alt_data_end+0xff80e1fc>
  80e26c:	dfc00a17 	ldw	ra,40(sp)
  80e270:	df000917 	ldw	fp,36(sp)
  80e274:	ddc00817 	ldw	r23,32(sp)
  80e278:	dd800717 	ldw	r22,28(sp)
  80e27c:	dd400617 	ldw	r21,24(sp)
  80e280:	dd000517 	ldw	r20,20(sp)
  80e284:	dcc00417 	ldw	r19,16(sp)
  80e288:	dc800317 	ldw	r18,12(sp)
  80e28c:	dc400217 	ldw	r17,8(sp)
  80e290:	dc000117 	ldw	r16,4(sp)
  80e294:	dec00b04 	addi	sp,sp,44
  80e298:	f800283a 	ret
  80e29c:	a0800117 	ldw	r2,4(r20)
  80e2a0:	80c00017 	ldw	r3,0(r16)
  80e2a4:	10bfffc4 	addi	r2,r2,-1
  80e2a8:	15c01426 	beq	r2,r23,80e2fc <__call_exitprocs+0x154>
  80e2ac:	80000015 	stw	zero,0(r16)
  80e2b0:	183fde26 	beq	r3,zero,80e22c <__alt_data_end+0xff80e22c>
  80e2b4:	95c8983a 	sll	r4,r18,r23
  80e2b8:	a0806217 	ldw	r2,392(r20)
  80e2bc:	a5800117 	ldw	r22,4(r20)
  80e2c0:	2084703a 	and	r2,r4,r2
  80e2c4:	10000b26 	beq	r2,zero,80e2f4 <__call_exitprocs+0x14c>
  80e2c8:	a0806317 	ldw	r2,396(r20)
  80e2cc:	2088703a 	and	r4,r4,r2
  80e2d0:	20000c1e 	bne	r4,zero,80e304 <__call_exitprocs+0x15c>
  80e2d4:	89400017 	ldw	r5,0(r17)
  80e2d8:	d9000017 	ldw	r4,0(sp)
  80e2dc:	183ee83a 	callr	r3
  80e2e0:	a0800117 	ldw	r2,4(r20)
  80e2e4:	15bfbf1e 	bne	r2,r22,80e1e4 <__alt_data_end+0xff80e1e4>
  80e2e8:	98800017 	ldw	r2,0(r19)
  80e2ec:	153fcf26 	beq	r2,r20,80e22c <__alt_data_end+0xff80e22c>
  80e2f0:	003fbc06 	br	80e1e4 <__alt_data_end+0xff80e1e4>
  80e2f4:	183ee83a 	callr	r3
  80e2f8:	003ff906 	br	80e2e0 <__alt_data_end+0xff80e2e0>
  80e2fc:	a5c00115 	stw	r23,4(r20)
  80e300:	003feb06 	br	80e2b0 <__alt_data_end+0xff80e2b0>
  80e304:	89000017 	ldw	r4,0(r17)
  80e308:	183ee83a 	callr	r3
  80e30c:	003ff406 	br	80e2e0 <__alt_data_end+0xff80e2e0>
  80e310:	a0800017 	ldw	r2,0(r20)
  80e314:	a027883a 	mov	r19,r20
  80e318:	1029883a 	mov	r20,r2
  80e31c:	003fb606 	br	80e1f8 <__alt_data_end+0xff80e1f8>
  80e320:	0005883a 	mov	r2,zero
  80e324:	003ffb06 	br	80e314 <__alt_data_end+0xff80e314>

0080e328 <__sflush_r>:
  80e328:	2880030b 	ldhu	r2,12(r5)
  80e32c:	defffb04 	addi	sp,sp,-20
  80e330:	dcc00315 	stw	r19,12(sp)
  80e334:	dc400115 	stw	r17,4(sp)
  80e338:	dfc00415 	stw	ra,16(sp)
  80e33c:	dc800215 	stw	r18,8(sp)
  80e340:	dc000015 	stw	r16,0(sp)
  80e344:	10c0020c 	andi	r3,r2,8
  80e348:	2823883a 	mov	r17,r5
  80e34c:	2027883a 	mov	r19,r4
  80e350:	1800311e 	bne	r3,zero,80e418 <__sflush_r+0xf0>
  80e354:	28c00117 	ldw	r3,4(r5)
  80e358:	10820014 	ori	r2,r2,2048
  80e35c:	2880030d 	sth	r2,12(r5)
  80e360:	00c04b0e 	bge	zero,r3,80e490 <__sflush_r+0x168>
  80e364:	8a000a17 	ldw	r8,40(r17)
  80e368:	40002326 	beq	r8,zero,80e3f8 <__sflush_r+0xd0>
  80e36c:	9c000017 	ldw	r16,0(r19)
  80e370:	10c4000c 	andi	r3,r2,4096
  80e374:	98000015 	stw	zero,0(r19)
  80e378:	18004826 	beq	r3,zero,80e49c <__sflush_r+0x174>
  80e37c:	89801417 	ldw	r6,80(r17)
  80e380:	10c0010c 	andi	r3,r2,4
  80e384:	18000626 	beq	r3,zero,80e3a0 <__sflush_r+0x78>
  80e388:	88c00117 	ldw	r3,4(r17)
  80e38c:	88800c17 	ldw	r2,48(r17)
  80e390:	30cdc83a 	sub	r6,r6,r3
  80e394:	10000226 	beq	r2,zero,80e3a0 <__sflush_r+0x78>
  80e398:	88800f17 	ldw	r2,60(r17)
  80e39c:	308dc83a 	sub	r6,r6,r2
  80e3a0:	89400717 	ldw	r5,28(r17)
  80e3a4:	000f883a 	mov	r7,zero
  80e3a8:	9809883a 	mov	r4,r19
  80e3ac:	403ee83a 	callr	r8
  80e3b0:	00ffffc4 	movi	r3,-1
  80e3b4:	10c04426 	beq	r2,r3,80e4c8 <__sflush_r+0x1a0>
  80e3b8:	88c0030b 	ldhu	r3,12(r17)
  80e3bc:	89000417 	ldw	r4,16(r17)
  80e3c0:	88000115 	stw	zero,4(r17)
  80e3c4:	197dffcc 	andi	r5,r3,63487
  80e3c8:	8940030d 	sth	r5,12(r17)
  80e3cc:	89000015 	stw	r4,0(r17)
  80e3d0:	18c4000c 	andi	r3,r3,4096
  80e3d4:	18002c1e 	bne	r3,zero,80e488 <__sflush_r+0x160>
  80e3d8:	89400c17 	ldw	r5,48(r17)
  80e3dc:	9c000015 	stw	r16,0(r19)
  80e3e0:	28000526 	beq	r5,zero,80e3f8 <__sflush_r+0xd0>
  80e3e4:	88801004 	addi	r2,r17,64
  80e3e8:	28800226 	beq	r5,r2,80e3f4 <__sflush_r+0xcc>
  80e3ec:	9809883a 	mov	r4,r19
  80e3f0:	0804b980 	call	804b98 <_free_r>
  80e3f4:	88000c15 	stw	zero,48(r17)
  80e3f8:	0005883a 	mov	r2,zero
  80e3fc:	dfc00417 	ldw	ra,16(sp)
  80e400:	dcc00317 	ldw	r19,12(sp)
  80e404:	dc800217 	ldw	r18,8(sp)
  80e408:	dc400117 	ldw	r17,4(sp)
  80e40c:	dc000017 	ldw	r16,0(sp)
  80e410:	dec00504 	addi	sp,sp,20
  80e414:	f800283a 	ret
  80e418:	2c800417 	ldw	r18,16(r5)
  80e41c:	903ff626 	beq	r18,zero,80e3f8 <__alt_data_end+0xff80e3f8>
  80e420:	2c000017 	ldw	r16,0(r5)
  80e424:	108000cc 	andi	r2,r2,3
  80e428:	2c800015 	stw	r18,0(r5)
  80e42c:	84a1c83a 	sub	r16,r16,r18
  80e430:	1000131e 	bne	r2,zero,80e480 <__sflush_r+0x158>
  80e434:	28800517 	ldw	r2,20(r5)
  80e438:	88800215 	stw	r2,8(r17)
  80e43c:	04000316 	blt	zero,r16,80e44c <__sflush_r+0x124>
  80e440:	003fed06 	br	80e3f8 <__alt_data_end+0xff80e3f8>
  80e444:	90a5883a 	add	r18,r18,r2
  80e448:	043feb0e 	bge	zero,r16,80e3f8 <__alt_data_end+0xff80e3f8>
  80e44c:	88800917 	ldw	r2,36(r17)
  80e450:	89400717 	ldw	r5,28(r17)
  80e454:	800f883a 	mov	r7,r16
  80e458:	900d883a 	mov	r6,r18
  80e45c:	9809883a 	mov	r4,r19
  80e460:	103ee83a 	callr	r2
  80e464:	80a1c83a 	sub	r16,r16,r2
  80e468:	00bff616 	blt	zero,r2,80e444 <__alt_data_end+0xff80e444>
  80e46c:	88c0030b 	ldhu	r3,12(r17)
  80e470:	00bfffc4 	movi	r2,-1
  80e474:	18c01014 	ori	r3,r3,64
  80e478:	88c0030d 	sth	r3,12(r17)
  80e47c:	003fdf06 	br	80e3fc <__alt_data_end+0xff80e3fc>
  80e480:	0005883a 	mov	r2,zero
  80e484:	003fec06 	br	80e438 <__alt_data_end+0xff80e438>
  80e488:	88801415 	stw	r2,80(r17)
  80e48c:	003fd206 	br	80e3d8 <__alt_data_end+0xff80e3d8>
  80e490:	28c00f17 	ldw	r3,60(r5)
  80e494:	00ffb316 	blt	zero,r3,80e364 <__alt_data_end+0xff80e364>
  80e498:	003fd706 	br	80e3f8 <__alt_data_end+0xff80e3f8>
  80e49c:	89400717 	ldw	r5,28(r17)
  80e4a0:	000d883a 	mov	r6,zero
  80e4a4:	01c00044 	movi	r7,1
  80e4a8:	9809883a 	mov	r4,r19
  80e4ac:	403ee83a 	callr	r8
  80e4b0:	100d883a 	mov	r6,r2
  80e4b4:	00bfffc4 	movi	r2,-1
  80e4b8:	30801426 	beq	r6,r2,80e50c <__sflush_r+0x1e4>
  80e4bc:	8880030b 	ldhu	r2,12(r17)
  80e4c0:	8a000a17 	ldw	r8,40(r17)
  80e4c4:	003fae06 	br	80e380 <__alt_data_end+0xff80e380>
  80e4c8:	98c00017 	ldw	r3,0(r19)
  80e4cc:	183fba26 	beq	r3,zero,80e3b8 <__alt_data_end+0xff80e3b8>
  80e4d0:	01000744 	movi	r4,29
  80e4d4:	19000626 	beq	r3,r4,80e4f0 <__sflush_r+0x1c8>
  80e4d8:	01000584 	movi	r4,22
  80e4dc:	19000426 	beq	r3,r4,80e4f0 <__sflush_r+0x1c8>
  80e4e0:	88c0030b 	ldhu	r3,12(r17)
  80e4e4:	18c01014 	ori	r3,r3,64
  80e4e8:	88c0030d 	sth	r3,12(r17)
  80e4ec:	003fc306 	br	80e3fc <__alt_data_end+0xff80e3fc>
  80e4f0:	8880030b 	ldhu	r2,12(r17)
  80e4f4:	88c00417 	ldw	r3,16(r17)
  80e4f8:	88000115 	stw	zero,4(r17)
  80e4fc:	10bdffcc 	andi	r2,r2,63487
  80e500:	8880030d 	sth	r2,12(r17)
  80e504:	88c00015 	stw	r3,0(r17)
  80e508:	003fb306 	br	80e3d8 <__alt_data_end+0xff80e3d8>
  80e50c:	98800017 	ldw	r2,0(r19)
  80e510:	103fea26 	beq	r2,zero,80e4bc <__alt_data_end+0xff80e4bc>
  80e514:	00c00744 	movi	r3,29
  80e518:	10c00226 	beq	r2,r3,80e524 <__sflush_r+0x1fc>
  80e51c:	00c00584 	movi	r3,22
  80e520:	10c0031e 	bne	r2,r3,80e530 <__sflush_r+0x208>
  80e524:	9c000015 	stw	r16,0(r19)
  80e528:	0005883a 	mov	r2,zero
  80e52c:	003fb306 	br	80e3fc <__alt_data_end+0xff80e3fc>
  80e530:	88c0030b 	ldhu	r3,12(r17)
  80e534:	3005883a 	mov	r2,r6
  80e538:	18c01014 	ori	r3,r3,64
  80e53c:	88c0030d 	sth	r3,12(r17)
  80e540:	003fae06 	br	80e3fc <__alt_data_end+0xff80e3fc>

0080e544 <_fflush_r>:
  80e544:	defffd04 	addi	sp,sp,-12
  80e548:	dc000115 	stw	r16,4(sp)
  80e54c:	dfc00215 	stw	ra,8(sp)
  80e550:	2021883a 	mov	r16,r4
  80e554:	20000226 	beq	r4,zero,80e560 <_fflush_r+0x1c>
  80e558:	20800e17 	ldw	r2,56(r4)
  80e55c:	10000c26 	beq	r2,zero,80e590 <_fflush_r+0x4c>
  80e560:	2880030f 	ldh	r2,12(r5)
  80e564:	1000051e 	bne	r2,zero,80e57c <_fflush_r+0x38>
  80e568:	0005883a 	mov	r2,zero
  80e56c:	dfc00217 	ldw	ra,8(sp)
  80e570:	dc000117 	ldw	r16,4(sp)
  80e574:	dec00304 	addi	sp,sp,12
  80e578:	f800283a 	ret
  80e57c:	8009883a 	mov	r4,r16
  80e580:	dfc00217 	ldw	ra,8(sp)
  80e584:	dc000117 	ldw	r16,4(sp)
  80e588:	dec00304 	addi	sp,sp,12
  80e58c:	080e3281 	jmpi	80e328 <__sflush_r>
  80e590:	d9400015 	stw	r5,0(sp)
  80e594:	080e9300 	call	80e930 <__sinit>
  80e598:	d9400017 	ldw	r5,0(sp)
  80e59c:	003ff006 	br	80e560 <__alt_data_end+0xff80e560>

0080e5a0 <fflush>:
  80e5a0:	20000526 	beq	r4,zero,80e5b8 <fflush+0x18>
  80e5a4:	00802074 	movhi	r2,129
  80e5a8:	1085a304 	addi	r2,r2,5772
  80e5ac:	200b883a 	mov	r5,r4
  80e5b0:	11000017 	ldw	r4,0(r2)
  80e5b4:	080e5441 	jmpi	80e544 <_fflush_r>
  80e5b8:	00802074 	movhi	r2,129
  80e5bc:	1085a204 	addi	r2,r2,5768
  80e5c0:	11000017 	ldw	r4,0(r2)
  80e5c4:	01402074 	movhi	r5,129
  80e5c8:	29795104 	addi	r5,r5,-6844
  80e5cc:	080ea441 	jmpi	80ea44 <_fwalk_reent>

0080e5d0 <__fp_unlock>:
  80e5d0:	0005883a 	mov	r2,zero
  80e5d4:	f800283a 	ret

0080e5d8 <_cleanup_r>:
  80e5d8:	01402074 	movhi	r5,129
  80e5dc:	297c2904 	addi	r5,r5,-3932
  80e5e0:	080ea441 	jmpi	80ea44 <_fwalk_reent>

0080e5e4 <__sinit.part.1>:
  80e5e4:	defff704 	addi	sp,sp,-36
  80e5e8:	00c02074 	movhi	r3,129
  80e5ec:	dfc00815 	stw	ra,32(sp)
  80e5f0:	ddc00715 	stw	r23,28(sp)
  80e5f4:	dd800615 	stw	r22,24(sp)
  80e5f8:	dd400515 	stw	r21,20(sp)
  80e5fc:	dd000415 	stw	r20,16(sp)
  80e600:	dcc00315 	stw	r19,12(sp)
  80e604:	dc800215 	stw	r18,8(sp)
  80e608:	dc400115 	stw	r17,4(sp)
  80e60c:	dc000015 	stw	r16,0(sp)
  80e610:	18f97604 	addi	r3,r3,-6696
  80e614:	24000117 	ldw	r16,4(r4)
  80e618:	20c00f15 	stw	r3,60(r4)
  80e61c:	2080bb04 	addi	r2,r4,748
  80e620:	00c000c4 	movi	r3,3
  80e624:	20c0b915 	stw	r3,740(r4)
  80e628:	2080ba15 	stw	r2,744(r4)
  80e62c:	2000b815 	stw	zero,736(r4)
  80e630:	05c00204 	movi	r23,8
  80e634:	00800104 	movi	r2,4
  80e638:	2025883a 	mov	r18,r4
  80e63c:	b80d883a 	mov	r6,r23
  80e640:	81001704 	addi	r4,r16,92
  80e644:	000b883a 	mov	r5,zero
  80e648:	80000015 	stw	zero,0(r16)
  80e64c:	80000115 	stw	zero,4(r16)
  80e650:	80000215 	stw	zero,8(r16)
  80e654:	8080030d 	sth	r2,12(r16)
  80e658:	80001915 	stw	zero,100(r16)
  80e65c:	8000038d 	sth	zero,14(r16)
  80e660:	80000415 	stw	zero,16(r16)
  80e664:	80000515 	stw	zero,20(r16)
  80e668:	80000615 	stw	zero,24(r16)
  80e66c:	0800d8c0 	call	800d8c <memset>
  80e670:	05802074 	movhi	r22,129
  80e674:	94400217 	ldw	r17,8(r18)
  80e678:	05402074 	movhi	r21,129
  80e67c:	05002074 	movhi	r20,129
  80e680:	04c02074 	movhi	r19,129
  80e684:	b5bbad04 	addi	r22,r22,-4428
  80e688:	ad7bc404 	addi	r21,r21,-4336
  80e68c:	a53be304 	addi	r20,r20,-4212
  80e690:	9cfbfa04 	addi	r19,r19,-4120
  80e694:	85800815 	stw	r22,32(r16)
  80e698:	85400915 	stw	r21,36(r16)
  80e69c:	85000a15 	stw	r20,40(r16)
  80e6a0:	84c00b15 	stw	r19,44(r16)
  80e6a4:	84000715 	stw	r16,28(r16)
  80e6a8:	00800284 	movi	r2,10
  80e6ac:	8880030d 	sth	r2,12(r17)
  80e6b0:	00800044 	movi	r2,1
  80e6b4:	b80d883a 	mov	r6,r23
  80e6b8:	89001704 	addi	r4,r17,92
  80e6bc:	000b883a 	mov	r5,zero
  80e6c0:	88000015 	stw	zero,0(r17)
  80e6c4:	88000115 	stw	zero,4(r17)
  80e6c8:	88000215 	stw	zero,8(r17)
  80e6cc:	88001915 	stw	zero,100(r17)
  80e6d0:	8880038d 	sth	r2,14(r17)
  80e6d4:	88000415 	stw	zero,16(r17)
  80e6d8:	88000515 	stw	zero,20(r17)
  80e6dc:	88000615 	stw	zero,24(r17)
  80e6e0:	0800d8c0 	call	800d8c <memset>
  80e6e4:	94000317 	ldw	r16,12(r18)
  80e6e8:	00800484 	movi	r2,18
  80e6ec:	8c400715 	stw	r17,28(r17)
  80e6f0:	8d800815 	stw	r22,32(r17)
  80e6f4:	8d400915 	stw	r21,36(r17)
  80e6f8:	8d000a15 	stw	r20,40(r17)
  80e6fc:	8cc00b15 	stw	r19,44(r17)
  80e700:	8080030d 	sth	r2,12(r16)
  80e704:	00800084 	movi	r2,2
  80e708:	80000015 	stw	zero,0(r16)
  80e70c:	80000115 	stw	zero,4(r16)
  80e710:	80000215 	stw	zero,8(r16)
  80e714:	80001915 	stw	zero,100(r16)
  80e718:	8080038d 	sth	r2,14(r16)
  80e71c:	80000415 	stw	zero,16(r16)
  80e720:	80000515 	stw	zero,20(r16)
  80e724:	80000615 	stw	zero,24(r16)
  80e728:	b80d883a 	mov	r6,r23
  80e72c:	000b883a 	mov	r5,zero
  80e730:	81001704 	addi	r4,r16,92
  80e734:	0800d8c0 	call	800d8c <memset>
  80e738:	00800044 	movi	r2,1
  80e73c:	84000715 	stw	r16,28(r16)
  80e740:	85800815 	stw	r22,32(r16)
  80e744:	85400915 	stw	r21,36(r16)
  80e748:	85000a15 	stw	r20,40(r16)
  80e74c:	84c00b15 	stw	r19,44(r16)
  80e750:	90800e15 	stw	r2,56(r18)
  80e754:	dfc00817 	ldw	ra,32(sp)
  80e758:	ddc00717 	ldw	r23,28(sp)
  80e75c:	dd800617 	ldw	r22,24(sp)
  80e760:	dd400517 	ldw	r21,20(sp)
  80e764:	dd000417 	ldw	r20,16(sp)
  80e768:	dcc00317 	ldw	r19,12(sp)
  80e76c:	dc800217 	ldw	r18,8(sp)
  80e770:	dc400117 	ldw	r17,4(sp)
  80e774:	dc000017 	ldw	r16,0(sp)
  80e778:	dec00904 	addi	sp,sp,36
  80e77c:	f800283a 	ret

0080e780 <__fp_lock>:
  80e780:	0005883a 	mov	r2,zero
  80e784:	f800283a 	ret

0080e788 <__sfmoreglue>:
  80e788:	defffc04 	addi	sp,sp,-16
  80e78c:	dc800215 	stw	r18,8(sp)
  80e790:	2825883a 	mov	r18,r5
  80e794:	dc000015 	stw	r16,0(sp)
  80e798:	01401a04 	movi	r5,104
  80e79c:	2021883a 	mov	r16,r4
  80e7a0:	913fffc4 	addi	r4,r18,-1
  80e7a4:	dfc00315 	stw	ra,12(sp)
  80e7a8:	dc400115 	stw	r17,4(sp)
  80e7ac:	0808ed00 	call	808ed0 <__mulsi3>
  80e7b0:	8009883a 	mov	r4,r16
  80e7b4:	11401d04 	addi	r5,r2,116
  80e7b8:	1023883a 	mov	r17,r2
  80e7bc:	08005800 	call	800580 <_malloc_r>
  80e7c0:	1021883a 	mov	r16,r2
  80e7c4:	10000726 	beq	r2,zero,80e7e4 <__sfmoreglue+0x5c>
  80e7c8:	11000304 	addi	r4,r2,12
  80e7cc:	10000015 	stw	zero,0(r2)
  80e7d0:	14800115 	stw	r18,4(r2)
  80e7d4:	11000215 	stw	r4,8(r2)
  80e7d8:	89801a04 	addi	r6,r17,104
  80e7dc:	000b883a 	mov	r5,zero
  80e7e0:	0800d8c0 	call	800d8c <memset>
  80e7e4:	8005883a 	mov	r2,r16
  80e7e8:	dfc00317 	ldw	ra,12(sp)
  80e7ec:	dc800217 	ldw	r18,8(sp)
  80e7f0:	dc400117 	ldw	r17,4(sp)
  80e7f4:	dc000017 	ldw	r16,0(sp)
  80e7f8:	dec00404 	addi	sp,sp,16
  80e7fc:	f800283a 	ret

0080e800 <__sfp>:
  80e800:	defffb04 	addi	sp,sp,-20
  80e804:	dc000015 	stw	r16,0(sp)
  80e808:	04002074 	movhi	r16,129
  80e80c:	8405a204 	addi	r16,r16,5768
  80e810:	dcc00315 	stw	r19,12(sp)
  80e814:	2027883a 	mov	r19,r4
  80e818:	81000017 	ldw	r4,0(r16)
  80e81c:	dfc00415 	stw	ra,16(sp)
  80e820:	dc800215 	stw	r18,8(sp)
  80e824:	20800e17 	ldw	r2,56(r4)
  80e828:	dc400115 	stw	r17,4(sp)
  80e82c:	1000021e 	bne	r2,zero,80e838 <__sfp+0x38>
  80e830:	080e5e40 	call	80e5e4 <__sinit.part.1>
  80e834:	81000017 	ldw	r4,0(r16)
  80e838:	2480b804 	addi	r18,r4,736
  80e83c:	047fffc4 	movi	r17,-1
  80e840:	91000117 	ldw	r4,4(r18)
  80e844:	94000217 	ldw	r16,8(r18)
  80e848:	213fffc4 	addi	r4,r4,-1
  80e84c:	20000a16 	blt	r4,zero,80e878 <__sfp+0x78>
  80e850:	8080030f 	ldh	r2,12(r16)
  80e854:	10000c26 	beq	r2,zero,80e888 <__sfp+0x88>
  80e858:	80c01d04 	addi	r3,r16,116
  80e85c:	00000206 	br	80e868 <__sfp+0x68>
  80e860:	18bfe60f 	ldh	r2,-104(r3)
  80e864:	10000826 	beq	r2,zero,80e888 <__sfp+0x88>
  80e868:	213fffc4 	addi	r4,r4,-1
  80e86c:	1c3ffd04 	addi	r16,r3,-12
  80e870:	18c01a04 	addi	r3,r3,104
  80e874:	247ffa1e 	bne	r4,r17,80e860 <__alt_data_end+0xff80e860>
  80e878:	90800017 	ldw	r2,0(r18)
  80e87c:	10001d26 	beq	r2,zero,80e8f4 <__sfp+0xf4>
  80e880:	1025883a 	mov	r18,r2
  80e884:	003fee06 	br	80e840 <__alt_data_end+0xff80e840>
  80e888:	00bfffc4 	movi	r2,-1
  80e88c:	8080038d 	sth	r2,14(r16)
  80e890:	00800044 	movi	r2,1
  80e894:	8080030d 	sth	r2,12(r16)
  80e898:	80001915 	stw	zero,100(r16)
  80e89c:	80000015 	stw	zero,0(r16)
  80e8a0:	80000215 	stw	zero,8(r16)
  80e8a4:	80000115 	stw	zero,4(r16)
  80e8a8:	80000415 	stw	zero,16(r16)
  80e8ac:	80000515 	stw	zero,20(r16)
  80e8b0:	80000615 	stw	zero,24(r16)
  80e8b4:	01800204 	movi	r6,8
  80e8b8:	000b883a 	mov	r5,zero
  80e8bc:	81001704 	addi	r4,r16,92
  80e8c0:	0800d8c0 	call	800d8c <memset>
  80e8c4:	8005883a 	mov	r2,r16
  80e8c8:	80000c15 	stw	zero,48(r16)
  80e8cc:	80000d15 	stw	zero,52(r16)
  80e8d0:	80001115 	stw	zero,68(r16)
  80e8d4:	80001215 	stw	zero,72(r16)
  80e8d8:	dfc00417 	ldw	ra,16(sp)
  80e8dc:	dcc00317 	ldw	r19,12(sp)
  80e8e0:	dc800217 	ldw	r18,8(sp)
  80e8e4:	dc400117 	ldw	r17,4(sp)
  80e8e8:	dc000017 	ldw	r16,0(sp)
  80e8ec:	dec00504 	addi	sp,sp,20
  80e8f0:	f800283a 	ret
  80e8f4:	01400104 	movi	r5,4
  80e8f8:	9809883a 	mov	r4,r19
  80e8fc:	080e7880 	call	80e788 <__sfmoreglue>
  80e900:	90800015 	stw	r2,0(r18)
  80e904:	103fde1e 	bne	r2,zero,80e880 <__alt_data_end+0xff80e880>
  80e908:	00800304 	movi	r2,12
  80e90c:	98800015 	stw	r2,0(r19)
  80e910:	0005883a 	mov	r2,zero
  80e914:	003ff006 	br	80e8d8 <__alt_data_end+0xff80e8d8>

0080e918 <_cleanup>:
  80e918:	00802074 	movhi	r2,129
  80e91c:	1085a204 	addi	r2,r2,5768
  80e920:	11000017 	ldw	r4,0(r2)
  80e924:	01402074 	movhi	r5,129
  80e928:	297c2904 	addi	r5,r5,-3932
  80e92c:	080ea441 	jmpi	80ea44 <_fwalk_reent>

0080e930 <__sinit>:
  80e930:	20800e17 	ldw	r2,56(r4)
  80e934:	10000126 	beq	r2,zero,80e93c <__sinit+0xc>
  80e938:	f800283a 	ret
  80e93c:	080e5e41 	jmpi	80e5e4 <__sinit.part.1>

0080e940 <__sfp_lock_acquire>:
  80e940:	f800283a 	ret

0080e944 <__sfp_lock_release>:
  80e944:	f800283a 	ret

0080e948 <__sinit_lock_acquire>:
  80e948:	f800283a 	ret

0080e94c <__sinit_lock_release>:
  80e94c:	f800283a 	ret

0080e950 <__fp_lock_all>:
  80e950:	00802074 	movhi	r2,129
  80e954:	1085a304 	addi	r2,r2,5772
  80e958:	11000017 	ldw	r4,0(r2)
  80e95c:	01402074 	movhi	r5,129
  80e960:	2979e004 	addi	r5,r5,-6272
  80e964:	080e9801 	jmpi	80e980 <_fwalk>

0080e968 <__fp_unlock_all>:
  80e968:	00802074 	movhi	r2,129
  80e96c:	1085a304 	addi	r2,r2,5772
  80e970:	11000017 	ldw	r4,0(r2)
  80e974:	01402074 	movhi	r5,129
  80e978:	29797404 	addi	r5,r5,-6704
  80e97c:	080e9801 	jmpi	80e980 <_fwalk>

0080e980 <_fwalk>:
  80e980:	defff704 	addi	sp,sp,-36
  80e984:	dd000415 	stw	r20,16(sp)
  80e988:	dfc00815 	stw	ra,32(sp)
  80e98c:	ddc00715 	stw	r23,28(sp)
  80e990:	dd800615 	stw	r22,24(sp)
  80e994:	dd400515 	stw	r21,20(sp)
  80e998:	dcc00315 	stw	r19,12(sp)
  80e99c:	dc800215 	stw	r18,8(sp)
  80e9a0:	dc400115 	stw	r17,4(sp)
  80e9a4:	dc000015 	stw	r16,0(sp)
  80e9a8:	2500b804 	addi	r20,r4,736
  80e9ac:	a0002326 	beq	r20,zero,80ea3c <_fwalk+0xbc>
  80e9b0:	282b883a 	mov	r21,r5
  80e9b4:	002f883a 	mov	r23,zero
  80e9b8:	05800044 	movi	r22,1
  80e9bc:	04ffffc4 	movi	r19,-1
  80e9c0:	a4400117 	ldw	r17,4(r20)
  80e9c4:	a4800217 	ldw	r18,8(r20)
  80e9c8:	8c7fffc4 	addi	r17,r17,-1
  80e9cc:	88000d16 	blt	r17,zero,80ea04 <_fwalk+0x84>
  80e9d0:	94000304 	addi	r16,r18,12
  80e9d4:	94800384 	addi	r18,r18,14
  80e9d8:	8080000b 	ldhu	r2,0(r16)
  80e9dc:	8c7fffc4 	addi	r17,r17,-1
  80e9e0:	813ffd04 	addi	r4,r16,-12
  80e9e4:	b080042e 	bgeu	r22,r2,80e9f8 <_fwalk+0x78>
  80e9e8:	9080000f 	ldh	r2,0(r18)
  80e9ec:	14c00226 	beq	r2,r19,80e9f8 <_fwalk+0x78>
  80e9f0:	a83ee83a 	callr	r21
  80e9f4:	b8aeb03a 	or	r23,r23,r2
  80e9f8:	84001a04 	addi	r16,r16,104
  80e9fc:	94801a04 	addi	r18,r18,104
  80ea00:	8cfff51e 	bne	r17,r19,80e9d8 <__alt_data_end+0xff80e9d8>
  80ea04:	a5000017 	ldw	r20,0(r20)
  80ea08:	a03fed1e 	bne	r20,zero,80e9c0 <__alt_data_end+0xff80e9c0>
  80ea0c:	b805883a 	mov	r2,r23
  80ea10:	dfc00817 	ldw	ra,32(sp)
  80ea14:	ddc00717 	ldw	r23,28(sp)
  80ea18:	dd800617 	ldw	r22,24(sp)
  80ea1c:	dd400517 	ldw	r21,20(sp)
  80ea20:	dd000417 	ldw	r20,16(sp)
  80ea24:	dcc00317 	ldw	r19,12(sp)
  80ea28:	dc800217 	ldw	r18,8(sp)
  80ea2c:	dc400117 	ldw	r17,4(sp)
  80ea30:	dc000017 	ldw	r16,0(sp)
  80ea34:	dec00904 	addi	sp,sp,36
  80ea38:	f800283a 	ret
  80ea3c:	002f883a 	mov	r23,zero
  80ea40:	003ff206 	br	80ea0c <__alt_data_end+0xff80ea0c>

0080ea44 <_fwalk_reent>:
  80ea44:	defff704 	addi	sp,sp,-36
  80ea48:	dd000415 	stw	r20,16(sp)
  80ea4c:	dfc00815 	stw	ra,32(sp)
  80ea50:	ddc00715 	stw	r23,28(sp)
  80ea54:	dd800615 	stw	r22,24(sp)
  80ea58:	dd400515 	stw	r21,20(sp)
  80ea5c:	dcc00315 	stw	r19,12(sp)
  80ea60:	dc800215 	stw	r18,8(sp)
  80ea64:	dc400115 	stw	r17,4(sp)
  80ea68:	dc000015 	stw	r16,0(sp)
  80ea6c:	2500b804 	addi	r20,r4,736
  80ea70:	a0002326 	beq	r20,zero,80eb00 <_fwalk_reent+0xbc>
  80ea74:	282b883a 	mov	r21,r5
  80ea78:	2027883a 	mov	r19,r4
  80ea7c:	002f883a 	mov	r23,zero
  80ea80:	05800044 	movi	r22,1
  80ea84:	04bfffc4 	movi	r18,-1
  80ea88:	a4400117 	ldw	r17,4(r20)
  80ea8c:	a4000217 	ldw	r16,8(r20)
  80ea90:	8c7fffc4 	addi	r17,r17,-1
  80ea94:	88000c16 	blt	r17,zero,80eac8 <_fwalk_reent+0x84>
  80ea98:	84000304 	addi	r16,r16,12
  80ea9c:	8080000b 	ldhu	r2,0(r16)
  80eaa0:	8c7fffc4 	addi	r17,r17,-1
  80eaa4:	817ffd04 	addi	r5,r16,-12
  80eaa8:	b080052e 	bgeu	r22,r2,80eac0 <_fwalk_reent+0x7c>
  80eaac:	8080008f 	ldh	r2,2(r16)
  80eab0:	9809883a 	mov	r4,r19
  80eab4:	14800226 	beq	r2,r18,80eac0 <_fwalk_reent+0x7c>
  80eab8:	a83ee83a 	callr	r21
  80eabc:	b8aeb03a 	or	r23,r23,r2
  80eac0:	84001a04 	addi	r16,r16,104
  80eac4:	8cbff51e 	bne	r17,r18,80ea9c <__alt_data_end+0xff80ea9c>
  80eac8:	a5000017 	ldw	r20,0(r20)
  80eacc:	a03fee1e 	bne	r20,zero,80ea88 <__alt_data_end+0xff80ea88>
  80ead0:	b805883a 	mov	r2,r23
  80ead4:	dfc00817 	ldw	ra,32(sp)
  80ead8:	ddc00717 	ldw	r23,28(sp)
  80eadc:	dd800617 	ldw	r22,24(sp)
  80eae0:	dd400517 	ldw	r21,20(sp)
  80eae4:	dd000417 	ldw	r20,16(sp)
  80eae8:	dcc00317 	ldw	r19,12(sp)
  80eaec:	dc800217 	ldw	r18,8(sp)
  80eaf0:	dc400117 	ldw	r17,4(sp)
  80eaf4:	dc000017 	ldw	r16,0(sp)
  80eaf8:	dec00904 	addi	sp,sp,36
  80eafc:	f800283a 	ret
  80eb00:	002f883a 	mov	r23,zero
  80eb04:	003ff206 	br	80ead0 <__alt_data_end+0xff80ead0>

0080eb08 <__smakebuf_r>:
  80eb08:	2880030b 	ldhu	r2,12(r5)
  80eb0c:	10c0008c 	andi	r3,r2,2
  80eb10:	1800411e 	bne	r3,zero,80ec18 <__smakebuf_r+0x110>
  80eb14:	deffec04 	addi	sp,sp,-80
  80eb18:	dc000f15 	stw	r16,60(sp)
  80eb1c:	2821883a 	mov	r16,r5
  80eb20:	2940038f 	ldh	r5,14(r5)
  80eb24:	dc401015 	stw	r17,64(sp)
  80eb28:	dfc01315 	stw	ra,76(sp)
  80eb2c:	dcc01215 	stw	r19,72(sp)
  80eb30:	dc801115 	stw	r18,68(sp)
  80eb34:	2023883a 	mov	r17,r4
  80eb38:	28001c16 	blt	r5,zero,80ebac <__smakebuf_r+0xa4>
  80eb3c:	d80d883a 	mov	r6,sp
  80eb40:	080f1a80 	call	80f1a8 <_fstat_r>
  80eb44:	10001816 	blt	r2,zero,80eba8 <__smakebuf_r+0xa0>
  80eb48:	d8800117 	ldw	r2,4(sp)
  80eb4c:	00e00014 	movui	r3,32768
  80eb50:	10bc000c 	andi	r2,r2,61440
  80eb54:	14c80020 	cmpeqi	r19,r2,8192
  80eb58:	10c03726 	beq	r2,r3,80ec38 <__smakebuf_r+0x130>
  80eb5c:	80c0030b 	ldhu	r3,12(r16)
  80eb60:	18c20014 	ori	r3,r3,2048
  80eb64:	80c0030d 	sth	r3,12(r16)
  80eb68:	00c80004 	movi	r3,8192
  80eb6c:	10c0521e 	bne	r2,r3,80ecb8 <__smakebuf_r+0x1b0>
  80eb70:	8140038f 	ldh	r5,14(r16)
  80eb74:	8809883a 	mov	r4,r17
  80eb78:	080f2040 	call	80f204 <_isatty_r>
  80eb7c:	10004c26 	beq	r2,zero,80ecb0 <__smakebuf_r+0x1a8>
  80eb80:	8080030b 	ldhu	r2,12(r16)
  80eb84:	80c010c4 	addi	r3,r16,67
  80eb88:	80c00015 	stw	r3,0(r16)
  80eb8c:	10800054 	ori	r2,r2,1
  80eb90:	8080030d 	sth	r2,12(r16)
  80eb94:	00800044 	movi	r2,1
  80eb98:	80c00415 	stw	r3,16(r16)
  80eb9c:	80800515 	stw	r2,20(r16)
  80eba0:	04810004 	movi	r18,1024
  80eba4:	00000706 	br	80ebc4 <__smakebuf_r+0xbc>
  80eba8:	8080030b 	ldhu	r2,12(r16)
  80ebac:	10c0200c 	andi	r3,r2,128
  80ebb0:	18001f1e 	bne	r3,zero,80ec30 <__smakebuf_r+0x128>
  80ebb4:	04810004 	movi	r18,1024
  80ebb8:	10820014 	ori	r2,r2,2048
  80ebbc:	8080030d 	sth	r2,12(r16)
  80ebc0:	0027883a 	mov	r19,zero
  80ebc4:	900b883a 	mov	r5,r18
  80ebc8:	8809883a 	mov	r4,r17
  80ebcc:	08005800 	call	800580 <_malloc_r>
  80ebd0:	10002c26 	beq	r2,zero,80ec84 <__smakebuf_r+0x17c>
  80ebd4:	80c0030b 	ldhu	r3,12(r16)
  80ebd8:	01002074 	movhi	r4,129
  80ebdc:	21397604 	addi	r4,r4,-6696
  80ebe0:	89000f15 	stw	r4,60(r17)
  80ebe4:	18c02014 	ori	r3,r3,128
  80ebe8:	80c0030d 	sth	r3,12(r16)
  80ebec:	80800015 	stw	r2,0(r16)
  80ebf0:	80800415 	stw	r2,16(r16)
  80ebf4:	84800515 	stw	r18,20(r16)
  80ebf8:	98001a1e 	bne	r19,zero,80ec64 <__smakebuf_r+0x15c>
  80ebfc:	dfc01317 	ldw	ra,76(sp)
  80ec00:	dcc01217 	ldw	r19,72(sp)
  80ec04:	dc801117 	ldw	r18,68(sp)
  80ec08:	dc401017 	ldw	r17,64(sp)
  80ec0c:	dc000f17 	ldw	r16,60(sp)
  80ec10:	dec01404 	addi	sp,sp,80
  80ec14:	f800283a 	ret
  80ec18:	288010c4 	addi	r2,r5,67
  80ec1c:	28800015 	stw	r2,0(r5)
  80ec20:	28800415 	stw	r2,16(r5)
  80ec24:	00800044 	movi	r2,1
  80ec28:	28800515 	stw	r2,20(r5)
  80ec2c:	f800283a 	ret
  80ec30:	04801004 	movi	r18,64
  80ec34:	003fe006 	br	80ebb8 <__alt_data_end+0xff80ebb8>
  80ec38:	81000a17 	ldw	r4,40(r16)
  80ec3c:	00c02074 	movhi	r3,129
  80ec40:	18fbe304 	addi	r3,r3,-4212
  80ec44:	20ffc51e 	bne	r4,r3,80eb5c <__alt_data_end+0xff80eb5c>
  80ec48:	8080030b 	ldhu	r2,12(r16)
  80ec4c:	04810004 	movi	r18,1024
  80ec50:	84801315 	stw	r18,76(r16)
  80ec54:	1484b03a 	or	r2,r2,r18
  80ec58:	8080030d 	sth	r2,12(r16)
  80ec5c:	0027883a 	mov	r19,zero
  80ec60:	003fd806 	br	80ebc4 <__alt_data_end+0xff80ebc4>
  80ec64:	8140038f 	ldh	r5,14(r16)
  80ec68:	8809883a 	mov	r4,r17
  80ec6c:	080f2040 	call	80f204 <_isatty_r>
  80ec70:	103fe226 	beq	r2,zero,80ebfc <__alt_data_end+0xff80ebfc>
  80ec74:	8080030b 	ldhu	r2,12(r16)
  80ec78:	10800054 	ori	r2,r2,1
  80ec7c:	8080030d 	sth	r2,12(r16)
  80ec80:	003fde06 	br	80ebfc <__alt_data_end+0xff80ebfc>
  80ec84:	8080030b 	ldhu	r2,12(r16)
  80ec88:	10c0800c 	andi	r3,r2,512
  80ec8c:	183fdb1e 	bne	r3,zero,80ebfc <__alt_data_end+0xff80ebfc>
  80ec90:	10800094 	ori	r2,r2,2
  80ec94:	80c010c4 	addi	r3,r16,67
  80ec98:	8080030d 	sth	r2,12(r16)
  80ec9c:	00800044 	movi	r2,1
  80eca0:	80c00015 	stw	r3,0(r16)
  80eca4:	80c00415 	stw	r3,16(r16)
  80eca8:	80800515 	stw	r2,20(r16)
  80ecac:	003fd306 	br	80ebfc <__alt_data_end+0xff80ebfc>
  80ecb0:	04810004 	movi	r18,1024
  80ecb4:	003fc306 	br	80ebc4 <__alt_data_end+0xff80ebc4>
  80ecb8:	0027883a 	mov	r19,zero
  80ecbc:	04810004 	movi	r18,1024
  80ecc0:	003fc006 	br	80ebc4 <__alt_data_end+0xff80ebc4>

0080ecc4 <lflush>:
  80ecc4:	2080030b 	ldhu	r2,12(r4)
  80ecc8:	00c00244 	movi	r3,9
  80eccc:	1080024c 	andi	r2,r2,9
  80ecd0:	10c00226 	beq	r2,r3,80ecdc <lflush+0x18>
  80ecd4:	0005883a 	mov	r2,zero
  80ecd8:	f800283a 	ret
  80ecdc:	080e5a01 	jmpi	80e5a0 <fflush>

0080ece0 <__srefill_r>:
  80ece0:	defffc04 	addi	sp,sp,-16
  80ece4:	dc400115 	stw	r17,4(sp)
  80ece8:	dc000015 	stw	r16,0(sp)
  80ecec:	dfc00315 	stw	ra,12(sp)
  80ecf0:	dc800215 	stw	r18,8(sp)
  80ecf4:	2023883a 	mov	r17,r4
  80ecf8:	2821883a 	mov	r16,r5
  80ecfc:	20000226 	beq	r4,zero,80ed08 <__srefill_r+0x28>
  80ed00:	20800e17 	ldw	r2,56(r4)
  80ed04:	10003c26 	beq	r2,zero,80edf8 <__srefill_r+0x118>
  80ed08:	80c0030b 	ldhu	r3,12(r16)
  80ed0c:	1908000c 	andi	r4,r3,8192
  80ed10:	1805883a 	mov	r2,r3
  80ed14:	2000071e 	bne	r4,zero,80ed34 <__srefill_r+0x54>
  80ed18:	81001917 	ldw	r4,100(r16)
  80ed1c:	18880014 	ori	r2,r3,8192
  80ed20:	00f7ffc4 	movi	r3,-8193
  80ed24:	20c8703a 	and	r4,r4,r3
  80ed28:	8080030d 	sth	r2,12(r16)
  80ed2c:	1007883a 	mov	r3,r2
  80ed30:	81001915 	stw	r4,100(r16)
  80ed34:	80000115 	stw	zero,4(r16)
  80ed38:	1100080c 	andi	r4,r2,32
  80ed3c:	2000571e 	bne	r4,zero,80ee9c <__srefill_r+0x1bc>
  80ed40:	1100010c 	andi	r4,r2,4
  80ed44:	20001f26 	beq	r4,zero,80edc4 <__srefill_r+0xe4>
  80ed48:	81400c17 	ldw	r5,48(r16)
  80ed4c:	28000826 	beq	r5,zero,80ed70 <__srefill_r+0x90>
  80ed50:	80801004 	addi	r2,r16,64
  80ed54:	28800226 	beq	r5,r2,80ed60 <__srefill_r+0x80>
  80ed58:	8809883a 	mov	r4,r17
  80ed5c:	0804b980 	call	804b98 <_free_r>
  80ed60:	80800f17 	ldw	r2,60(r16)
  80ed64:	80000c15 	stw	zero,48(r16)
  80ed68:	80800115 	stw	r2,4(r16)
  80ed6c:	1000391e 	bne	r2,zero,80ee54 <__srefill_r+0x174>
  80ed70:	80800417 	ldw	r2,16(r16)
  80ed74:	10004b26 	beq	r2,zero,80eea4 <__srefill_r+0x1c4>
  80ed78:	8480030b 	ldhu	r18,12(r16)
  80ed7c:	908000cc 	andi	r2,r18,3
  80ed80:	10001f1e 	bne	r2,zero,80ee00 <__srefill_r+0x120>
  80ed84:	81800417 	ldw	r6,16(r16)
  80ed88:	80800817 	ldw	r2,32(r16)
  80ed8c:	81c00517 	ldw	r7,20(r16)
  80ed90:	81400717 	ldw	r5,28(r16)
  80ed94:	81800015 	stw	r6,0(r16)
  80ed98:	8809883a 	mov	r4,r17
  80ed9c:	103ee83a 	callr	r2
  80eda0:	80800115 	stw	r2,4(r16)
  80eda4:	00800e0e 	bge	zero,r2,80ede0 <__srefill_r+0x100>
  80eda8:	0005883a 	mov	r2,zero
  80edac:	dfc00317 	ldw	ra,12(sp)
  80edb0:	dc800217 	ldw	r18,8(sp)
  80edb4:	dc400117 	ldw	r17,4(sp)
  80edb8:	dc000017 	ldw	r16,0(sp)
  80edbc:	dec00404 	addi	sp,sp,16
  80edc0:	f800283a 	ret
  80edc4:	1100040c 	andi	r4,r2,16
  80edc8:	20003026 	beq	r4,zero,80ee8c <__srefill_r+0x1ac>
  80edcc:	1080020c 	andi	r2,r2,8
  80edd0:	1000241e 	bne	r2,zero,80ee64 <__srefill_r+0x184>
  80edd4:	18c00114 	ori	r3,r3,4
  80edd8:	80c0030d 	sth	r3,12(r16)
  80eddc:	003fe406 	br	80ed70 <__alt_data_end+0xff80ed70>
  80ede0:	80c0030b 	ldhu	r3,12(r16)
  80ede4:	1000161e 	bne	r2,zero,80ee40 <__srefill_r+0x160>
  80ede8:	18c00814 	ori	r3,r3,32
  80edec:	00bfffc4 	movi	r2,-1
  80edf0:	80c0030d 	sth	r3,12(r16)
  80edf4:	003fed06 	br	80edac <__alt_data_end+0xff80edac>
  80edf8:	080e9300 	call	80e930 <__sinit>
  80edfc:	003fc206 	br	80ed08 <__alt_data_end+0xff80ed08>
  80ee00:	00802074 	movhi	r2,129
  80ee04:	1085a204 	addi	r2,r2,5768
  80ee08:	11000017 	ldw	r4,0(r2)
  80ee0c:	01402074 	movhi	r5,129
  80ee10:	00800044 	movi	r2,1
  80ee14:	297b3104 	addi	r5,r5,-4924
  80ee18:	8080030d 	sth	r2,12(r16)
  80ee1c:	080e9800 	call	80e980 <_fwalk>
  80ee20:	00800244 	movi	r2,9
  80ee24:	8480030d 	sth	r18,12(r16)
  80ee28:	9480024c 	andi	r18,r18,9
  80ee2c:	90bfd51e 	bne	r18,r2,80ed84 <__alt_data_end+0xff80ed84>
  80ee30:	800b883a 	mov	r5,r16
  80ee34:	8809883a 	mov	r4,r17
  80ee38:	080e3280 	call	80e328 <__sflush_r>
  80ee3c:	003fd106 	br	80ed84 <__alt_data_end+0xff80ed84>
  80ee40:	18c01014 	ori	r3,r3,64
  80ee44:	80000115 	stw	zero,4(r16)
  80ee48:	00bfffc4 	movi	r2,-1
  80ee4c:	80c0030d 	sth	r3,12(r16)
  80ee50:	003fd606 	br	80edac <__alt_data_end+0xff80edac>
  80ee54:	80c00e17 	ldw	r3,56(r16)
  80ee58:	0005883a 	mov	r2,zero
  80ee5c:	80c00015 	stw	r3,0(r16)
  80ee60:	003fd206 	br	80edac <__alt_data_end+0xff80edac>
  80ee64:	800b883a 	mov	r5,r16
  80ee68:	8809883a 	mov	r4,r17
  80ee6c:	080e5440 	call	80e544 <_fflush_r>
  80ee70:	10000a1e 	bne	r2,zero,80ee9c <__srefill_r+0x1bc>
  80ee74:	8080030b 	ldhu	r2,12(r16)
  80ee78:	00fffdc4 	movi	r3,-9
  80ee7c:	80000215 	stw	zero,8(r16)
  80ee80:	1886703a 	and	r3,r3,r2
  80ee84:	80000615 	stw	zero,24(r16)
  80ee88:	003fd206 	br	80edd4 <__alt_data_end+0xff80edd4>
  80ee8c:	00800244 	movi	r2,9
  80ee90:	88800015 	stw	r2,0(r17)
  80ee94:	18c01014 	ori	r3,r3,64
  80ee98:	80c0030d 	sth	r3,12(r16)
  80ee9c:	00bfffc4 	movi	r2,-1
  80eea0:	003fc206 	br	80edac <__alt_data_end+0xff80edac>
  80eea4:	800b883a 	mov	r5,r16
  80eea8:	8809883a 	mov	r4,r17
  80eeac:	080eb080 	call	80eb08 <__smakebuf_r>
  80eeb0:	003fb106 	br	80ed78 <__alt_data_end+0xff80ed78>

0080eeb4 <__sread>:
  80eeb4:	defffe04 	addi	sp,sp,-8
  80eeb8:	dc000015 	stw	r16,0(sp)
  80eebc:	2821883a 	mov	r16,r5
  80eec0:	2940038f 	ldh	r5,14(r5)
  80eec4:	dfc00115 	stw	ra,4(sp)
  80eec8:	080f2b80 	call	80f2b8 <_read_r>
  80eecc:	10000716 	blt	r2,zero,80eeec <__sread+0x38>
  80eed0:	80c01417 	ldw	r3,80(r16)
  80eed4:	1887883a 	add	r3,r3,r2
  80eed8:	80c01415 	stw	r3,80(r16)
  80eedc:	dfc00117 	ldw	ra,4(sp)
  80eee0:	dc000017 	ldw	r16,0(sp)
  80eee4:	dec00204 	addi	sp,sp,8
  80eee8:	f800283a 	ret
  80eeec:	80c0030b 	ldhu	r3,12(r16)
  80eef0:	18fbffcc 	andi	r3,r3,61439
  80eef4:	80c0030d 	sth	r3,12(r16)
  80eef8:	dfc00117 	ldw	ra,4(sp)
  80eefc:	dc000017 	ldw	r16,0(sp)
  80ef00:	dec00204 	addi	sp,sp,8
  80ef04:	f800283a 	ret

0080ef08 <__seofread>:
  80ef08:	0005883a 	mov	r2,zero
  80ef0c:	f800283a 	ret

0080ef10 <__swrite>:
  80ef10:	2880030b 	ldhu	r2,12(r5)
  80ef14:	defffb04 	addi	sp,sp,-20
  80ef18:	dcc00315 	stw	r19,12(sp)
  80ef1c:	dc800215 	stw	r18,8(sp)
  80ef20:	dc400115 	stw	r17,4(sp)
  80ef24:	dc000015 	stw	r16,0(sp)
  80ef28:	dfc00415 	stw	ra,16(sp)
  80ef2c:	10c0400c 	andi	r3,r2,256
  80ef30:	2821883a 	mov	r16,r5
  80ef34:	2023883a 	mov	r17,r4
  80ef38:	3025883a 	mov	r18,r6
  80ef3c:	3827883a 	mov	r19,r7
  80ef40:	18000526 	beq	r3,zero,80ef58 <__swrite+0x48>
  80ef44:	2940038f 	ldh	r5,14(r5)
  80ef48:	01c00084 	movi	r7,2
  80ef4c:	000d883a 	mov	r6,zero
  80ef50:	080f2580 	call	80f258 <_lseek_r>
  80ef54:	8080030b 	ldhu	r2,12(r16)
  80ef58:	8140038f 	ldh	r5,14(r16)
  80ef5c:	10bbffcc 	andi	r2,r2,61439
  80ef60:	980f883a 	mov	r7,r19
  80ef64:	900d883a 	mov	r6,r18
  80ef68:	8809883a 	mov	r4,r17
  80ef6c:	8080030d 	sth	r2,12(r16)
  80ef70:	dfc00417 	ldw	ra,16(sp)
  80ef74:	dcc00317 	ldw	r19,12(sp)
  80ef78:	dc800217 	ldw	r18,8(sp)
  80ef7c:	dc400117 	ldw	r17,4(sp)
  80ef80:	dc000017 	ldw	r16,0(sp)
  80ef84:	dec00504 	addi	sp,sp,20
  80ef88:	080eff01 	jmpi	80eff0 <_write_r>

0080ef8c <__sseek>:
  80ef8c:	defffe04 	addi	sp,sp,-8
  80ef90:	dc000015 	stw	r16,0(sp)
  80ef94:	2821883a 	mov	r16,r5
  80ef98:	2940038f 	ldh	r5,14(r5)
  80ef9c:	dfc00115 	stw	ra,4(sp)
  80efa0:	080f2580 	call	80f258 <_lseek_r>
  80efa4:	00ffffc4 	movi	r3,-1
  80efa8:	10c00826 	beq	r2,r3,80efcc <__sseek+0x40>
  80efac:	80c0030b 	ldhu	r3,12(r16)
  80efb0:	80801415 	stw	r2,80(r16)
  80efb4:	18c40014 	ori	r3,r3,4096
  80efb8:	80c0030d 	sth	r3,12(r16)
  80efbc:	dfc00117 	ldw	ra,4(sp)
  80efc0:	dc000017 	ldw	r16,0(sp)
  80efc4:	dec00204 	addi	sp,sp,8
  80efc8:	f800283a 	ret
  80efcc:	80c0030b 	ldhu	r3,12(r16)
  80efd0:	18fbffcc 	andi	r3,r3,61439
  80efd4:	80c0030d 	sth	r3,12(r16)
  80efd8:	dfc00117 	ldw	ra,4(sp)
  80efdc:	dc000017 	ldw	r16,0(sp)
  80efe0:	dec00204 	addi	sp,sp,8
  80efe4:	f800283a 	ret

0080efe8 <__sclose>:
  80efe8:	2940038f 	ldh	r5,14(r5)
  80efec:	080f0501 	jmpi	80f050 <_close_r>

0080eff0 <_write_r>:
  80eff0:	defffd04 	addi	sp,sp,-12
  80eff4:	2805883a 	mov	r2,r5
  80eff8:	dc000015 	stw	r16,0(sp)
  80effc:	04002074 	movhi	r16,129
  80f000:	dc400115 	stw	r17,4(sp)
  80f004:	300b883a 	mov	r5,r6
  80f008:	840c6e04 	addi	r16,r16,12728
  80f00c:	2023883a 	mov	r17,r4
  80f010:	380d883a 	mov	r6,r7
  80f014:	1009883a 	mov	r4,r2
  80f018:	dfc00215 	stw	ra,8(sp)
  80f01c:	80000015 	stw	zero,0(r16)
  80f020:	080f7bc0 	call	80f7bc <write>
  80f024:	00ffffc4 	movi	r3,-1
  80f028:	10c00526 	beq	r2,r3,80f040 <_write_r+0x50>
  80f02c:	dfc00217 	ldw	ra,8(sp)
  80f030:	dc400117 	ldw	r17,4(sp)
  80f034:	dc000017 	ldw	r16,0(sp)
  80f038:	dec00304 	addi	sp,sp,12
  80f03c:	f800283a 	ret
  80f040:	80c00017 	ldw	r3,0(r16)
  80f044:	183ff926 	beq	r3,zero,80f02c <__alt_data_end+0xff80f02c>
  80f048:	88c00015 	stw	r3,0(r17)
  80f04c:	003ff706 	br	80f02c <__alt_data_end+0xff80f02c>

0080f050 <_close_r>:
  80f050:	defffd04 	addi	sp,sp,-12
  80f054:	dc000015 	stw	r16,0(sp)
  80f058:	04002074 	movhi	r16,129
  80f05c:	dc400115 	stw	r17,4(sp)
  80f060:	840c6e04 	addi	r16,r16,12728
  80f064:	2023883a 	mov	r17,r4
  80f068:	2809883a 	mov	r4,r5
  80f06c:	dfc00215 	stw	ra,8(sp)
  80f070:	80000015 	stw	zero,0(r16)
  80f074:	080c8000 	call	80c800 <close>
  80f078:	00ffffc4 	movi	r3,-1
  80f07c:	10c00526 	beq	r2,r3,80f094 <_close_r+0x44>
  80f080:	dfc00217 	ldw	ra,8(sp)
  80f084:	dc400117 	ldw	r17,4(sp)
  80f088:	dc000017 	ldw	r16,0(sp)
  80f08c:	dec00304 	addi	sp,sp,12
  80f090:	f800283a 	ret
  80f094:	80c00017 	ldw	r3,0(r16)
  80f098:	183ff926 	beq	r3,zero,80f080 <__alt_data_end+0xff80f080>
  80f09c:	88c00015 	stw	r3,0(r17)
  80f0a0:	003ff706 	br	80f080 <__alt_data_end+0xff80f080>

0080f0a4 <_fclose_r>:
  80f0a4:	28003926 	beq	r5,zero,80f18c <_fclose_r+0xe8>
  80f0a8:	defffc04 	addi	sp,sp,-16
  80f0ac:	dc400115 	stw	r17,4(sp)
  80f0b0:	dc000015 	stw	r16,0(sp)
  80f0b4:	dfc00315 	stw	ra,12(sp)
  80f0b8:	dc800215 	stw	r18,8(sp)
  80f0bc:	2023883a 	mov	r17,r4
  80f0c0:	2821883a 	mov	r16,r5
  80f0c4:	20000226 	beq	r4,zero,80f0d0 <_fclose_r+0x2c>
  80f0c8:	20800e17 	ldw	r2,56(r4)
  80f0cc:	10002726 	beq	r2,zero,80f16c <_fclose_r+0xc8>
  80f0d0:	8080030f 	ldh	r2,12(r16)
  80f0d4:	1000071e 	bne	r2,zero,80f0f4 <_fclose_r+0x50>
  80f0d8:	0005883a 	mov	r2,zero
  80f0dc:	dfc00317 	ldw	ra,12(sp)
  80f0e0:	dc800217 	ldw	r18,8(sp)
  80f0e4:	dc400117 	ldw	r17,4(sp)
  80f0e8:	dc000017 	ldw	r16,0(sp)
  80f0ec:	dec00404 	addi	sp,sp,16
  80f0f0:	f800283a 	ret
  80f0f4:	800b883a 	mov	r5,r16
  80f0f8:	8809883a 	mov	r4,r17
  80f0fc:	080e3280 	call	80e328 <__sflush_r>
  80f100:	1025883a 	mov	r18,r2
  80f104:	80800b17 	ldw	r2,44(r16)
  80f108:	10000426 	beq	r2,zero,80f11c <_fclose_r+0x78>
  80f10c:	81400717 	ldw	r5,28(r16)
  80f110:	8809883a 	mov	r4,r17
  80f114:	103ee83a 	callr	r2
  80f118:	10001616 	blt	r2,zero,80f174 <_fclose_r+0xd0>
  80f11c:	8080030b 	ldhu	r2,12(r16)
  80f120:	1080200c 	andi	r2,r2,128
  80f124:	1000151e 	bne	r2,zero,80f17c <_fclose_r+0xd8>
  80f128:	81400c17 	ldw	r5,48(r16)
  80f12c:	28000526 	beq	r5,zero,80f144 <_fclose_r+0xa0>
  80f130:	80801004 	addi	r2,r16,64
  80f134:	28800226 	beq	r5,r2,80f140 <_fclose_r+0x9c>
  80f138:	8809883a 	mov	r4,r17
  80f13c:	0804b980 	call	804b98 <_free_r>
  80f140:	80000c15 	stw	zero,48(r16)
  80f144:	81401117 	ldw	r5,68(r16)
  80f148:	28000326 	beq	r5,zero,80f158 <_fclose_r+0xb4>
  80f14c:	8809883a 	mov	r4,r17
  80f150:	0804b980 	call	804b98 <_free_r>
  80f154:	80001115 	stw	zero,68(r16)
  80f158:	080e9400 	call	80e940 <__sfp_lock_acquire>
  80f15c:	8000030d 	sth	zero,12(r16)
  80f160:	080e9440 	call	80e944 <__sfp_lock_release>
  80f164:	9005883a 	mov	r2,r18
  80f168:	003fdc06 	br	80f0dc <__alt_data_end+0xff80f0dc>
  80f16c:	080e9300 	call	80e930 <__sinit>
  80f170:	003fd706 	br	80f0d0 <__alt_data_end+0xff80f0d0>
  80f174:	04bfffc4 	movi	r18,-1
  80f178:	003fe806 	br	80f11c <__alt_data_end+0xff80f11c>
  80f17c:	81400417 	ldw	r5,16(r16)
  80f180:	8809883a 	mov	r4,r17
  80f184:	0804b980 	call	804b98 <_free_r>
  80f188:	003fe706 	br	80f128 <__alt_data_end+0xff80f128>
  80f18c:	0005883a 	mov	r2,zero
  80f190:	f800283a 	ret

0080f194 <fclose>:
  80f194:	00802074 	movhi	r2,129
  80f198:	1085a304 	addi	r2,r2,5772
  80f19c:	200b883a 	mov	r5,r4
  80f1a0:	11000017 	ldw	r4,0(r2)
  80f1a4:	080f0a41 	jmpi	80f0a4 <_fclose_r>

0080f1a8 <_fstat_r>:
  80f1a8:	defffd04 	addi	sp,sp,-12
  80f1ac:	2805883a 	mov	r2,r5
  80f1b0:	dc000015 	stw	r16,0(sp)
  80f1b4:	04002074 	movhi	r16,129
  80f1b8:	dc400115 	stw	r17,4(sp)
  80f1bc:	840c6e04 	addi	r16,r16,12728
  80f1c0:	2023883a 	mov	r17,r4
  80f1c4:	300b883a 	mov	r5,r6
  80f1c8:	1009883a 	mov	r4,r2
  80f1cc:	dfc00215 	stw	ra,8(sp)
  80f1d0:	80000015 	stw	zero,0(r16)
  80f1d4:	080f3880 	call	80f388 <fstat>
  80f1d8:	00ffffc4 	movi	r3,-1
  80f1dc:	10c00526 	beq	r2,r3,80f1f4 <_fstat_r+0x4c>
  80f1e0:	dfc00217 	ldw	ra,8(sp)
  80f1e4:	dc400117 	ldw	r17,4(sp)
  80f1e8:	dc000017 	ldw	r16,0(sp)
  80f1ec:	dec00304 	addi	sp,sp,12
  80f1f0:	f800283a 	ret
  80f1f4:	80c00017 	ldw	r3,0(r16)
  80f1f8:	183ff926 	beq	r3,zero,80f1e0 <__alt_data_end+0xff80f1e0>
  80f1fc:	88c00015 	stw	r3,0(r17)
  80f200:	003ff706 	br	80f1e0 <__alt_data_end+0xff80f1e0>

0080f204 <_isatty_r>:
  80f204:	defffd04 	addi	sp,sp,-12
  80f208:	dc000015 	stw	r16,0(sp)
  80f20c:	04002074 	movhi	r16,129
  80f210:	dc400115 	stw	r17,4(sp)
  80f214:	840c6e04 	addi	r16,r16,12728
  80f218:	2023883a 	mov	r17,r4
  80f21c:	2809883a 	mov	r4,r5
  80f220:	dfc00215 	stw	ra,8(sp)
  80f224:	80000015 	stw	zero,0(r16)
  80f228:	080f47c0 	call	80f47c <isatty>
  80f22c:	00ffffc4 	movi	r3,-1
  80f230:	10c00526 	beq	r2,r3,80f248 <_isatty_r+0x44>
  80f234:	dfc00217 	ldw	ra,8(sp)
  80f238:	dc400117 	ldw	r17,4(sp)
  80f23c:	dc000017 	ldw	r16,0(sp)
  80f240:	dec00304 	addi	sp,sp,12
  80f244:	f800283a 	ret
  80f248:	80c00017 	ldw	r3,0(r16)
  80f24c:	183ff926 	beq	r3,zero,80f234 <__alt_data_end+0xff80f234>
  80f250:	88c00015 	stw	r3,0(r17)
  80f254:	003ff706 	br	80f234 <__alt_data_end+0xff80f234>

0080f258 <_lseek_r>:
  80f258:	defffd04 	addi	sp,sp,-12
  80f25c:	2805883a 	mov	r2,r5
  80f260:	dc000015 	stw	r16,0(sp)
  80f264:	04002074 	movhi	r16,129
  80f268:	dc400115 	stw	r17,4(sp)
  80f26c:	300b883a 	mov	r5,r6
  80f270:	840c6e04 	addi	r16,r16,12728
  80f274:	2023883a 	mov	r17,r4
  80f278:	380d883a 	mov	r6,r7
  80f27c:	1009883a 	mov	r4,r2
  80f280:	dfc00215 	stw	ra,8(sp)
  80f284:	80000015 	stw	zero,0(r16)
  80f288:	080f5640 	call	80f564 <lseek>
  80f28c:	00ffffc4 	movi	r3,-1
  80f290:	10c00526 	beq	r2,r3,80f2a8 <_lseek_r+0x50>
  80f294:	dfc00217 	ldw	ra,8(sp)
  80f298:	dc400117 	ldw	r17,4(sp)
  80f29c:	dc000017 	ldw	r16,0(sp)
  80f2a0:	dec00304 	addi	sp,sp,12
  80f2a4:	f800283a 	ret
  80f2a8:	80c00017 	ldw	r3,0(r16)
  80f2ac:	183ff926 	beq	r3,zero,80f294 <__alt_data_end+0xff80f294>
  80f2b0:	88c00015 	stw	r3,0(r17)
  80f2b4:	003ff706 	br	80f294 <__alt_data_end+0xff80f294>

0080f2b8 <_read_r>:
  80f2b8:	defffd04 	addi	sp,sp,-12
  80f2bc:	2805883a 	mov	r2,r5
  80f2c0:	dc000015 	stw	r16,0(sp)
  80f2c4:	04002074 	movhi	r16,129
  80f2c8:	dc400115 	stw	r17,4(sp)
  80f2cc:	300b883a 	mov	r5,r6
  80f2d0:	840c6e04 	addi	r16,r16,12728
  80f2d4:	2023883a 	mov	r17,r4
  80f2d8:	380d883a 	mov	r6,r7
  80f2dc:	1009883a 	mov	r4,r2
  80f2e0:	dfc00215 	stw	ra,8(sp)
  80f2e4:	80000015 	stw	zero,0(r16)
  80f2e8:	080f67c0 	call	80f67c <read>
  80f2ec:	00ffffc4 	movi	r3,-1
  80f2f0:	10c00526 	beq	r2,r3,80f308 <_read_r+0x50>
  80f2f4:	dfc00217 	ldw	ra,8(sp)
  80f2f8:	dc400117 	ldw	r17,4(sp)
  80f2fc:	dc000017 	ldw	r16,0(sp)
  80f300:	dec00304 	addi	sp,sp,12
  80f304:	f800283a 	ret
  80f308:	80c00017 	ldw	r3,0(r16)
  80f30c:	183ff926 	beq	r3,zero,80f2f4 <__alt_data_end+0xff80f2f4>
  80f310:	88c00015 	stw	r3,0(r17)
  80f314:	003ff706 	br	80f2f4 <__alt_data_end+0xff80f2f4>

0080f318 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80f318:	defffd04 	addi	sp,sp,-12
  80f31c:	df000215 	stw	fp,8(sp)
  80f320:	df000204 	addi	fp,sp,8
  80f324:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  80f328:	0001883a 	nop
  80f32c:	e0bfff17 	ldw	r2,-4(fp)
  80f330:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  80f334:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80f338:	10000226 	beq	r2,zero,80f344 <_exit+0x2c>
    ALT_SIM_FAIL();
  80f33c:	002af070 	cmpltui	zero,zero,43969
  80f340:	00000106 	br	80f348 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  80f344:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80f348:	003fff06 	br	80f348 <__alt_data_end+0xff80f348>

0080f34c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f34c:	defffe04 	addi	sp,sp,-8
  80f350:	dfc00115 	stw	ra,4(sp)
  80f354:	df000015 	stw	fp,0(sp)
  80f358:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f35c:	d0a00b17 	ldw	r2,-32724(gp)
  80f360:	10000326 	beq	r2,zero,80f370 <alt_get_errno+0x24>
  80f364:	d0a00b17 	ldw	r2,-32724(gp)
  80f368:	103ee83a 	callr	r2
  80f36c:	00000106 	br	80f374 <alt_get_errno+0x28>
  80f370:	d0a6cc04 	addi	r2,gp,-25808
}
  80f374:	e037883a 	mov	sp,fp
  80f378:	dfc00117 	ldw	ra,4(sp)
  80f37c:	df000017 	ldw	fp,0(sp)
  80f380:	dec00204 	addi	sp,sp,8
  80f384:	f800283a 	ret

0080f388 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80f388:	defffb04 	addi	sp,sp,-20
  80f38c:	dfc00415 	stw	ra,16(sp)
  80f390:	df000315 	stw	fp,12(sp)
  80f394:	df000304 	addi	fp,sp,12
  80f398:	e13ffe15 	stw	r4,-8(fp)
  80f39c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f3a0:	e0bffe17 	ldw	r2,-8(fp)
  80f3a4:	10000816 	blt	r2,zero,80f3c8 <fstat+0x40>
  80f3a8:	01400304 	movi	r5,12
  80f3ac:	e13ffe17 	ldw	r4,-8(fp)
  80f3b0:	0808ed00 	call	808ed0 <__mulsi3>
  80f3b4:	1007883a 	mov	r3,r2
  80f3b8:	00802074 	movhi	r2,129
  80f3bc:	10854204 	addi	r2,r2,5384
  80f3c0:	1885883a 	add	r2,r3,r2
  80f3c4:	00000106 	br	80f3cc <fstat+0x44>
  80f3c8:	0005883a 	mov	r2,zero
  80f3cc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80f3d0:	e0bffd17 	ldw	r2,-12(fp)
  80f3d4:	10001026 	beq	r2,zero,80f418 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80f3d8:	e0bffd17 	ldw	r2,-12(fp)
  80f3dc:	10800017 	ldw	r2,0(r2)
  80f3e0:	10800817 	ldw	r2,32(r2)
  80f3e4:	10000726 	beq	r2,zero,80f404 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
  80f3e8:	e0bffd17 	ldw	r2,-12(fp)
  80f3ec:	10800017 	ldw	r2,0(r2)
  80f3f0:	10800817 	ldw	r2,32(r2)
  80f3f4:	e17fff17 	ldw	r5,-4(fp)
  80f3f8:	e13ffd17 	ldw	r4,-12(fp)
  80f3fc:	103ee83a 	callr	r2
  80f400:	00000a06 	br	80f42c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80f404:	e0bfff17 	ldw	r2,-4(fp)
  80f408:	00c80004 	movi	r3,8192
  80f40c:	10c00115 	stw	r3,4(r2)
      return 0;
  80f410:	0005883a 	mov	r2,zero
  80f414:	00000506 	br	80f42c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80f418:	080f34c0 	call	80f34c <alt_get_errno>
  80f41c:	1007883a 	mov	r3,r2
  80f420:	00801444 	movi	r2,81
  80f424:	18800015 	stw	r2,0(r3)
    return -1;
  80f428:	00bfffc4 	movi	r2,-1
  }
}
  80f42c:	e037883a 	mov	sp,fp
  80f430:	dfc00117 	ldw	ra,4(sp)
  80f434:	df000017 	ldw	fp,0(sp)
  80f438:	dec00204 	addi	sp,sp,8
  80f43c:	f800283a 	ret

0080f440 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f440:	defffe04 	addi	sp,sp,-8
  80f444:	dfc00115 	stw	ra,4(sp)
  80f448:	df000015 	stw	fp,0(sp)
  80f44c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f450:	d0a00b17 	ldw	r2,-32724(gp)
  80f454:	10000326 	beq	r2,zero,80f464 <alt_get_errno+0x24>
  80f458:	d0a00b17 	ldw	r2,-32724(gp)
  80f45c:	103ee83a 	callr	r2
  80f460:	00000106 	br	80f468 <alt_get_errno+0x28>
  80f464:	d0a6cc04 	addi	r2,gp,-25808
}
  80f468:	e037883a 	mov	sp,fp
  80f46c:	dfc00117 	ldw	ra,4(sp)
  80f470:	df000017 	ldw	fp,0(sp)
  80f474:	dec00204 	addi	sp,sp,8
  80f478:	f800283a 	ret

0080f47c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80f47c:	deffed04 	addi	sp,sp,-76
  80f480:	dfc01215 	stw	ra,72(sp)
  80f484:	df001115 	stw	fp,68(sp)
  80f488:	df001104 	addi	fp,sp,68
  80f48c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f490:	e0bfff17 	ldw	r2,-4(fp)
  80f494:	10000816 	blt	r2,zero,80f4b8 <isatty+0x3c>
  80f498:	01400304 	movi	r5,12
  80f49c:	e13fff17 	ldw	r4,-4(fp)
  80f4a0:	0808ed00 	call	808ed0 <__mulsi3>
  80f4a4:	1007883a 	mov	r3,r2
  80f4a8:	00802074 	movhi	r2,129
  80f4ac:	10854204 	addi	r2,r2,5384
  80f4b0:	1885883a 	add	r2,r3,r2
  80f4b4:	00000106 	br	80f4bc <isatty+0x40>
  80f4b8:	0005883a 	mov	r2,zero
  80f4bc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80f4c0:	e0bfef17 	ldw	r2,-68(fp)
  80f4c4:	10000e26 	beq	r2,zero,80f500 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80f4c8:	e0bfef17 	ldw	r2,-68(fp)
  80f4cc:	10800017 	ldw	r2,0(r2)
  80f4d0:	10800817 	ldw	r2,32(r2)
  80f4d4:	1000021e 	bne	r2,zero,80f4e0 <isatty+0x64>
    {
      return 1;
  80f4d8:	00800044 	movi	r2,1
  80f4dc:	00000d06 	br	80f514 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80f4e0:	e0bff004 	addi	r2,fp,-64
  80f4e4:	100b883a 	mov	r5,r2
  80f4e8:	e13fff17 	ldw	r4,-4(fp)
  80f4ec:	080f3880 	call	80f388 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80f4f0:	e0bff117 	ldw	r2,-60(fp)
  80f4f4:	10880020 	cmpeqi	r2,r2,8192
  80f4f8:	10803fcc 	andi	r2,r2,255
  80f4fc:	00000506 	br	80f514 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80f500:	080f4400 	call	80f440 <alt_get_errno>
  80f504:	1007883a 	mov	r3,r2
  80f508:	00801444 	movi	r2,81
  80f50c:	18800015 	stw	r2,0(r3)
    return 0;
  80f510:	0005883a 	mov	r2,zero
  }
}
  80f514:	e037883a 	mov	sp,fp
  80f518:	dfc00117 	ldw	ra,4(sp)
  80f51c:	df000017 	ldw	fp,0(sp)
  80f520:	dec00204 	addi	sp,sp,8
  80f524:	f800283a 	ret

0080f528 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f528:	defffe04 	addi	sp,sp,-8
  80f52c:	dfc00115 	stw	ra,4(sp)
  80f530:	df000015 	stw	fp,0(sp)
  80f534:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f538:	d0a00b17 	ldw	r2,-32724(gp)
  80f53c:	10000326 	beq	r2,zero,80f54c <alt_get_errno+0x24>
  80f540:	d0a00b17 	ldw	r2,-32724(gp)
  80f544:	103ee83a 	callr	r2
  80f548:	00000106 	br	80f550 <alt_get_errno+0x28>
  80f54c:	d0a6cc04 	addi	r2,gp,-25808
}
  80f550:	e037883a 	mov	sp,fp
  80f554:	dfc00117 	ldw	ra,4(sp)
  80f558:	df000017 	ldw	fp,0(sp)
  80f55c:	dec00204 	addi	sp,sp,8
  80f560:	f800283a 	ret

0080f564 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80f564:	defff904 	addi	sp,sp,-28
  80f568:	dfc00615 	stw	ra,24(sp)
  80f56c:	df000515 	stw	fp,20(sp)
  80f570:	df000504 	addi	fp,sp,20
  80f574:	e13ffd15 	stw	r4,-12(fp)
  80f578:	e17ffe15 	stw	r5,-8(fp)
  80f57c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80f580:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f584:	e0bffd17 	ldw	r2,-12(fp)
  80f588:	10000816 	blt	r2,zero,80f5ac <lseek+0x48>
  80f58c:	01400304 	movi	r5,12
  80f590:	e13ffd17 	ldw	r4,-12(fp)
  80f594:	0808ed00 	call	808ed0 <__mulsi3>
  80f598:	1007883a 	mov	r3,r2
  80f59c:	00802074 	movhi	r2,129
  80f5a0:	10854204 	addi	r2,r2,5384
  80f5a4:	1885883a 	add	r2,r3,r2
  80f5a8:	00000106 	br	80f5b0 <lseek+0x4c>
  80f5ac:	0005883a 	mov	r2,zero
  80f5b0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80f5b4:	e0bffc17 	ldw	r2,-16(fp)
  80f5b8:	10001026 	beq	r2,zero,80f5fc <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80f5bc:	e0bffc17 	ldw	r2,-16(fp)
  80f5c0:	10800017 	ldw	r2,0(r2)
  80f5c4:	10800717 	ldw	r2,28(r2)
  80f5c8:	10000926 	beq	r2,zero,80f5f0 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80f5cc:	e0bffc17 	ldw	r2,-16(fp)
  80f5d0:	10800017 	ldw	r2,0(r2)
  80f5d4:	10800717 	ldw	r2,28(r2)
  80f5d8:	e1bfff17 	ldw	r6,-4(fp)
  80f5dc:	e17ffe17 	ldw	r5,-8(fp)
  80f5e0:	e13ffc17 	ldw	r4,-16(fp)
  80f5e4:	103ee83a 	callr	r2
  80f5e8:	e0bffb15 	stw	r2,-20(fp)
  80f5ec:	00000506 	br	80f604 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80f5f0:	00bfde84 	movi	r2,-134
  80f5f4:	e0bffb15 	stw	r2,-20(fp)
  80f5f8:	00000206 	br	80f604 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
  80f5fc:	00bfebc4 	movi	r2,-81
  80f600:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80f604:	e0bffb17 	ldw	r2,-20(fp)
  80f608:	1000070e 	bge	r2,zero,80f628 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
  80f60c:	080f5280 	call	80f528 <alt_get_errno>
  80f610:	1007883a 	mov	r3,r2
  80f614:	e0bffb17 	ldw	r2,-20(fp)
  80f618:	0085c83a 	sub	r2,zero,r2
  80f61c:	18800015 	stw	r2,0(r3)
    rc = -1;
  80f620:	00bfffc4 	movi	r2,-1
  80f624:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80f628:	e0bffb17 	ldw	r2,-20(fp)
}
  80f62c:	e037883a 	mov	sp,fp
  80f630:	dfc00117 	ldw	ra,4(sp)
  80f634:	df000017 	ldw	fp,0(sp)
  80f638:	dec00204 	addi	sp,sp,8
  80f63c:	f800283a 	ret

0080f640 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f640:	defffe04 	addi	sp,sp,-8
  80f644:	dfc00115 	stw	ra,4(sp)
  80f648:	df000015 	stw	fp,0(sp)
  80f64c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f650:	d0a00b17 	ldw	r2,-32724(gp)
  80f654:	10000326 	beq	r2,zero,80f664 <alt_get_errno+0x24>
  80f658:	d0a00b17 	ldw	r2,-32724(gp)
  80f65c:	103ee83a 	callr	r2
  80f660:	00000106 	br	80f668 <alt_get_errno+0x28>
  80f664:	d0a6cc04 	addi	r2,gp,-25808
}
  80f668:	e037883a 	mov	sp,fp
  80f66c:	dfc00117 	ldw	ra,4(sp)
  80f670:	df000017 	ldw	fp,0(sp)
  80f674:	dec00204 	addi	sp,sp,8
  80f678:	f800283a 	ret

0080f67c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80f67c:	defff904 	addi	sp,sp,-28
  80f680:	dfc00615 	stw	ra,24(sp)
  80f684:	df000515 	stw	fp,20(sp)
  80f688:	df000504 	addi	fp,sp,20
  80f68c:	e13ffd15 	stw	r4,-12(fp)
  80f690:	e17ffe15 	stw	r5,-8(fp)
  80f694:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f698:	e0bffd17 	ldw	r2,-12(fp)
  80f69c:	10000816 	blt	r2,zero,80f6c0 <read+0x44>
  80f6a0:	01400304 	movi	r5,12
  80f6a4:	e13ffd17 	ldw	r4,-12(fp)
  80f6a8:	0808ed00 	call	808ed0 <__mulsi3>
  80f6ac:	1007883a 	mov	r3,r2
  80f6b0:	00802074 	movhi	r2,129
  80f6b4:	10854204 	addi	r2,r2,5384
  80f6b8:	1885883a 	add	r2,r3,r2
  80f6bc:	00000106 	br	80f6c4 <read+0x48>
  80f6c0:	0005883a 	mov	r2,zero
  80f6c4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80f6c8:	e0bffb17 	ldw	r2,-20(fp)
  80f6cc:	10002226 	beq	r2,zero,80f758 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80f6d0:	e0bffb17 	ldw	r2,-20(fp)
  80f6d4:	10800217 	ldw	r2,8(r2)
  80f6d8:	108000cc 	andi	r2,r2,3
  80f6dc:	10800060 	cmpeqi	r2,r2,1
  80f6e0:	1000181e 	bne	r2,zero,80f744 <read+0xc8>
        (fd->dev->read))
  80f6e4:	e0bffb17 	ldw	r2,-20(fp)
  80f6e8:	10800017 	ldw	r2,0(r2)
  80f6ec:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80f6f0:	10001426 	beq	r2,zero,80f744 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80f6f4:	e0bffb17 	ldw	r2,-20(fp)
  80f6f8:	10800017 	ldw	r2,0(r2)
  80f6fc:	10800517 	ldw	r2,20(r2)
  80f700:	e0ffff17 	ldw	r3,-4(fp)
  80f704:	180d883a 	mov	r6,r3
  80f708:	e17ffe17 	ldw	r5,-8(fp)
  80f70c:	e13ffb17 	ldw	r4,-20(fp)
  80f710:	103ee83a 	callr	r2
  80f714:	e0bffc15 	stw	r2,-16(fp)
  80f718:	e0bffc17 	ldw	r2,-16(fp)
  80f71c:	1000070e 	bge	r2,zero,80f73c <read+0xc0>
        {
          ALT_ERRNO = -rval;
  80f720:	080f6400 	call	80f640 <alt_get_errno>
  80f724:	1007883a 	mov	r3,r2
  80f728:	e0bffc17 	ldw	r2,-16(fp)
  80f72c:	0085c83a 	sub	r2,zero,r2
  80f730:	18800015 	stw	r2,0(r3)
          return -1;
  80f734:	00bfffc4 	movi	r2,-1
  80f738:	00000c06 	br	80f76c <read+0xf0>
        }
        return rval;
  80f73c:	e0bffc17 	ldw	r2,-16(fp)
  80f740:	00000a06 	br	80f76c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80f744:	080f6400 	call	80f640 <alt_get_errno>
  80f748:	1007883a 	mov	r3,r2
  80f74c:	00800344 	movi	r2,13
  80f750:	18800015 	stw	r2,0(r3)
  80f754:	00000406 	br	80f768 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80f758:	080f6400 	call	80f640 <alt_get_errno>
  80f75c:	1007883a 	mov	r3,r2
  80f760:	00801444 	movi	r2,81
  80f764:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80f768:	00bfffc4 	movi	r2,-1
}
  80f76c:	e037883a 	mov	sp,fp
  80f770:	dfc00117 	ldw	ra,4(sp)
  80f774:	df000017 	ldw	fp,0(sp)
  80f778:	dec00204 	addi	sp,sp,8
  80f77c:	f800283a 	ret

0080f780 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f780:	defffe04 	addi	sp,sp,-8
  80f784:	dfc00115 	stw	ra,4(sp)
  80f788:	df000015 	stw	fp,0(sp)
  80f78c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f790:	d0a00b17 	ldw	r2,-32724(gp)
  80f794:	10000326 	beq	r2,zero,80f7a4 <alt_get_errno+0x24>
  80f798:	d0a00b17 	ldw	r2,-32724(gp)
  80f79c:	103ee83a 	callr	r2
  80f7a0:	00000106 	br	80f7a8 <alt_get_errno+0x28>
  80f7a4:	d0a6cc04 	addi	r2,gp,-25808
}
  80f7a8:	e037883a 	mov	sp,fp
  80f7ac:	dfc00117 	ldw	ra,4(sp)
  80f7b0:	df000017 	ldw	fp,0(sp)
  80f7b4:	dec00204 	addi	sp,sp,8
  80f7b8:	f800283a 	ret

0080f7bc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80f7bc:	defff904 	addi	sp,sp,-28
  80f7c0:	dfc00615 	stw	ra,24(sp)
  80f7c4:	df000515 	stw	fp,20(sp)
  80f7c8:	df000504 	addi	fp,sp,20
  80f7cc:	e13ffd15 	stw	r4,-12(fp)
  80f7d0:	e17ffe15 	stw	r5,-8(fp)
  80f7d4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f7d8:	e0bffd17 	ldw	r2,-12(fp)
  80f7dc:	10000816 	blt	r2,zero,80f800 <write+0x44>
  80f7e0:	01400304 	movi	r5,12
  80f7e4:	e13ffd17 	ldw	r4,-12(fp)
  80f7e8:	0808ed00 	call	808ed0 <__mulsi3>
  80f7ec:	1007883a 	mov	r3,r2
  80f7f0:	00802074 	movhi	r2,129
  80f7f4:	10854204 	addi	r2,r2,5384
  80f7f8:	1885883a 	add	r2,r3,r2
  80f7fc:	00000106 	br	80f804 <write+0x48>
  80f800:	0005883a 	mov	r2,zero
  80f804:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80f808:	e0bffb17 	ldw	r2,-20(fp)
  80f80c:	10002126 	beq	r2,zero,80f894 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80f810:	e0bffb17 	ldw	r2,-20(fp)
  80f814:	10800217 	ldw	r2,8(r2)
  80f818:	108000cc 	andi	r2,r2,3
  80f81c:	10001826 	beq	r2,zero,80f880 <write+0xc4>
  80f820:	e0bffb17 	ldw	r2,-20(fp)
  80f824:	10800017 	ldw	r2,0(r2)
  80f828:	10800617 	ldw	r2,24(r2)
  80f82c:	10001426 	beq	r2,zero,80f880 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80f830:	e0bffb17 	ldw	r2,-20(fp)
  80f834:	10800017 	ldw	r2,0(r2)
  80f838:	10800617 	ldw	r2,24(r2)
  80f83c:	e0ffff17 	ldw	r3,-4(fp)
  80f840:	180d883a 	mov	r6,r3
  80f844:	e17ffe17 	ldw	r5,-8(fp)
  80f848:	e13ffb17 	ldw	r4,-20(fp)
  80f84c:	103ee83a 	callr	r2
  80f850:	e0bffc15 	stw	r2,-16(fp)
  80f854:	e0bffc17 	ldw	r2,-16(fp)
  80f858:	1000070e 	bge	r2,zero,80f878 <write+0xbc>
      {
        ALT_ERRNO = -rval;
  80f85c:	080f7800 	call	80f780 <alt_get_errno>
  80f860:	1007883a 	mov	r3,r2
  80f864:	e0bffc17 	ldw	r2,-16(fp)
  80f868:	0085c83a 	sub	r2,zero,r2
  80f86c:	18800015 	stw	r2,0(r3)
        return -1;
  80f870:	00bfffc4 	movi	r2,-1
  80f874:	00000c06 	br	80f8a8 <write+0xec>
      }
      return rval;
  80f878:	e0bffc17 	ldw	r2,-16(fp)
  80f87c:	00000a06 	br	80f8a8 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80f880:	080f7800 	call	80f780 <alt_get_errno>
  80f884:	1007883a 	mov	r3,r2
  80f888:	00800344 	movi	r2,13
  80f88c:	18800015 	stw	r2,0(r3)
  80f890:	00000406 	br	80f8a4 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80f894:	080f7800 	call	80f780 <alt_get_errno>
  80f898:	1007883a 	mov	r3,r2
  80f89c:	00801444 	movi	r2,81
  80f8a0:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80f8a4:	00bfffc4 	movi	r2,-1
}
  80f8a8:	e037883a 	mov	sp,fp
  80f8ac:	dfc00117 	ldw	ra,4(sp)
  80f8b0:	df000017 	ldw	fp,0(sp)
  80f8b4:	dec00204 	addi	sp,sp,8
  80f8b8:	f800283a 	ret
